<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PluginSdk</name>
    </assembly>
    <members>
        <member name="T:HomeSeer.PluginSdk.AbstractPlugin">
             <inheritdoc cref="T:HomeSeer.PluginSdk.IPlugin"/>
             <summary>
             The base implementation of the <see cref="T:HomeSeer.PluginSdk.IPlugin"/> interface.
             <para>
             It includes default implementations for most of the IPlugin members and wraps others
              with convenience methods and objects that make it simpler to interface with the HomeSeer system.
            
             Once the containing plugin application is started, initiate a connection
              to the HomeSeer system by calling <see cref="M:HomeSeer.PluginSdk.AbstractPlugin.Connect(System.String[])"/>.
             </para>
             <para>All plugins (the HSPI class) should derive from this class.</para>
             </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.HasSettings">
            <inheritdoc cref="P:HomeSeer.PluginSdk.IPlugin.HasSettings" />
            <remarks>
            The default implementation should be sufficient for all purposes;
             returning TRUE if the <see cref="P:HomeSeer.PluginSdk.AbstractPlugin.Settings"/> property contains pages
             or FALSE if it doesn't.
            <para>
            Override this and always return TRUE if you plan on adding settings pages to the collection later
            </para>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.Id">
            <inheritdoc cref="P:HomeSeer.PluginSdk.IPlugin.Id" />
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.Name">
            <inheritdoc cref="P:HomeSeer.PluginSdk.IPlugin.Name" />
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.AccessLevel">
            <inheritdoc cref="P:HomeSeer.PluginSdk.IPlugin.AccessLevel" />
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.SupportsConfigDevice">
            <inheritdoc cref="P:HomeSeer.PluginSdk.IPlugin.SupportsConfigDevice" />
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.SupportsConfigFeature">
            <inheritdoc cref="P:HomeSeer.PluginSdk.IPlugin.SupportsConfigFeature" />
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.SupportsConfigDeviceAll">
            <inheritdoc cref="P:HomeSeer.PluginSdk.IPlugin.SupportsConfigDeviceAll" />
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.TriggerCount">
            <inheritdoc cref="P:HomeSeer.PluginSdk.IPlugin.TriggerCount" />
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.ActionCount">
            <inheritdoc cref="P:HomeSeer.PluginSdk.IPlugin.ActionCount" />
        </member>
        <member name="F:HomeSeer.PluginSdk.AbstractPlugin.SettingsSectionName">
            <summary>
            Default section name for storing settings in an INI file
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.HomeSeerSystem">
            <summary>
            An instance of the HomeSeer system
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.Status">
            <summary>
            The current status of the plugin.
            <para>
            Default state is OK
            </para>
            </summary>
            <remarks>
            This property is often queried by HomeSeer before interfacing with the plugin during normal
             operation of the system to determine if it should continue making calls or report to the user that
             the plugin may be inoperable. This is also queried when users navigate to the plugin management page.
            </remarks>
            <seealso cref="T:HomeSeer.PluginSdk.PluginStatus"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.SettingsFileName">
            <summary>
            The name of the settings INI file for the plugin.
            <para>
            It is recommended to use [PLUGIN-ID].ini where [PLUGIN-ID] is the ID of this plugin
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.Settings">
            <summary>
            The collection of settings pages for the plugin.
              See <see cref="T:HomeSeer.Jui.Views.SettingsCollection"/> for more information.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.ActionTypes">
            <summary>
            The collection of action types that this plugin hosts for HomeSeer
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.TriggerTypes">
            <summary>
            The collection of trigger types that this plugin hosts for HomeSeer
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.IpAddress">
            <summary>
            The IP Address that the HomeSeer system is located at
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.AbstractPlugin.LogDebug">
            <summary>
            Used to enable/disable internal logging to the console
            <para>
            When it is TRUE, log messages from the PluginSdk code will be written to the Console
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.#ctor">
            <summary>
            Default constructor that initializes the Action and Trigger type collections
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.Connect(System.String[])">
            <summary>
            Attempt to establish a connection to the HomeSeer system
            <para>
            This connection will be maintained as long as the program is running
             or until <see cref="M:HomeSeer.PluginSdk.AbstractPlugin.ShutdownIO"/> is called.
            </para>
            </summary>
            <param name="args">Command line arguments included in the execution of the program</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.Initialize">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.InitIO"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.InitIO">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.InitIO"/>
            <summary>
            Called by HomeSeer to initialize the plugin.
            <para>Perform all initialization logic in <see cref="M:HomeSeer.PluginSdk.AbstractPlugin.Initialize"/></para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.ShutdownIO">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.ShutdownIO" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.OnShutdown">
            <summary>
            Called right before the plugin shuts down.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.GetJuiSettingsPages">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.GetJuiSettingsPages"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.OnSettingsLoad">
            <summary>
            Called right before the data held in <see cref="P:HomeSeer.PluginSdk.AbstractPlugin.Settings"/> is serialized and sent to HomeSeer.
            <para>
            Use this if you need to process anything when the plugin settings are loaded.
             Otherwise, it is typically unnecessary to override this.  The <see cref="T:HomeSeer.Jui.Views.SettingsCollection"/> class
             automatically takes care of the JSON serialization/deserialization process.
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.SaveJuiSettingsPages(System.String)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.SaveJuiSettingsPages(System.String)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.OnSettingPageSave(HomeSeer.Jui.Views.Page)">
            <summary>
            Called when there are changes to settings that need to be processed for a specific page.
            </summary>
            <param name="pageDelta">The page with view changes to be processed</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown when a view change targets a view that doesn't exist on the page
            </exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.OnSettingChange(System.String,HomeSeer.Jui.Views.AbstractView,HomeSeer.Jui.Views.AbstractView)">
            <summary>
            Called when there is a change to a setting that needs to be processed
            </summary>
            <param name="pageId">The ID of the page the view is on</param>
            <param name="currentView">The state of the setting before the change</param>
            <param name="changedView">The state of the settings after the change</param>
            <returns>
            TRUE if the change should be saved, FALSE if it should not
            <para>
            You should throw an exception including a detailed message whenever possible over returning FALSE
            </para>
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.LoadSettingsFromIni">
            <summary>
            Loads the plugin settings saved to INI to Settings and saves default values if none exist.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.OnStatusCheck">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.OnStatusCheck" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.BeforeReturnStatus">
            <summary>
            Called immediately before the plugin returns its <see cref="P:HomeSeer.PluginSdk.AbstractPlugin.Status"/> to HomeSeer.
            <para>
            Use this to analyze the current state of the plugin and update the <see cref="P:HomeSeer.PluginSdk.AbstractPlugin.Status"/> accordingly.
            </para>
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.PluginStatus"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.UpdateStatusNow(System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.UpdateStatusNow(System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.SetIOMulti(System.Collections.Generic.List{HomeSeer.PluginSdk.Devices.Controls.ControlEvent})">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.SetIOMulti(System.Collections.Generic.List{HomeSeer.PluginSdk.Devices.Controls.ControlEvent})" />
            <remarks>
            The default behavior is to clear the current status text and set the value on the target feature and then
             let HomeSeer assign the status text based on the configured <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s
             and <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.HasJuiDeviceConfigPage(System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.HasJuiDeviceConfigPage(System.Int32)" />
            <remarks>
            Default behavior is to show a configuration page for every device when
             <see cref="P:HomeSeer.PluginSdk.AbstractPlugin.SupportsConfigDevice"/> or <see cref="P:HomeSeer.PluginSdk.AbstractPlugin.SupportsConfigFeature"/> or <see cref="P:HomeSeer.PluginSdk.AbstractPlugin.SupportsConfigDeviceAll"/> is set to true.
             Adjust this behavior if the plugin only shows a configuration page for some, but not all, devices.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.GetJuiDeviceConfigPage(System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.GetJuiDeviceConfigPage(System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.SaveJuiDeviceConfigPage(System.String,System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.SaveJuiDeviceConfigPage(System.String,System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.OnDeviceConfigChange(HomeSeer.Jui.Views.Page,System.Int32)">
            <summary>
            Called when there are changes to the device or feature config page that need to be processed and saved
            </summary>
            <param name="deviceConfigPage">A JUI page containing only the new state of any changed views</param>
            <param name="devOrFeatRef">The reference of the device or feature the config page is for</param>
            <returns>
            TRUE if the save was successful; FALSE if it was not
            <para>
            You should throw an exception including a detailed message whenever possible over returning FALSE
            </para>
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.PostBackProc(System.String,System.String,System.String,System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.PostBackProc(System.String,System.String,System.String,System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.HsEvent(HomeSeer.PluginSdk.Constants.HSEvent,System.Object[])">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.HsEvent(HomeSeer.PluginSdk.Constants.HSEvent,System.Object[])" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.ActionReferencesDevice(HomeSeer.PluginSdk.Events.TrigActInfo,System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.ActionReferencesDevice(HomeSeer.PluginSdk.Events.TrigActInfo,System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.ActionBuildUI(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.ActionBuildUI(HomeSeer.PluginSdk.Events.TrigActInfo)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.ActionConfigured(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.ActionConfigured(HomeSeer.PluginSdk.Events.TrigActInfo)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.ActionFormatUI(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.ActionFormatUI(HomeSeer.PluginSdk.Events.TrigActInfo)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.ActionProcessPostUI(System.Collections.Generic.Dictionary{System.String,System.String},HomeSeer.PluginSdk.Events.TrigActInfo)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.ActionProcessPostUI(System.Collections.Generic.Dictionary{System.String,System.String},HomeSeer.PluginSdk.Events.TrigActInfo)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.HandleAction(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.HandleAction(HomeSeer.PluginSdk.Events.TrigActInfo)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.GetActionNameByNumber(System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.GetActionNameByNumber(System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.TriggerBuildUI(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.TriggerBuildUI(HomeSeer.PluginSdk.Events.TrigActInfo)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.TriggerFormatUI(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.TriggerFormatUI(HomeSeer.PluginSdk.Events.TrigActInfo)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.TriggerProcessPostUI(System.Collections.Generic.Dictionary{System.String,System.String},HomeSeer.PluginSdk.Events.TrigActInfo)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.TriggerProcessPostUI(System.Collections.Generic.Dictionary{System.String,System.String},HomeSeer.PluginSdk.Events.TrigActInfo)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.TriggerReferencesDeviceOrFeature(HomeSeer.PluginSdk.Events.TrigActInfo,System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.TriggerReferencesDeviceOrFeature(HomeSeer.PluginSdk.Events.TrigActInfo,System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.TriggerCanBeCondition(System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.TriggerCanBeCondition(System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.GetSubTriggerCount(System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.GetSubTriggerCount(System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.GetSubTriggerNameByNumber(System.Int32,System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.GetSubTriggerNameByNumber(System.Int32,System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.IsTriggerConfigValid(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.IsTriggerConfigValid(HomeSeer.PluginSdk.Events.TrigActInfo)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.GetTriggerNameByNumber(System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.GetTriggerNameByNumber(System.Int32)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.TriggerTrue(HomeSeer.PluginSdk.Events.TrigActInfo,System.Boolean)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.TriggerTrue(HomeSeer.PluginSdk.Events.TrigActInfo,System.Boolean)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.PluginFunction(System.String,System.Object[])">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.PluginFunction(System.String,System.Object[])" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.PluginPropertyGet(System.String)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.PluginPropertyGet(System.String)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.PluginPropertySet(System.String,System.Object)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.PluginPropertySet(System.String,System.Object)" />
        </member>
        <member name="M:HomeSeer.PluginSdk.AbstractPlugin.SpeakIn(System.Int32,System.String,System.Boolean,System.String)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.IPlugin.SpeakIn(System.Int32,System.String,System.Boolean,System.String)" />
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Controls.ControlLocation">
            <summary>
            The location and size of a control available on a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            <para>
            It describes the row and column a control occupies in the grid as well as how many columns wide it is.
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.ControlLocation.#ctor">
            <summary>
            Initialize a new location with a row and column position of 0 and a width of 1 column.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.ControlLocation.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new location with the specified row and column position and desired width.
            </summary>
            <param name="row">The 1 index of the location row. Must be >= 1</param>
            <param name="column">The 1 index of the location column. Must be >= 1</param>
            <param name="width">The number of columns the control occupies. Must be >= 1</param>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.ControlLocation.Row">
            <summary>
            The row the control is located in.
            <para>
            This is a 1 based index starting from the top and going down.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.ControlLocation.Column">
            <summary>
            The column the control is located in.
            <para>
            This is a 1 based index starting from the left side and going right.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.ControlLocation.Width">
            <summary>
            The number of columns the control takes up
            <para>
            Must be between 1 and 4.
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.ControlLocation.Equals(System.Object)">
            <summary>
            Compare this object with another to see if they are equal
            </summary>
            <param name="obj">The object to compare</param>
            <returns><see langword="True"/> if they are equal, <see langword="False"/> if they are not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.ControlLocation.GetHashCode">
            <summary>
            Get the hash code
            </summary>
            <returns>A hash code based on the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.ControlLocation.Row"/>, <see cref="P:HomeSeer.PluginSdk.Devices.Controls.ControlLocation.Column"/> and <see cref="P:HomeSeer.PluginSdk.Devices.Controls.ControlLocation.Width"/> values</returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Controls.ControlEvent">
            <summary>
            The description of an event representing a controlled change of a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>
            <seealso cref="M:HomeSeer.PluginSdk.Devices.HsFeature.CreateControlEvent(System.Double)"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.CCIndex">
            <summary>
            A unique index representing the CAPIControl in HomeSeer.
            </summary>
            <remarks>This is a carry over from the legacy API. It should not need to be used anymore and is maintained for compatibility.</remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.TargetRef">
            <summary>
            The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> being controlled.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.Label">
            <summary>
            A human-readable string representing the label to display on the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> for this event.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.ControlType">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlType"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> used to generate this event.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.ControlUse">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> used to generate this event.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.ControlValue">
            <summary>
            The target value for the event. This is the desired <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.ControlString">
            <summary>
            A string containing control data for the event. This is used for <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.ColorPicker"/>s
            </summary>
            <remarks>
            This is NOT the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.Label"/> to display in the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.DisplayedStatus"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>. This is not displayed anywhere.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlEvent"/> for a <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/>
            </summary>
            <param name="devRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> being controlled</param>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Controls.EControlFlag">
            <summary>
            Special configuration flags that adjust the behavior of a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlFlag.InvalidStatusTarget">
            <summary>
            The StatusControl should not show up as a status target for events.
             IE it is only for creating control events
            <para>This is toggled by setting <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.IsInvalidStatusTarget"/> to <see langword="true"/></para>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlFlag.HasAdditionalData">
            <summary>
            The StatusControl label includes additional data tokens to be replaced by strings
             in <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.AdditionalStatusData"/>
            <para>This is toggled by setting <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.HasAdditionalData"/> to <see langword="true"/></para>
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Controls.EControlType">
            <summary>
            Render style and general behavior for a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>.
            </summary>
            <remarks>
            This is used by HomeSeer to determine how a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> should look, feel, and behave for a user.
            </remarks>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.StatusOnly">
            <summary>
            This is not rendered.
            </summary>
            <remarks>
            This is a legacy type. It is read only and for legacy support only. You should not use this for new <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.Values">
            <summary>
            Rendered as a select list option.
            </summary>
            <remarks>
            <para>
            There must be multiple <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s defined as <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.Values"/> for this to work
             properly. All <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s set as <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.Values"/> are collected and displayed
             together as a single select list.
            </para>
            <para>
            This renders and behaves slightly different than <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextSelectList"/>. The exact difference is being worked on at this time.
            </para>
            </remarks>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select">Mozilla Docs - Select Input</seealso>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextSelectList">
            <summary>
            Rendered as a select list.
            </summary>
            <remarks>
            <para>
            Possible options are defined by <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlStates"/>, or there should be multiple
             <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s defined as <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextSelectList"/> for this to work
             properly. All <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s set as <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextSelectList"/> are collected and displayed
             together as a single select list.
            </para>
            <para>
            Multiple <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextSelectList"/> controls are used when a unique value needs to be defined for the
             different options that can be selected. This is useful for integration with 3rd-party systems where an
             analysis of the selected string is not possible.
            </para>
            </remarks>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select">Mozilla Docs - Select Input</seealso>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.Button">
            <summary>
            Rendered as a button.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button">Mozilla Docs - Button Input</seealso>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.ValueRangeDropDown">
            <summary>
            Rendered as a select list.
            <para>
            Options are determined by the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange"/>'s
             <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.Min"/>, <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.Max"/>, and <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.Divisor"/>
            </para>
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select">Mozilla Docs - Select Input</seealso>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.ValueRangeSlider">
            <summary>
            Rendered as a slider.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range">Mozilla Docs - Range Input</seealso>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextBoxNumber">
            <summary>
            Rendered as a number input box.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number">Mozilla Docs - Number Input</seealso>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextBoxString">
            <summary>
            Rendered as a text input box.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text">Mozilla Docs - Text Input</seealso>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.RadioOption">
            <summary>
            Rendered as a radio button
            </summary>
            <remarks>
            <para>There should be multiple <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s defined as <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.RadioOption"/> for this to work
             properly. All <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s set as <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.RadioOption"/> are collected and displayed together.</para>
            </remarks>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio">Mozilla Docs - Radio Input</seealso>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.ButtonScript">
            <summary>
            Rendered as a button. Executes a script when activated.
            </summary>
            <remarks>
            This is a legacy type. It is read only and for legacy support only at this time. You should not use this for new <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s
            </remarks>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button">Mozilla Docs - Button Input</seealso>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.ColorPicker">
            <summary>
            Rendered as a color picker.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse">
            <summary>
            Defines what a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> is used for.
            </summary>
            <remarks>
            This is primarily used to improve integrations with 3rd-party systems.
             It helps determine how a control is used within the context of the owning <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.NotSpecified">
            <summary>
            Default use. The control's use is not defined.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.On">
            <summary>
            This control is used to turn something on.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Off">
            <summary>
            This control is used to turn something off.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Dim">
            <summary>
            This control is used to adjust the brightness of a light.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.OnAlternate">
            <summary>
            This control is used as an alternative command to turn something on.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Play">
            <summary>
            This control is used to play media.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Pause">
            <summary>
            This control is used to pause media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Stop">
            <summary>
            This control is used to stop media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Forward">
            <summary>
            This control is used to fast-forward media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Rewind">
            <summary>
            This control is used to rewind media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Repeat">
            <summary>
            This control is used to repeat media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Shuffle">
            <summary>
            This control is used to shuffle the media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.HeatSetPoint">
            <summary>
            This control is used to set the desired temperature when heating.
            </summary>
            <remarks>This is for thermostat devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.HeatingSetPoint"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.CoolSetPoint">
            <summary>
            This control is used to set the desired temperature when cooling.
            </summary>
            <remarks>This is for thermostat devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.CoolingSetPoint"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeOff">
            <summary>
            This control is used to set the thermostat operation mode to off.
            </summary>
            <remarks>This is for thermostat devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.ModeSet"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.OperatingMode"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeHeat">
            <summary>
            This control is used to set the thermostat operation mode to heat.
            </summary>
            <remarks>This is for thermostat devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.ModeSet"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.OperatingMode"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeCool">
            <summary>
            This control is used to set the thermostat operation mode to cool.
            </summary>
            <remarks>This is for thermostat devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.ModeSet"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.OperatingMode"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeAuto">
            <summary>
            This control is used to set the thermostat operation mode to auto.
            </summary>
            <remarks>This is for thermostat devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.ModeSet"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.OperatingMode"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.DoorLock">
            <summary>
            This control is used to lock a door.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.DoorUnLock">
            <summary>
            This control is used to unlock a door.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermFanAuto">
            <summary>
            This control is used to set the fan mode for a thermostat to auto.
            </summary>
            <remarks>This is for thermostat devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.FanModeSet"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermFanOn">
            <summary>
            This control is used to set the fan mode for a thermostat to on.
            </summary>
            <remarks>This is for thermostat devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.FanModeSet"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ColorControl">
            <summary>
            This control is used to adjust the color of a feature.
            </summary>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.ColorPicker"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.DimFan">
            <summary>
            This control is used to adjust the rate for a fan.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.MotionActive">
            <summary>
            Used for integrations to represent a status indicating active motion.
            </summary>
            <remarks>
            This is a carry over from the legacy API. It is out of place; as <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> defines the
             use of a control and not the use of a status.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.MotionInActive">
            <summary>
            Used for integrations to represent a status indicating a motion sensor resetting to idle.
            </summary>
            <remarks>
            This is a carry over from the legacy API. It is out of place; as <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> defines the
             use of a control and not the use of a status.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ContactActive">
            <summary>
            Used for integrations to represent a status indicating a contact sensor triggering.
            </summary>
            <remarks>
            This is a carry over from the legacy API. It is out of place; as <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> defines the
             use of a control and not the use of a status.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ContactInActive">
            <summary>
            Used for integrations to represent a status indicating a contact sensor being reset.
            </summary>
            <remarks>
            This is a carry over from the legacy API. It is out of place; as <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> defines the
             use of a control and not the use of a status.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Mute">
            <summary>
            This control is used to mute media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.UnMute">
            <summary>
            This control is used to un-mute media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.MuteToggle">
            <summary>
            This control is used to mute or un-mute media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Next">
            <summary>
            This control is used to advance to the next track available for playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Previous">
            <summary>
            This control is used to select the previous track for media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.Volume">
            <summary>
            This control is used to adjust the volume of media playback.
            </summary>
            <remarks>This is for media devices</remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.IncrementValue">
            <summary>
            This control is used to increment the value of a feature.
            </summary>
            <remarks>This can be used for example for thermostat setpoints or media volume</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.DecrementValue">
            <summary>
            This control is used to decrement the value of a feature.
            </summary>
            <remarks>This can be used for example for thermostat setpoints or media volume</remarks>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl">
            <summary>
            A control associated with a feature on a HomeSeer system. Formerly referred to as a VSPair.
            <para>
            This defines a control that will be available for a user to interact with.
            </para>
            </summary>
            <remarks>
            Legacy VSPairs used to be able to be defined as either status-only, control-only, or both,
             but this is no longer allowed. All StatusControls are considered both, and a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>
             will override the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.DisplayedStatus"/> on the feature if it is configured for the feature's
             current <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/>.
            <para>
             If you are looking to add a status-only control to a feature, create a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> instead.
            </para>
            </remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.#ctor(HomeSeer.PluginSdk.Devices.Controls.EControlType)">
            <summary>
            Initialize a new StatusControl of the specified type
            </summary>
            <param name="type">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlType"/> of the control</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if an invalid type is specified</exception>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Label">
            <summary>
            The text displayed on the control.
            <para>
            Unless overridden by a <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Label"/> associated with the same feature,
             this text is used as the status for the corresponding value.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlUse">
            <summary>
            What the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> is used for.
             See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> for more information.
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlType">
            <summary>
            The style the control is displayed as to users
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlType"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlStates">
            <summary>
            The possible states available for users to set this control to.
            <para>
            This is only used when the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlType"/> is set to <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextSelectList"/>
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue">
            <summary>
            The value this StatusControl targets.
            <para>
            If <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.IsRange"/> is TRUE then this is ignored in favor of <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange"/>
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.IsRange">
            <summary>
            Whether the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> targets a range of values or a single value.
            <para>
            Settings this to TRUE will cause the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/> field to be ignored in favor of
             the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange"/>
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.HasAdditionalData">
            <summary>
            Whether the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> label includes additional data tokens to be replaced by strings
             in <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.AdditionalStatusData"/>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange">
            <summary>
            The range of values that the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> targets.
            <para>
            If <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.IsRange"/> is FALSE then this is ignored in favor of <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/>
            </para>
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.ValueRange"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Location">
            <summary>
            The location of the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> when displayed to users
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlLocation"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.IsInvalidStatusTarget">
            <summary>
            Whether the StatusControl should be available as a status target for events and other platform integrations
            </summary>
            <returns>
            FALSE if the StatusControl is a valid status target,
             TRUE if it is not.
            </returns>
            See also: <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlFlag.InvalidStatusTarget"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Column">
            <summary>
            The column that the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> is located at
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Row">
            <summary>
            The row that the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> is located at
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Width">
            <summary>
            The number of columns the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> occupies
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.GetLabelForValue(System.Double,System.String[])">
            <summary>
            Get the label for the specified value correctly formatted according to the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>'s
             configuration
            </summary>
            <param name="value">The value to get the label for</param>
            <param name="additionalData">
            Additional data to include in the status label that replaces any tokens from
             <see cref="M:HomeSeer.PluginSdk.Devices.HsFeature.GetAdditionalDataToken(System.Int32)"/> included in the status.
            </param>
            <returns>The value as a string formatted according to the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange"/> configuration.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the value is not targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/></exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TryGetLabelForValue(System.String@,System.Double,System.String[])">
            <summary>
            Try to get the label for the specified value correctly formatted according to the
             <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>'s configuration.
            </summary>
            <param name="label">The string variable the label will be written to</param>
            <param name="value">The value to get the label for</param>
            <param name="additionalData">
            Additional data to include in the status label that replaces any tokens from
             <see cref="M:HomeSeer.PluginSdk.Devices.HsFeature.GetAdditionalDataToken(System.Int32)"/> included in the status.
            </param>
            <returns>
            TRUE if a label is available for the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>,
             FALSE if the value is not valid for this <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> or there is no label defined.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.CreateControlEvent(System.Int32)">
            <summary>
            Create a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlEvent"/> from this <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> for a given <paramref name="devRef"/>.
             This uses the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/> for the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.ControlValue"/>
            </summary>
            <param name="devRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> being controlled.</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlEvent"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.CreateControlEvent(System.Int32,System.Double)">
            <summary>
            Create a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlEvent"/> from this <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> for a given
             <paramref name="value"/> and <paramref name="devRef"/>.
            </summary>
            <remarks>Use this when the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> is a range and a specific value must by chosen within that range.</remarks>
            <param name="devRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> being controlled.</param>
            <param name="value">The target <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/> for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlEvent"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="value"/> is not targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/></exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.IsValueInRange(System.Double)">
            <summary>
            Determine if a specified value is targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>"/>
            </summary>
            <param name="value">The value to check</param>
            <returns>
            TRUE if the value is targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>,
             FALSE if it is not
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.AddFlag(HomeSeer.PluginSdk.Devices.Controls.EControlFlag)">
            <summary>
            Add the specified <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlFlag"/> to the StatusControl
            </summary>
            <param name="controlFlag">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlFlag"/> to add</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ContainsFlag(HomeSeer.PluginSdk.Devices.Controls.EControlFlag)">
            <summary>
            Determine if the StatusControl contains the specified <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlFlag"/>
            </summary>
            <param name="controlFlag">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlFlag"/> to look for</param>
            <returns>
            TRUE if the StatusControl contains the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlFlag"/>,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.RemoveFlag(HomeSeer.PluginSdk.Devices.Controls.EControlFlag)">
            <summary>
            Remove the specified <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlFlag"/> from the StatusControl
            </summary>
            <param name="controlFlag">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlFlag"/> to remove</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ClearFlags">
            <summary>
            Clear all <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlFlag"/>s on the StatusControl.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Equals(System.Object)">
            <summary>
            Compare this object with another to see if they are equal
            </summary>
            <param name="obj">The object to compare</param>
            <returns><see langword="true"/> if they are equal, <see langword="false"/> if they are not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControl.GetHashCode">
            <summary>
            Get the hash code
            </summary>
            <returns>A hash code based on the <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.Min"/> of <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange"/> if <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.IsRange"/> is <see langword="true"/> or <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/> if it is <see langword="false"/>.</returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection">
            <summary>
            A managed collection of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s
            </summary>
            <remarks>
            This is a <see cref="T:System.Collections.Generic.SortedDictionary`2"/> where <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/> or
             <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.Min"/> of <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange"/> is used as the key.
             This is used to ensure that there is only one <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> per <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/>
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.Add(HomeSeer.PluginSdk.Devices.Controls.StatusControl)">
            <summary>
            Add a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to the collection
            </summary>
            <param name="statusControl">A <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to add. It must not target a value that is already handled by the collection.</param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="statusControl"/> targets a value that is already handled in the collection.</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.AddRange(System.Collections.Generic.List{HomeSeer.PluginSdk.Devices.Controls.StatusControl})">
            <summary>
            Add multiple <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s to the collection
            </summary>
            <param name="statusControls">A collection of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s to add. Make sure there is only one <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> handling each value.</param>
            <exception cref="T:System.ArgumentException">Thrown if any element in <paramref name="statusControls"/> targets a value that is already handled in the collection.</exception>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.Item(System.Double)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> in the collection that handles the specified value
            </summary>
            <param name="value">The value associated with the desired <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when no <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> is found that handles the specified <paramref name="value"/></exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.Contains(HomeSeer.PluginSdk.Devices.Controls.StatusControl)">
            <summary>
            Determine if a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> is already in the managed collection
            </summary>
            <remarks>
            This check is based on <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/> or the <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.Min"/> of
             <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange"/>
            </remarks>
            <param name="statusControl">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to search for</param>
            <returns><see langword="True"/> if the <paramref name="statusControl"/> is in the collection, <see langword="False"/> if it is not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.ContainsValue(System.Double)">
            <summary>
            Determine if a value is handled by the collection
            </summary>
            <param name="value">The value to check for</param>
            <returns><see langword="True"/> if the value is handled, <see langword="False"/> if it is not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.GetControlsForRange(System.Double,System.Double)">
            <summary>
            Get a list of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s that handle a given range of values
            </summary>
            <param name="min">The smallest number in the range</param>
            <param name="max">The largest number in the range</param>
            <returns>A List of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s</returns>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.Values">
            <summary>
            Get an unordered list of the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s in the collection
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.Count">
            <summary>
            The number of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s in the collection
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.RemoveKey(System.Double)">
            <summary>
            Remove the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> that handles the specified <paramref name="value"/>
            </summary>
            <param name="value">The value handled by the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to remove</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.Remove(HomeSeer.PluginSdk.Devices.Controls.StatusControl)">
            <summary>
            Remove a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> from the collection
            </summary>
            <remarks>
            A key is determined by the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/> or the <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.Min"/> of
             <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange"/> of <paramref name="statusControl"/>.
             The found item is then compared by hash code to ensure they are the
             same.
            </remarks>
            <param name="statusControl">A <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to remove</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.RemoveAll">
            <summary>
            Remove all <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s in the collection
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.HasControlForUse(HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Determine if the collection contains a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> with a specific <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>
            </summary>
            <param name="controlUse">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> value to look for </param>
            <returns>TRUE if the collection contains such a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>, FALSE if it does not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.GetFirstControlForUse(HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Get a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> in the collection which has a specific <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>
            </summary>
            <param name="controlUse">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> value to look for </param>
            <returns>
            The first <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> found that has the specified <paramref name="controlUse"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if no element is found with the specified <paramref name="controlUse"/>
            </exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection.GetControlsForUse(HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Get all <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl">StatusControls</see> in the collection which have a specific <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>
            </summary>
            <param name="controlUse">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> value to look for</param>
            <returns>
            A List of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl">StatusControls</see> found that have the specified <paramref name="controlUse"/>.
            </returns>
            <remarks>
            <para>
            If no <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl">StatusControls</see> are found with the specified <paramref name="controlUse"/>,
            an empty List is returned.
            </para>
            </remarks>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.DeviceFactory">
            <summary>
            Factory class for defining new <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>s for HomeSeer
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.CreateDevice(System.String)">
            <summary>
            Prepare a new device definition
            </summary>
            <param name="pluginId">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Id"/> of the plugin that owns the new device</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/> containing information about the new device</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.WithFeature(HomeSeer.PluginSdk.Devices.FeatureFactory)">
            <summary>
            Add a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to the new <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>
            </summary>
            <param name="feature">A <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> describing the new <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></param>
            <returns>The <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/> with the new <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> definition included</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> provided is invalid</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.WithAddress(System.String)">
            <summary>
            Add an <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> to the device
            </summary>
            <param name="address">The string to set the address to</param>
            <returns>The <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/> with the updated address value</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.WithName(System.String)">
            <summary>
            Set the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Name"/> of the device
            </summary>
            <param name="name">The name of the device. It must not be blank or whitespace</param>
            <returns>The <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/> with the updated name value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified name is null or whitespace</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.WithExtraData(HomeSeer.PluginSdk.Devices.PlugExtraData)">
            <summary>
            Set the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.PlugExtraData"/> on the device
            </summary>
            <param name="extraData"><see cref="T:HomeSeer.PluginSdk.Devices.PlugExtraData"/> to add to the device</param>
            <returns>The <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/> with the updated PlugExtraData value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="extraData"/> is null</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.WithMiscFlags(HomeSeer.PluginSdk.Devices.EMiscFlag[])">
            <summary>
            Add <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>s to the device
            </summary>
            <param name="miscFlags">A collection of <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>s to add to the device</param>
            <returns>The <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/> with the specified flags added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="miscFlags"/> is null or an empty list</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.WithoutMiscFlags(HomeSeer.PluginSdk.Devices.EMiscFlag[])">
            <summary>
            Remove a <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/> from the device
            </summary>
            <param name="miscFlags"><see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>(s) to remove</param>
            <returns>The DeviceFactory updated by removing the specified <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>(s)</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when no <paramref name="miscFlags"/> are specified</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.WithLocation(System.String)">
            <summary>
            Set the Location property on the device.
            </summary>
            <param name="location">The location to set on the device</param>
            <returns>The DeviceFactory updated with the specified location</returns>
            <remarks>Null or whitespace strings will be converted to empty strings ""</remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.WithLocation2(System.String)">
            <summary>
            Set the Location2 property on the device.
            </summary>
            <param name="location2">The location2 to set on the device</param>
            <returns>The DeviceFactory updated with the specified location2</returns>
            <remarks>Null or whitespace strings will be converted to empty strings ""</remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.AsType(HomeSeer.PluginSdk.Devices.Identification.EDeviceType,System.Int32)">
            <summary>
            Set the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.TypeInfo"/>'s <see cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.Type"/> and <see cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.SubType"/>
            </summary>
            <param name="deviceType">The <see cref="T:HomeSeer.PluginSdk.Devices.Identification.EDeviceType"/> used to describe the device</param>
            <param name="deviceSubType">The <see cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.SubType"/> of the device.
             Use the int value of the appropriate SubType enum in <see cref="N:HomeSeer.PluginSdk.Devices.Identification"/></param>
            <returns>The <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/> with an updated <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.TypeInfo"/></returns>
            <remarks>The <see cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.ApiType"/> is always set to <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EApiType.Device"/> for devices</remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.DeviceFactory.PrepareForHs">
            <summary>
            Prepare the data to be sent to HS for processing.
            </summary>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.NewDeviceData"/> bundle for HS to use to create a device.</returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.EFeatureDisplayType">
            <summary>
            <para>
            The display type for a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            This controls the way a feature and its controls are displayed in the HomeSeer UI.
            </para>
            </summary>
            <remarks>
            <para>While in grid view:</para>
            <para>
            When there are sibling features set as <see cref="F:HomeSeer.PluginSdk.Devices.EFeatureDisplayType.Important"/>, <see cref="F:HomeSeer.PluginSdk.Devices.EFeatureDisplayType.Normal"/> features will be shown in the status bar.
            When there are no sibling features set as <see cref="F:HomeSeer.PluginSdk.Devices.EFeatureDisplayType.Important"/>, all <see cref="F:HomeSeer.PluginSdk.Devices.EFeatureDisplayType.Normal"/> features will be analyzed
             to determine a single <see cref="F:HomeSeer.PluginSdk.Devices.EFeatureDisplayType.Important"/> feature to display.
            </para>
            <para>While in list view:</para>
            <para>
            <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>s are displayed <see cref="F:HomeSeer.PluginSdk.Devices.EFeatureDisplayType.Important"/> first and then <see cref="F:HomeSeer.PluginSdk.Devices.EFeatureDisplayType.Normal"/>.
            </para>
            <para> The term 'sibling features' refers to features that are a part of the same device. </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EFeatureDisplayType.Normal">
            <summary>
            Do not apply any special display behavior to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EFeatureDisplayType.Important">
            <summary>
            Prioritize the display of this <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> and its controls.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EFeatureDisplayType.Hidden">
            <summary>
            Hide the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> in grid view and list view.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.EMiscFlag">
            <summary>
            Various bit flags available to add to <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/>'s <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Misc"/> field
             that control its behavior on the HomeSeer platform.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.NoLog">
            <summary>
            Do not log messages pertaining to this device/feature
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.StatusOnly">
            <summary>
            Indicates that the device/feature does not have any controls and is only used to present a status
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.Hidden">
            <summary>
            Hide the device/feature from all views
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.DeviceNoStatus">
            <summary>
            Indicates that the device/feature does not have any <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s or <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s
             configured that map values to status strings.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.IncludePowerfail">
            <summary>
            if set, device's state is restored if power fail enabled
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.ShowValues">
            <summary>
            Indicates that the device/feature should show its available controls in the UI
            </summary>
            <remarks>
            This is set by default when creating a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> or <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.AutoVoiceCommand">
            <summary>
            set=create a voice command for this device
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.VoiceCommandConfirm">
            <summary>
            set=confirm voice command
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.MyhsDeviceChangeNotify">
            <summary>
            if set, a change of this device will be sent to MYHS through the tunnel
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.SetDoesNotChangeLastChange">
            <summary>
            If set, any set to a device value will not reset last change.
            </summary>
            <remarks>
            This is set by default when creating a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> using <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.IsLight">
            <summary>
            Device controls a lighting device (used by Alexa)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.CanDim">
            <summary>
            Indicates that the device/feature is a dimmer switch (used for 3rd party integration)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.NoStatusTrigger">
            <summary>
            Indicates that the device/feature is not available for selection in any device status change
             event triggers/conditions.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.NoGraphicsDisplay">
            <summary>
            Indicates that the device/feature does not display any graphics for the status even if
             <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s are configured
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.NoStatusDisplay">
            <summary>
            Indicates that the device/feature does not display any status text even if it is set.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.HideInMobile">
            <summary>
            Indicates that the device/feature should not show up in responses from the JSON API
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.GoogleDiscoveryEnabled">
            <summary>
            Expose this device to Google cloud services
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.AmazonDiscoveryEnabled">
            <summary>
            Expose this device to Amazon cloud services.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.MiscUnused11">
            <summary>
            Place holder for future misc flags.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.MiscUnused12">
            <summary>
            Place holder for future misc flags.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.MiscUnused13">
            <summary>
            Place holder for future misc flags.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.MiscUnused14">
            <summary>
            Place holder for future misc flags.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.MiscUnused15">
            <summary>
            Place holder for future misc flags.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.MiscUnused16">
            <summary>
            Place holder for future misc flags.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EMiscFlag.MiscUnused17">
            <summary>
            Place holder for future misc flags.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.EProperty">
            <summary>
            <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> and <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> property types. Used for communicating device/feature
             related changed to HomeSeer.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Ref">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.AdditionalStatusData">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.AdditionalStatusData"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Address">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.CanDim">
            <summary>
            An abstraction of the <see cref="F:HomeSeer.PluginSdk.Devices.EMiscFlag.CanDim"/> flag that is stored in <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Misc"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.DeviceType">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.TypeInfo"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Image">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Image"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Interface">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Interface"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.LastChange">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.LastChange"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Location">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Location"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Location2">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Location2"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Name">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Name"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.PlugExtraData">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.PlugExtraData"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Relationship">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Relationship"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.UserNote">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.UserNote"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.UserAccess">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.UserAccess"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.VoiceCommand">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.VoiceCommand"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.AssociatedDevices">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.AssociatedDevices"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Misc">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Misc"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Status">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Status"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.StatusControls">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.StatusControls"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.StatusGraphics">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.StatusGraphics"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.Value">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.InvalidValue">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.IsValueInvalid"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.FeatureDisplayPriority">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.HsDevice.FeatureDisplayPriority"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.FeatureDisplayType">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.DisplayType"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.DisplayedStatus">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.DisplayedStatus"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EProperty.StatusString">
            <summary>
            <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.StatusString"/>
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.EPollResponse">
            <summary>
            Possible responses to the <see cref="M:HomeSeer.PluginSdk.IPlugin.UpdateStatusNow(System.Int32)"/> call made by HomeSeer to get the latest
             status for a device/feature.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EPollResponse.Ok">
            <summary>
            The device/feature is fully operational.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EPollResponse.NotFound">
            <summary>
            The hardware backing the device/feature was not found.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EPollResponse.ErrorGettingStatus">
            <summary>
            There was a problem retrieving the latest status for the device/feature.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EPollResponse.CouldNotReachPlugin">
            <summary>
            The plugin did not respond to the request.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EPollResponse.Timeout">
            <summary>
            The device/feature did not respond in an appropriate amount of time to determine its current state.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EPollResponse.UnknownError">
            <summary>
            Some error occured while trying to complete the request preventing any state from being determined.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EPollResponse.StatusNotSupported">
            <summary>
            The device/feature does not support a displayed status and is only used for controls.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.FeatureFactory">
            <summary>
            Factory class for defining new <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>s for HomeSeer
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.CreateFeature(System.String)">
            <summary>
            Prepare a new feature definition
            </summary>
            <remarks>
            Make sure to associate this feature with a device before creating it. You can do this with
             <see cref="M:HomeSeer.PluginSdk.Devices.FeatureFactory.OnDevice(System.Int32)"/> or <see cref="M:HomeSeer.PluginSdk.Devices.FeatureFactory.PrepareForHsDevice(System.Int32)"/> if you are creating this feature on its own,
             or you can add this to a <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/> with <see cref="M:HomeSeer.PluginSdk.Devices.DeviceFactory.WithFeature(HomeSeer.PluginSdk.Devices.FeatureFactory)"/>.
            </remarks>
            <param name="pluginId">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Id"/> of the plugin that owns the new feature</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> containing information about the new feature</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.CreateFeature(System.String,System.Int32)">
            <summary>
            Prepare a new feature definition for a specific <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>
            </summary>
            <param name="pluginId">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Id"/> of the plugin that owns the new feature</param>
            <param name="devRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the device that should own the new feature</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> containing information about the new feature</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.CreateGenericBinaryControl(System.String,System.String,System.String,System.String,System.Double,System.Double)">
            <summary>
            Create a new generic, binary control feature that has 2 button controls and 2
             corresponding status graphics.
            </summary>
            <param name="pluginId">The Id of the plugin to be used as the interface property</param>
            <param name="name">The name of the feature</param>
            <param name="onText">The text on the On button</param>
            <param name="offText">The text on the Off button</param>
            <param name="onValue">The corresponding value for the On state</param>
            <param name="offValue">The corresponding value for the Off state</param>
            <returns>A FeatureFactory representing the desired feature</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.CreateGenericBinarySensor(System.String,System.String,System.String,System.String,System.Double,System.Double)">
            <summary>
            Create a new generic, binary sensor feature that has 2 status graphics representing 2 different
             sensor states.
            </summary>
            <param name="pluginId">The Id of the plugin to be used as the interface property</param>
            <param name="name">The name of the feature</param>
            <param name="onText">The text displayed when the status is active</param>
            <param name="offText">The text displayed when the status is passive</param>
            <param name="onValue">The corresponding value for the active state</param>
            <param name="offValue">The corresponding value for the passive state</param>
            <returns>A FeatureFactory representing the desired feature</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.OnDevice(System.Int32)">
            <summary>
            Associate the feature with a specific <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>
            </summary>
            <param name="devRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> that owns the feature</param>
            <returns>The calling FeatureFactory with its <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.AssociatedDevices"/> set to link to the desired device</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a <paramref name="devRef"/> is supplied that is less than or equal to 0</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.WithAddress(System.String)">
            <summary>
            Add an <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> to the feature
            </summary>
            <param name="address">The string to set the address to</param>
            <returns>The <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with the updated address value</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.WithName(System.String)">
            <summary>
            Set the name of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>. This sets <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Name"/>
            </summary>
            <param name="name">The name of the feature</param>
            <returns>The calling FeatureFactory updated with the desired name</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="name"/> is empty or whitespace</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.WithExtraData(HomeSeer.PluginSdk.Devices.PlugExtraData)">
            <summary>
            Set the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.PlugExtraData"/> for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="extraData"><see cref="T:HomeSeer.PluginSdk.Devices.PlugExtraData"/> to set on the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></param>
            <returns>The calling FeatureFactory with the specified <see cref="T:HomeSeer.PluginSdk.Devices.PlugExtraData"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="extraData"/> is null</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.WithMiscFlags(HomeSeer.PluginSdk.Devices.EMiscFlag[])">
            <summary>
            Add a <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/> to the feature
            </summary>
            <param name="miscFlags"><see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>(s) to add</param>
            <returns>The FeatureFactory updated by adding the specified <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>(s)</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when no <paramref name="miscFlags"/> are specified</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.WithoutMiscFlags(HomeSeer.PluginSdk.Devices.EMiscFlag[])">
            <summary>
            Remove a <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/> from the feature
            </summary>
            <param name="miscFlags"><see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>(s) to remove</param>
            <returns>The FeatureFactory updated by removing the specified <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>(s)</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when no <paramref name="miscFlags"/> are specified</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.WithLocation(System.String)">
            <summary>
            Set the Location property on the feature.
            </summary>
            <remarks>
            You should only adjust this if the location on the owning device is insufficient for this feature.
             This will be a location IN ADDITION to the device location.
            </remarks>
            <param name="location">The location to set on the feature</param>
            <returns>The FeatureFactory updated with the specified location</returns>
            <remarks>Null or whitespace strings will be converted to empty strings ""</remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.WithLocation2(System.String)">
            <summary>
            Set the Location2 property on the feature.
            </summary>
            <remarks>
            You should only adjust this if the location2 on the owning device is insufficient for this feature.
             This will be a location2 IN ADDITION to the device location2.
            </remarks>
            <param name="location2">The location2 to set on the feature</param>
            <returns>The FeatureFactory updated with the specified location2</returns>
            <remarks>Null or whitespace strings will be converted to empty strings ""</remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.WithDefaultValue(System.Double)">
            <summary>
            Set the value the feature is created with
            </summary>
            <param name="value">The value the feature should default to when it is created</param>
            <returns>The FeatureFactory updated with the specified value</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.WithDisplayType(HomeSeer.PluginSdk.Devices.EFeatureDisplayType)">
            <summary>
            Set the <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.DisplayType"/> for the feature
            </summary>
            <param name="displayType">The <see cref="T:HomeSeer.PluginSdk.Devices.EFeatureDisplayType"/> to set</param>
            <returns>The <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with the updated display type value</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AsType(HomeSeer.PluginSdk.Devices.Identification.EFeatureType,System.Int32)">
            <summary>
            Set the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.TypeInfo"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            </summary>
            <param name="featureType">The <see cref="T:HomeSeer.PluginSdk.Devices.Identification.EFeatureType"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></param>
            <param name="featureSubType">An int value representing a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> sub type.
            See <see cref="N:HomeSeer.PluginSdk.Devices.Identification"/> for enums listed as "FeatureSubType" for current lists.</param>
            <returns>The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with an updated <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.TypeInfo"/></returns>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EFeatureType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EGenericFeatureSubType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.EEnergyFeatureSubType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddControl(HomeSeer.PluginSdk.Devices.Controls.StatusControl)">
            <summary>
            Add a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> being built
            </summary>
            <param name="statusControl">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to add.</param>
            <returns>The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with an added <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="statusControl"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> for the values targeted by <paramref name="statusControl"/> already exists.</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddButton(System.Double,System.String,HomeSeer.PluginSdk.Devices.Controls.ControlLocation,HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Add a button to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            </summary>
            <param name="targetValue">The unique value associated with this control.</param>
            <param name="targetStatus">The text displayed on the button.</param>
            <param name="location">The location of the control in the grid. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlLocation"/></param>
            <param name="controlUse">The specific use for this control. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/></param>
            <returns>The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with a new <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="targetStatus"/> is empty or whitespace.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a control, targeting the specified <paramref name="targetValue"/>, already exists.</exception>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.Button"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddTextInputField(System.Double,System.String,HomeSeer.PluginSdk.Devices.Controls.ControlLocation,HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Add a text input field to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            </summary>
            <param name="targetValue">The unique value associated with this control.</param>
            <param name="hintText">The text displayed to the user to help them know what kind of value to input.</param>
            <param name="location">The location of the control in the grid. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlLocation"/></param>
            <param name="controlUse">The specific use for this control. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/></param>
            <returns>The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with a new <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="hintText"/> is empty or whitespace.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a control, targeting the specified <paramref name="targetValue"/>, already exists.</exception>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextBoxString"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddNumberInputField(System.Double,System.String,HomeSeer.PluginSdk.Devices.Controls.ControlLocation,HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Add a number input field to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            </summary>
            <param name="targetValue">The unique value associated with this control.</param>
            <param name="hintText">The text displayed to the user to help them know what kind of value to input.</param>
            <param name="location">The location of the control in the grid. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlLocation"/></param>
            <param name="controlUse">The specific use for this control. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/></param>
            <returns>The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with a new <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="hintText"/> is empty or whitespace.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a control, targeting the specified <paramref name="targetValue"/>, already exists.</exception>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextBoxNumber"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddSlider(HomeSeer.PluginSdk.Devices.ValueRange,HomeSeer.PluginSdk.Devices.Controls.ControlLocation,HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Add a slider control to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            </summary>
            <param name="targetRange">A <see cref="T:HomeSeer.PluginSdk.Devices.ValueRange"/></param>
            <param name="location">The location of the control in the grid. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlLocation"/></param>
            <param name="controlUse">The specific use for this control. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/></param>
            <returns>The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with a new <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="targetRange"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a control, targeting any of the specified values, already exists.</exception>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.ValueRangeSlider"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddValueDropDown(HomeSeer.PluginSdk.Devices.ValueRange,HomeSeer.PluginSdk.Devices.Controls.ControlLocation,HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Add a select list control to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> for a range of numbers.
            </summary>
            <param name="targetRange">A <see cref="T:HomeSeer.PluginSdk.Devices.ValueRange"/></param>
            <param name="location">The location of the control in the grid. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlLocation"/></param>
            <param name="controlUse">The specific use for this control. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/></param>
            <returns>
            The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with a new <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> added
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="targetRange"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a control, targeting any of the specified values, already exists.</exception>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.ValueRangeDropDown"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddTextDropDown(System.Collections.Generic.SortedDictionary{System.String,System.Double},HomeSeer.PluginSdk.Devices.Controls.ControlLocation,HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Add a select list control to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="textOptions">
            A <see cref="T:System.Collections.Generic.SortedDictionary`2"/> of options where the key is the
             <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Label"/> and the value is the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/>
            </param>
            <param name="location">The location of the control in the grid. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlLocation"/></param>
            <param name="controlUse">The specific use for this control. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>. This is applied to all options.</param>
            <returns>
            The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s with a
             <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlType"/> of <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextSelectList"/> added
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when no <paramref name="textOptions"/> are specified.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a control, targeting any of the specified values, already exists.</exception>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.TextSelectList"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddRadioSelectList(System.Collections.Generic.SortedDictionary{System.String,System.Double},HomeSeer.PluginSdk.Devices.Controls.ControlLocation,HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Add a set of radio input controls to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="textOptions">
            A <see cref="T:System.Collections.Generic.SortedDictionary`2"/> of options where the key is the
             <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Label"/> and the value is the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/>
            </param>
            <param name="location">The location of the control in the grid. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlLocation"/></param>
            <param name="controlUse">The specific use for this control. See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/></param>
            <returns>
            The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s with a
             <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlType"/> of <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.RadioOption"/> added
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when no <paramref name="textOptions"/> are specified.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a control, targeting the specified value, already exists.</exception>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.RadioOption"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddColorPicker(HomeSeer.PluginSdk.Devices.Controls.ControlLocation,HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Deprecated
            </summary>
            <param name="location">The location of the control in the grid</param>
            <param name="controlUse">The specific use for this control</param>
            <returns>A FeatureFactory with the new color control added</returns>
            <exception cref="T:System.ArgumentException">Thrown when a control, targeting the specified value, already exists</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddColorPicker(System.Double,HomeSeer.PluginSdk.Devices.Controls.ControlLocation,HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Add a color picker control to the feature
            </summary>
            <remarks>
            Color pickers do not use the value of the feature to operate. They use a control string;
             so the <paramref name="targetValue"/> is superficial and does not correspond to the actual selected color.
             A unique <paramref name="targetValue"/> must still be specified.
            </remarks>
            <param name="targetValue">The value this control occupies on the feature.</param>
            <param name="location">The location of the control in the grid</param>
            <param name="controlUse">The specific use for this control</param>
            <returns>A FeatureFactory with the new color control added</returns>
            <exception cref="T:System.ArgumentException">Thrown when a control, targeting the specified value, already exists</exception>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.ColorPicker"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddColorPicker(HomeSeer.PluginSdk.Devices.ValueRange,HomeSeer.PluginSdk.Devices.Controls.ControlLocation,HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Add a color picker control to the feature
            </summary>
            <remarks>
            Color pickers do not use the value of the feature to operate. They use a control string;
             so the <paramref name="targetRange"/> is superficial and does not correspond to the actual selected color.
            </remarks>
            <param name="targetRange">The values this control occupies on the feature.</param>
            <param name="location">The location of the control in the grid</param>
            <param name="controlUse">The specific use for this control</param>
            <returns>A FeatureFactory with the new color control added</returns>
            <exception cref="T:System.ArgumentException">Thrown when a control, targeting the specified value, already exists</exception>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlType.ColorPicker"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddGraphic(HomeSeer.PluginSdk.Devices.StatusGraphic)">
            <summary>
            Add a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> being built
            </summary>
            <param name="statusGraphic">The <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> to add.</param>
            <returns>The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with an added <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="statusGraphic"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> for the values targeted by <paramref name="statusGraphic"/> already exists.</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddGraphicForValue(System.String,System.Double,System.String)">
            <summary>
            Add a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> that targets a single value to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> being built
            </summary>
            <param name="imagePath">A path to an image file relative to the HomeSeer root directory</param>
            <param name="targetValue">The <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value"/> targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></param>
            <param name="statusText">The text displayed for the <paramref name="targetValue"/>. Default is a blank string.</param>
            <returns>The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with an added <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="imagePath"/> is empty or whitespace.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> for the <paramref name="targetValue"/> already exists.</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.AddGraphicForRange(System.String,System.Double,System.Double,System.String)">
            <summary>
            Add a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> that targets a range of values to the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> being built
            </summary>
            <param name="imagePath">A path to an image file relative to the HomeSeer root directory</param>
            <param name="minValue">The minimum value handled by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>.</param>
            <param name="maxValue">The maximum value handled by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></param>
            <param name="statusText">The text displayed by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>. Default is a blank string.</param>
            <returns>The calling <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> with an added <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="imagePath"/> is empty or whitespace.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> for a value between <paramref name="minValue"/> and <paramref name="maxValue"/> already exists.</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.PrepareForHsDevice(System.Int32)">
            <summary>
            Prepare the <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> to be sent to HomeSeer and added to a specific device.
            </summary>
            <param name="devRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> the
             <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is being added to</param>
            <returns><see cref="T:HomeSeer.PluginSdk.Devices.NewFeatureData"/> ready to be sent to HomeSeer via <see cref="M:HomeSeer.PluginSdk.IHsController.CreateFeatureForDevice(HomeSeer.PluginSdk.Devices.NewFeatureData)"/></returns>
            <remarks>
            You can either use this to assign the feature to a device as the last step before creation, or you can call
             <see cref="M:HomeSeer.PluginSdk.Devices.FeatureFactory.OnDevice(System.Int32)"/> to set the owning device and then <see cref="M:HomeSeer.PluginSdk.Devices.FeatureFactory.PrepareForHs"/> when you are
             ready to send it to HomeSeer.
            </remarks>
            <seealso cref="M:HomeSeer.PluginSdk.IHsController.CreateFeatureForDevice(HomeSeer.PluginSdk.Devices.NewFeatureData)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.FeatureFactory.PrepareForHs">
            <summary>
            Prepare the <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> to be sent to HomeSeer for creation.
            </summary>
            <returns><see cref="T:HomeSeer.PluginSdk.Devices.NewFeatureData"/> ready to be sent to HomeSeer via <see cref="M:HomeSeer.PluginSdk.IHsController.CreateFeatureForDevice(HomeSeer.PluginSdk.Devices.NewFeatureData)"/></returns>
            <remarks>
            Make sure the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is associated with a device by calling <see cref="M:HomeSeer.PluginSdk.Devices.FeatureFactory.OnDevice(System.Int32)"/> to
             set the owning device prior to calling this method.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> isn't correctly associated with a device.</exception>
            <seealso cref="M:HomeSeer.PluginSdk.IHsController.CreateFeatureForDevice(HomeSeer.PluginSdk.Devices.NewFeatureData)"/>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice">
            <summary>
            The base implementation of a HomeSeer device.
            <para>
            Used to represent devices and features as either a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> or <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </para>
            </summary>
            <remarks>
            Due to the fact that both <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>s and <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>s derive from this class
             some documentation may refer to either as a device. Be careful to ensure you know which one you are working
             with at all times to avoid unexpected InvalidOperationExceptions.
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Changes">
            <summary>
            A collection of changes to the device/feature since its initialization
            </summary>
            <remarks>
            This acts as a local cache and makes it easier to change multiple things about a device/feature and then
             send all of the changes to HomeSeer as a bundle via <see cref="M:HomeSeer.PluginSdk.IHsController.UpdateDeviceByRef(System.Int32,System.Collections.Generic.Dictionary{HomeSeer.PluginSdk.Devices.EProperty,System.Object})"/>
             or <see cref="M:HomeSeer.PluginSdk.IHsController.UpdateFeatureByRef(System.Int32,System.Collections.Generic.Dictionary{HomeSeer.PluginSdk.Devices.EProperty,System.Object})"/>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref">
            <summary>
            The unique identifier for this device/feature. This is the primary key for devices and features in HomeSeer.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address">
            <summary>
            A physical address for the device/feature.
            <para>
            Use this to store a unique identifier for the physical device this device/feature is associated with.
            </para>
            </summary>
            <remarks>
            <para>
            Since v1.2.5.0, this field is overloaded with the legacy Code field for backwards compatibility.
             If you are accessing a device/feature that was created using this API then you can safely ignore this remark.
             If you are accessing a device/feature that was created using the HS3 legacy API you may note that this field
             now includes the Code value if it exists. You can get the Code directly by using the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Code"/> field.
            </para>
            <para>
            This table shows the return value of <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> based on the value stored in the HS database.
            <list type="table">
             <listheader>
              <term>Address Value</term>
              <description>Returns</description>
             </listheader>
             <item>
              <term>Address Only</term>
              <description>Address</description>
             </item>
             <item>
              <term>Code Only</term>
              <description>Code</description>
             </item>
             <item>
              <term>Address and Code</term>
              <description>Address-Code</description>
             </item>
            </list>
            </para>
            <para>
            You can use <see cref="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.GetAddressFromAddressString(System.String)"/> and <see cref="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.GetCodeFromAddressString(System.String)"/> to pull
             the address and code, respectively, from this value.
            </para>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.AssociatedDevices">
            <summary>
            A set of unique IDs that represent the devices/features that are associated with this device/feature
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Code">
            <summary>
            Get the code stored in the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> string.
            </summary>
            <remarks>
            This field is only used for legacy support and grabs a value from the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> field directly.
             The code is grabbed from the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> field by using <see cref="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.GetCodeFromAddressString(System.String)"/>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.DisplayedStatus">
            <summary>
            The current status of the device/feature
            <para>
            This is the exact string that users see in the UI
            </para>
            </summary>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.StatusString"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Image">
            <summary>
            The address of an image that represents the current status of the device/feature
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Interface">
            <summary>
            The ID of the interface that is responsible for processing interactions with this device/feature
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.IsValueInvalid">
            <summary>
            Whether the device/feature is in an invalid state and should display as such to users.
            </summary>
            <remarks>
            Use this as a manual way to flag the device/feature as invalid when the automatic check through
             <see cref="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.IsValueValid"/> will not produce the desired result. Setting this to TRUE will force the
             device/feature's state to invalid.
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.LastChange">
            <summary>
            The date and time that this device/feature was last updated or changed
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Location">
            <summary>
            The primary location of the device/feature according to the locations configured on the user's system
            </summary>
            <remarks>
            Do not set this directly on features. It will be ignored/overwritten in favor of the location set
             on the owning device.
            <para>
            To optimize the user experience, it is recommended to ask the user which location they wish to assign
             to a device before finishing the inclusion process.
            </para>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Location2">
            <summary>
            The secondary location of the device/feature according to the locations configured on the user's system
            </summary>
            <remarks>
            Do not set this directly on features. It will be ignored/overwritten in favor of the location2 set
             on the owning device.
            <para>
            To optimize the user experience, it is recommended to ask the user which location they wish to assign
             to a device before finishing the inclusion process.
            </para>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Misc">
            <summary>
            A collection of bit flags used to represent various configuration options for a device/feature.
            <para>
            It is not recommended to set this directly. Instead, use <see cref="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.AddMiscFlag(HomeSeer.PluginSdk.Devices.EMiscFlag)"/>,
             <see cref="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.RemoveMiscFlag(HomeSeer.PluginSdk.Devices.EMiscFlag)"/>, and <see cref="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.ContainsMiscFlag(HomeSeer.PluginSdk.Devices.EMiscFlag)"/> to interface with this property
            </para>
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Name">
            <summary>
            The name of the device/feature
            </summary>
            <remarks>
            <para>
            To optimize the user experience, it is recommended to ask the user what name they wish to assign
             to the device before finishing the inclusion process.
            </para>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.PlugExtraData">
            <summary>
            A memory space available for plugins to store keyed and non-keyed data associated with the device/feature
            </summary>
            <remarks>
            Use this to store device/feature specific configuration options accessed via the DeviceConfig page
            </remarks>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.PlugExtraData"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Relationship">
            <summary>
            The type of relationship this device/feature has with other devices/features.
             See <see cref="T:HomeSeer.PluginSdk.Devices.Identification.ERelationship"/> for valid types and more details.
            </summary>
            <exception cref="T:HomeSeer.PluginSdk.Devices.Identification.DeviceRelationshipException">
            Thrown when setting the relationship while there are
             listed devices/features still associated with this device/feature
            </exception>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Status">
            <summary>
            The current status of the device/feature. (incorrect - the raw, unformatted status string)
            <para>WARNING - This property is being replaced by <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.StatusString"/> and <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.DisplayedStatus"/></para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.StatusString">
            <summary>
            The raw, unformatted status of the device/feature.
            <para>
            This is combined with a string returned from a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> or <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>
             that matches the current <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/> to produce the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.DisplayedStatus"/>
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.TypeInfo">
            <summary>
            Type info for this device/feature
            </summary>
            <remarks>
            This is used to describe this device/feature in a manner that is easily understood by UI generation engines
             and other smart home platforms. When these systems can understand what this device/feature is, they are
             better able to tailor the experience of the user to their expectations.
            </remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.TypeInfo"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.UserAccess">
            <summary>
            A string representation of the HomeSeer user access rights for this device/feature
            </summary>
            <remarks>This is typically configured by users and can be safely ignored when creating a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> or <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.UserNote">
            <summary>
            Notes attached to this device/feature by users
            </summary>
            <remarks>This is typically configured by users and can be safely ignored when creating a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> or <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value">
            <summary>
            A numeric value representing the current state of the device/feature.
            </summary>
            <remarks>
            Although this is available on devices it should not be set directly. This should only be set on features;
             as the information of the identified primary feature will be automatically pushed to the device to better
             adhere to user experience expectations.
            <para>
            This value relates to the TargetValue and TargetRange properties on the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>
             and <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> classes.
            </para>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.VoiceCommand">
            <summary>
            A voice friendly command string used to identify this device/feature
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._address">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._assDevices">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.AssociatedDevices"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._cacheChanges">
            <summary>
            Flag used to indicate whether to cache changes in <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Changes"/> when setting properties and not adjust
             the underlying value or to cache changes in <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Changes"/> and adjust the underlying value.
            </summary>
            <remarks>
            Setting this to TRUE allows you to quickly revert changes made by discarding <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Changes"/>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._displayedStatus">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.DisplayedStatus"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._image">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Image"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._interface">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Interface"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._invalidValue">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.IsValueInvalid"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._lastChange">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.LastChange"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._location">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Location"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._location2">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Location2"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._misc">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Misc"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._name">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Name"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._plugExtraData">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.PlugExtraData"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._relationship">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Relationship"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._status">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Status"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._statusString">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.StatusString"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._typeInfo">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.TypeInfo"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._userAccess">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.UserAccess"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._userNote">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.UserNote"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._value">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.AbstractHsDevice._voiceCommand">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.VoiceCommand"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.#ctor">
            <summary>
            Create a new AbstractHsDevice with default properties
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.#ctor(System.Int32)">
            <summary>
            Create a new AbstractHsDevice with a specific uniqueRef
            </summary>
            <param name="uniqueRef">The unique ID as an integer</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.RevertChanges">
            <summary>
            Clear all changes since initialization and reset the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Changes"/> property
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.IsValueValid">
            <summary>
            Determine whether the current value is valid.
            </summary>
            <returns>Always TRUE when not overriden</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.AddMiscFlag(HomeSeer.PluginSdk.Devices.EMiscFlag)">
            <summary>
            Add the specified <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/> to the device/feature
            </summary>
            <param name="misc">The <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/> to add</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.ContainsMiscFlag(HomeSeer.PluginSdk.Devices.EMiscFlag)">
            <summary>
            Determine if the device/feature contains the specified <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>
            </summary>
            <param name="misc">The <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/> to look for</param>
            <returns>
            TRUE if the device/feature contains the <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.RemoveMiscFlag(HomeSeer.PluginSdk.Devices.EMiscFlag)">
            <summary>
            Remove the specified <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/> from the device/feature
            </summary>
            <param name="misc">The <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/> to remove</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.ClearMiscFlags">
            <summary>
            Clear all <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>s on the device/feature.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.GetMiscForFlags(HomeSeer.PluginSdk.Devices.EMiscFlag[])">
            <summary>
            Get the value for any combination of <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>s
            </summary>
            <param name="misc"><see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>s to combine</param>
            <returns>A uint representing the combined <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>s</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.GetAddressFromAddressString(System.String)">
            <summary>
            Get the address from an address-code string.
            </summary>
            <remarks>
            HS3 supported an Address and Code field, but the Code field has been deprecated. The Address and Code fields
             used to also be combined into a single string with the format of ${ADDRESS}-${CODE}.
             The pseudocode for this is "${ADDRESS}-${CODE}".Trim('-');
             To maintain backwards compatibility support, the Address field will be overloaded with the Code for
             devices created using HS3. Use this method to get the address from the returned address-code string.
            </remarks>
            <param name="addressString">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/>-Code value string to parse</param>
            <returns>The Address value from the string</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.GetCodeFromAddressString(System.String)">
            <summary>
            Get the code from an address-code string.
            </summary>
            <remarks>
            HS3 supported an Address and Code field, but the Code field has been deprecated. The Address and Code fields
             used to also be combined into a single string with the format of ${ADDRESS}-${CODE}.
             The pseudocode for this is "${ADDRESS}-${CODE}".Trim('-');
             To maintain backwards compatibility support, the Address field will be overloaded with the Code for
             devices created using HS3. Use this method to get the address from the returned address-code string.
            </remarks>
            <param name="addressString">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/>-Code value string to parse</param>
            <returns>The Code value from the string</returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.HsFeature">
            <summary>
            A feature of a device connected to a HomeSeer system. It encapsulates a specific component of functionality
             available to the device it is associated with.
            <para>
            For example: A battery powered device should have a feature associated with it that handles only battery
             related information and controls. This feature should not contain anything having to do with any other
             component of that device.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.HsFeature.AdditionalStatusData">
            <summary>
            A list of strings used in the displayed status for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>. The strings in this list
             are used to replace the replacement tokens corresponding to each index in the status - @%INDEX@
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.HsFeature.DisplayPriority">
            <summary>
            <para>
            The priority of the feature when being considered for display where 1 is the most important.
            </para>
            </summary>
            <remarks>
            This is property is read-only.
            Modify <see cref="P:HomeSeer.PluginSdk.Devices.HsDevice.FeatureDisplayPriority"/> to change this property on HS.
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.HsFeature.DisplayType">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.EFeatureDisplayType"/> for a feature.
            </summary>
            <remarks>This is used to help HS determine how it should be displayed to the user</remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.HsFeature.StatusControls">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection"/> describing all of the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s associated with
             this feature.
            </summary>
            <remarks>
            This is read only because HomeSeer needs to index <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.StatusControls"/> for events and other automated behaviors.
             To edit these use methods in <see cref="T:HomeSeer.PluginSdk.IHsController"/>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.HsFeature.StatusGraphics">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphicCollection"/> describing all of the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s associated with
             this feature.
            </summary>
            <remarks>
            This is read only because HomeSeer needs to index <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.StatusGraphics"/> for events and other automated behaviors.
             To edit these use methods in <see cref="T:HomeSeer.PluginSdk.IHsController"/>
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.#ctor(System.Int32)">
            <summary>
            Create a HomeSeer feature with the specified unique ID
            </summary>
            <param name="featureRef">The unique ID associated with this feature</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.Duplicate(System.Int32)">
            <summary>
            Make a copy of the feature with a different unique ID.
            <para>
            This will not duplicate StatusControls or StatusGraphics associated with the device.
            </para>
            </summary>
            <param name="featureRef">The new unique ID for the copy</param>
            <returns>A copy of the feature with a new reference ID</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.GetAdditionalDataToken(System.Int32)">
            <summary>
            Get the additional data token corresponding to the specified index $%tokenIndex$
            </summary>
            <remarks>
            This is used as a replacement token for the status of a feature. Tokens are replaced with data from
             <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.AdditionalStatusData"/>
            </remarks>
            <param name="tokenIndex">The index for the token</param>
            <returns>An additional data token used in the status eg for a tokenIndex of 0 returns $%0$</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.CreateControlEvent(System.Double)">
            <summary>
            Create a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlEvent"/> for the given value based on this features defined controls
            </summary>
            <param name="value">The value to set the feature to</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlEvent"/> with info from associated <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> and <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when there is no <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> associated with the specified value</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.IsValueValid">
            <inheritdoc cref="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.IsValueValid"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.HasControlForValue(System.Double)">
            <summary>
            Determine if the feature has a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> associated with the specified value
            </summary>
            <param name="value">The value to look for</param>
            <returns>
            TRUE if the feature has a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> that targets the specified value,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.HasControlForRange(HomeSeer.PluginSdk.Devices.ValueRange)">
            <summary>
            Determine if the feature has a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> associated with the specified range of values
            </summary>
            <param name="range">The range of values to look for</param>
            <returns>
            TRUE if the feature has at least one <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> that targets any of the values in the range,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.HasGraphicForValue(System.Double)">
            <summary>
            Determine if the feature has a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> associated with the specified value
            </summary>
            <param name="value">The value to look for</param>
            <returns>
            TRUE if the feature has a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> that targets the specified value,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.HasGraphicForRange(HomeSeer.PluginSdk.Devices.ValueRange)">
            <summary>
            Determine if the feature has a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> associated with the specified range of values
            </summary>
            <param name="range">The range of values to look for</param>
            <returns>
            TRUE if the feature has at least one <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> that targets any of the values in the range,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.SetDisplayPriority(System.Int32)">
            <summary>
            Set the <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.DisplayPriority"/>.
            </summary>
            <remarks>
            This is used by the HS platform to load the value of <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.DisplayPriority"/> saved to the database
             into the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>. It cannot be used to change the value of <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.DisplayPriority"/>
             saved to the HS platform database.
            </remarks>
            <param name="index">The index of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when an <paramref name="index"/> less than 0 is specified</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.HasControlForUse(HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Determine if the feature has a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> with a specific <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>
            </summary>
            <param name="controlUse">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> value to look for </param>
            <returns>
            TRUE if the feature has a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> with this specific <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.GetFirstControlForUse(HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Get a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> associated with the feature that has a specific <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>
            </summary>
            <param name="controlUse">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> value to look for</param>
            <returns>
            The first <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> found that has the specified <paramref name="controlUse"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if no element is found with the specified <paramref name="controlUse"/>
            </exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsFeature.GetControlsForUse(HomeSeer.PluginSdk.Devices.Controls.EControlUse)">
            <summary>
            Get all <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl">StatusControls</see> in the collection which have a specific <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>
            </summary>
            <param name="controlUse">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> value to look for</param>
            <returns>
            A List of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl">StatusControls</see> found that have the specified <paramref name="controlUse"/>.
            </returns>
            <remarks>
            <para>
            If no <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl">StatusControls</see> are found with the specified <paramref name="controlUse"/>,
            an empty List is returned.
            </para>
            </remarks>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.DeviceRelationshipException">
            <summary>
            Represents errors occuring while trying to set the relationship of a device or feature
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Identification.DeviceRelationshipException.#ctor(System.String)">
            <summary>
            Initialize a new instance of the DeviceRelationshipException class with a specified message
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Identification.DeviceRelationshipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialize a new instance of the DeviceRelationshipException class with a specified message
             and a reference to an inner exception
            </summary>
            <param name="message">The error message</param>
            <param name="innerException">An <see cref="T:System.Exception"/> that caused this exception</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.Identification.DeviceRelationshipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor used for deserialization. 
            This is mandatory in order for HSCF to be able to deserialize this exception.
            </summary>
            <param name="info">The data to deserialize from</param>
            <param name="context">The context of the source stream</param>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType">
            <summary>
            The specific use of a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.Media"/> <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <remarks>
            <para>This has not been fully migrated from the legacy API. Expect future changes.</para>
            </remarks>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.SubType"/>
            <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.Media"/>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType">
            <summary>
            The specific use of a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.ThermostatControl"/> <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <remarks>
            <para>
            This is used to render Thermostat specific UI components and for integration with systems like Google Home, Amazon, and IFTTT.
            </para>
            <para>
            There is some overlap with <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>. To ensure compatibility in all contexts you should make sure
             both the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> and the appropriate <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s of that <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
             are set with a matching <see cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/> and <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>.
             Some systems analyze the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to determine how it is used and some analyze the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>.
            </para>
            <para>
            Not all thermostats are the same and most do not utilize all of these features. Use only the ones you need.
            </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.HeatingSetPoint">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the desired temperature when the thermostat is heating.
            </summary>
            <remarks>
            <para>
            A <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> designated with this subtype should have <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s configured
             with a <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlUse"/> of <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.HeatSetPoint"/>
            </para>
            </remarks>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.HeatSetPoint"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.CoolingSetPoint">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the desired temperature when the thermostat is cooling.
            </summary>
            <remarks>
            <para>
            A <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> designated with this subtype should have <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s configured
             with a <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlUse"/> of <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.CoolSetPoint"/>
            </para>
            </remarks>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.CoolSetPoint"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.ModeSet">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the operation mode of the thermostat.
            </summary>
            <remarks>
            <para>
            A <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> designated with this subtype should have <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s configured
             that allow users to set the thermostat mode with a <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlUse"/> of
             <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeOff"/>, <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeHeat"/>,
             <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeCool"/>, and <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeAuto"/>.
            </para>
            </remarks>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.OperatingMode"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.FanModeSet">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the fan mode of the thermostat.
            </summary>
            <remarks>
            <para>
            A <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> designated with this subtype should have <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s configured
             that allow users to set the thermostat fan mode with a <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.ControlUse"/> of
             <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermFanAuto"/> and <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermFanOn"/>
            </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.FurnaceSetPoint">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the temperature of the furnace connected to a thermostat.
            </summary>
            <remarks>
            This is a legacy type that is no longer used. It will be deprecated.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.DryAirSetPoint">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the temperature at which the A/C will switch off to stop
             drying the air.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.MoistAirSetPoint">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the temperature at which the A/C will switch on to start
             drying the air.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.AutoChangeoverSetPoint">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the temperature at which the system will switch between
             heating and cooling.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.OperatingMode">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to report the current operating mode of the thermostat.
            </summary>
            <remarks>
            <para>
            <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.OperatingMode"/> is different from <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType.OperatingState"/>
             because <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.OperatingMode"/> represents the chosen mode (<see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeOff"/>,
             <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeHeat"/>, <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeCool"/>, or <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeAuto"/>)
             while <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType.OperatingState"/> represents the active state of that mode.
            </para>
            <para>
            A thermostat set to <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeAuto"/> can be idle (<see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeOff"/>),
             heating (<see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeHeat"/>), or cooling (<see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeCool"/>).
            </para>
            <para>A <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> that is designated with this subtype should have <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s
             configured to display the different modes that the thermostat can be in.</para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.EnergySaveHeat">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the desired temperature when the thermostat is heating and
             in energy save mode.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.EnergySaveCool">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the desired temperature when the thermostat is cooling and
             in energy save mode.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.HeatingAwaySetPoint">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control the temperature to maintain the system at when in away mode.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.HoldMode">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control whether the thermostat is in hold mode or not.
            </summary>
            <remarks>
            Hold mode means that the setpoints will stay at their current settings regardless of any schedules or
             programs.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.Setback">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control hold the setpoints at a specific temperature until
             reset by the thermostat.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType">
            <summary>
            The specific use of a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.ThermostatStatus"/> <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <remarks>
            <para>
            This is used to render Thermostat specific UI components and for integration with systems like Google Home, Amazon, and IFTTT.
            </para>
            <para>
            Not all thermostats are the same and most do not utilize all of these features. Use only the ones you need.
            </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType.Temperature">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to display the primary temperature being reported by a thermostat
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType.Temperature2">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to display a secondary temperature being reported by a thermostat
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType.TemperatureOther">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to display additional temperatures being reported by a thermostat
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType.Humidity">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to display the humidity levels being reported by a thermostat
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType.OperatingState">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to display the current operating state a thermostat is in
            </summary>
            <remarks>
            <para>
            <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.OperatingMode"/> is different from <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType.OperatingState"/>
             because <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType.OperatingMode"/> represents the chosen mode
             (<see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeOff"/>, <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeHeat"/>,
             <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeCool"/>, or <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeAuto"/>) while
             <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType.OperatingState"/> represents the active state of that mode.
            </para>
            <para>
            A thermostat set to <see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeAuto"/> can be idle (<see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeOff"/>),
             heating (<see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeHeat"/>), or cooling (<see cref="F:HomeSeer.PluginSdk.Devices.Controls.EControlUse.ThermModeCool"/>).
            </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType.FanStatus">
            <summary>
            This <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to display the current state of the fan reported by a thermostat
            </summary>
            <remarks>
            <para>This is typically either OFF or ON</para>
            </remarks>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.TypeInfo">
            <summary>
            A bundle of information describing the type of a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> or <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            <para>
            This is used to describe the device/feature in a manner that is easily understood by UI generation engines
             and other smart home platforms. When these systems can understand what this device/feature is, they are
             better able to tailor the experience of the user to their expectations.
            </para>
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EApiType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EDeviceType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EFeatureType"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.ApiType">
            <summary>
            The primary type of the device/feature.
             This should always represent whether the item is a device or feature.
            <para> <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EApiType.Device"/> for devices and <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EApiType.Feature"/> for features </para>
            </summary>
            <remarks>
            This can only be one of a few values. It is the strictest type.
            </remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EApiType"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.Type">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.Identification.EDeviceType"/> or <see cref="T:HomeSeer.PluginSdk.Devices.Identification.EFeatureType"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/>
            </summary>
            <remarks>
            <para>Acceptable values can be from <see cref="T:HomeSeer.PluginSdk.Devices.Identification.EDeviceType"/> or <see cref="T:HomeSeer.PluginSdk.Devices.Identification.EFeatureType"/>.
             It is not as strict as <see cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.ApiType"/>, but it is stricter than <see cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.SubType"/>.</para>
            <para>You can extend this and define new types and subtypes as needed. It is important to note
             that these new types will not be understood by HomeSeer and may cause HomeSeer to render them
             as a generic <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> or <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>. If you extend these types and would like
             to have HomeSeer support them you can create a pull request on GitHub.</para>
            </remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EDeviceType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EFeatureType"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.SubType">
            <summary>
            The sub-type of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/>.
            </summary>
            <remarks>
            <para>This is the least strict type field.</para>
            <para>You can extend this and define new subtypes as needed. It is important to note
             that these new types will not be understood by HomeSeer and may cause HomeSeer to render them
             as a generic <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> or <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>. If you extend these types and would like
             to have HomeSeer support them you can create a pull request on GitHub.</para>
            </remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EGenericDeviceSubType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EGenericFeatureSubType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.SubTypeDescription">
            <summary>
            A human-readable string description of the configured <see cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.SubType"/>
            </summary>
            <remarks>This must be manually set</remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.Summary">
            <summary>
            A human-readable string summary of the entire <see cref="T:HomeSeer.PluginSdk.Devices.Identification.TypeInfo"/>
            </summary>
            <remarks>This must be manually set</remarks>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.EApiType">
            <summary>
            The general type of an <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/>
            </summary>
            <remarks>
            <para>This is primarily used to determine whether an <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> is a
             <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> or a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></para>
            <para>Creating a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> or <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> using <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/>
             or <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/> will automatically set this for you.</para>
            <para>Legacy types will be readable as <see langword="int"/></para>
            </remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.TypeInfo"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EApiType.NotSpecified">
            <summary>
            No type is set. <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/>s are unusable in this state.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EApiType.Device">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EApiType.Feature">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.EDeviceType">
            <summary>
            The primary use of a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>. This describes the physical hardware.
            </summary>
            <remarks>
            Where <see cref="T:HomeSeer.PluginSdk.Devices.Identification.EFeatureType"/> describes the function of a specific <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> of a
             <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>, <see cref="T:HomeSeer.PluginSdk.Devices.Identification.EDeviceType"/> describes the overall use of the hardware.
             IE an in-wall paddle switch is described as a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Switch"/> <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> with a
             <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.Generic"/> <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>.
            </remarks>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.Type"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Generic">
            <summary>
            A generic <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>. There is no specific use for it.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Door">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> represents a door.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Fan">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> represents a fan.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Light">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> represents a light.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Lock">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> represents a lock.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Outlet">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> represents an outlet.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.RemoteControl">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> represents an external controller or remote like a hub.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Switch">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> represents a switch.
            </summary>
            <remarks>
            This should be used instead of <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Light"/> or <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Fan"/> when a more generic type is needed.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Thermostat">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> represents a thermostat.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Window">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> represents a window.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Media">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> represents a media device.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType">
            <summary>
            The specific use of an <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.Energy"/> type <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <remarks>This has not been fully migrated from the legacy API. Expect future changes.</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType.Watts">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to track Watts.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType.Amps">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to track Amps.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType.Volts">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to track Volts.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType.Kwh">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to track Kilowatt-hours.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType.Graphing">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used for graphing.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.EFeatureType">
            <summary>
            The primary use of a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>. This describes a function of a piece of hardware.
            </summary>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.Type"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.Generic">
            <summary>
            A generic <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>. There is no specific use for it.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.Security">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used for security purposes.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.ThermostatStatus">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to show the status of a thermostat.
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatStatusFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.ThermostatControl">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to control a thermostat.
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EThermostatControlFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.Media">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to interact with a media playback device.
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EMediaFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.Energy">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is used to interact with energy management devices.
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType"/>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.EGenericDeviceSubType">
            <summary>
            The specific use of a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Generic"/> <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>
            </summary>
            <remarks>
            This is not stable and may see significant change. The description offered by <see cref="T:HomeSeer.PluginSdk.Devices.Identification.EDeviceType"/> is
             usually enough.
            </remarks>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.SubType"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EDeviceType.Generic"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EGenericDeviceSubType.Light">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> is used to control a light.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EGenericDeviceSubType.Fan">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> is used to control a fan.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EGenericDeviceSubType.Sensor">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> is used to interact with a sensor.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EGenericDeviceSubType.Outlet">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> is used to interact with an outlet.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.EGenericFeatureSubType">
            <summary>
            The specific use of a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.Generic"/> <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <remarks>
            This is not stable and may see significant change.
            </remarks>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.Identification.TypeInfo.SubType"/>
            <seealso cref="F:HomeSeer.PluginSdk.Devices.Identification.EFeatureType.Generic"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EGenericFeatureSubType.Battery">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> represents the status of a battery.
            </summary>
            <remarks>
            In the grid view on HomeSeer, this <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> should be displayed as a battery icon in the
             status bar of the <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EGenericFeatureSubType.CentralScene">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> represents a Z-Wave Central Scene. This is typically used to display the last
             action taken on the device.
            </summary>
            <remarks>
            <para>In the grid view on HomeSeer, this <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> should be displayed as an icon in the
             status bar of the <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>.</para>
            <para>An HSWD200+ will report a Central Scene of "Top Paddle Tapped" after a user
             presses the top paddle. It will not change until another action is taken on the device.</para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EGenericFeatureSubType.BinaryControl">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> represents a binary control - something that only has on and off controls.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.EGenericFeatureSubType.BinarySensor">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> represents a binary sensor - something that only reports one of two states.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.Identification.ERelationship">
            <summary>
            An enum describing the type of relationship a device/feature has with the device or features listed in
             its associated devices list.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.NotSet">
            <summary>
            No relationship type has been specified
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Device">
            <summary>
            This item is a device and is associated with one or more features.
            <para>
            Previously called "ParentRoot" in the legacy API
            </para>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Feature">
            <summary>
            This item is a feature and is associated with one device that owns it.
            <para>
            Previously called "Child" in the legacy API
            </para>
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.EEnergyFeatureSubType">
            <inheritdoc cref="T:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EEnergyFeatureSubType.Watts">
            <inheritdoc cref="F:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType.Watts"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EEnergyFeatureSubType.Amps">
            <inheritdoc cref="F:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType.Amps"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EEnergyFeatureSubType.Volts">
            <inheritdoc cref="F:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType.Volts"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EEnergyFeatureSubType.KWH">
            <inheritdoc cref="F:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType.Kwh"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EEnergyFeatureSubType.Graphing">
            <inheritdoc cref="F:HomeSeer.PluginSdk.Devices.Identification.EEnergyFeatureSubType.Graphing"/>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.NewDeviceData">
            <summary>
            A collection of information describing a new device that needs to be created in HomeSeer.
            <para>
            Created through <see cref="M:HomeSeer.PluginSdk.Devices.DeviceFactory.PrepareForHs"/>
            </para>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.NewDeviceData.Device">
            <summary>
            A collection of properties describing the device to be created.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.NewDeviceData.FeatureData">
            <summary>
            A list of collections of properties describing features associated with the device.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.NewFeatureData">
            <summary>
            A collection of information describing a new feature that needs to be created in HomeSeer.
            <para>
            Created through <see cref="M:HomeSeer.PluginSdk.Devices.FeatureFactory.PrepareForHs"/> or <see cref="M:HomeSeer.PluginSdk.Devices.FeatureFactory.PrepareForHsDevice(System.Int32)"/>
            </para>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.NewFeatureData.Feature">
            <summary>
            A collection of properties describing the feature to be created.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.StatusGraphicCollection">
            <summary>
            A managed collection of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s
            </summary>
            <remarks>
            This is a <see cref="T:System.Collections.Generic.SortedDictionary`2"/> where <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value"/> or
             <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.RangeMin"/> is used as the key. This is used to ensure that there is only
             one <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> per <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/>
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.Add(HomeSeer.PluginSdk.Devices.StatusGraphic)">
            <summary>
            Add a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> to the collection
            </summary>
            <param name="statusGraphic">A <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> to add. It must not target a value that is already handled by the collection.</param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="statusGraphic"/> targets a value that is already handled in the collection.</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.AddRange(System.Collections.Generic.IEnumerable{HomeSeer.PluginSdk.Devices.StatusGraphic})">
            <summary>
            Add multiple <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s to the collection
            </summary>
            <param name="statusGraphics">A collection of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s to add. Make sure there is only one <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> handling each value.</param>
            <exception cref="T:System.ArgumentException">Thrown if any element in <paramref name="statusGraphics"/> targets a value that is already handled in the collection.</exception>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.Item(System.Double)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> in the collection that handles the specified value
            </summary>
            <param name="value">The value associated with the desired <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when no <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> is found that handles the specified <paramref name="value"/></exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.Contains(HomeSeer.PluginSdk.Devices.StatusGraphic)">
            <summary>
            Determine if a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> is already in the managed collection
            </summary>
            <remarks>
            This check is based on <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value"/> or <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.RangeMin"/>
            </remarks>
            <param name="statusGraphic">The <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> to search for</param>
            <returns><see langword="True"/> if the <paramref name="statusGraphic"/> is in the collection, <see langword="False"/> if it is not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.ContainsValue(System.Double)">
            <summary>
            Determine if a value is handled by the collection
            </summary>
            <param name="value">The value to check for</param>
            <returns><see langword="True"/> if the value is handled, <see langword="False"/> if it is not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.GetGraphicsForRange(System.Double,System.Double)">
            <summary>
            Get a list of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s that handle a given range of values
            </summary>
            <param name="min">The smallest number in the range</param>
            <param name="max">The largest number in the range</param>
            <returns>A List of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s</returns>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.Values">
            <summary>
            Get an unordered list of the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s in the collection
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.Count">
            <summary>
            The number of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s in the collection
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.RemoveKey(System.Double)">
            <summary>
            Remove the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> that handles the specified <paramref name="value"/>
            </summary>
            <param name="value">The value handled by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> to remove</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.Remove(HomeSeer.PluginSdk.Devices.StatusGraphic)">
            <summary>
            Remove a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> from the collection
            </summary>
            <remarks>
            A key is determined by the <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value"/> or <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.RangeMin"/>
             of <paramref name="statusGraphic"/>. The found item is then compared by hash code to ensure they are the
             same.
            </remarks>
            <param name="statusGraphic">A <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> to remove</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphicCollection.RemoveAll">
            <summary>
            Remove all <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s in the collection
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.HsDevice">
            <summary>
            A device connected to a HomeSeer system. This is the top level item displayed to users when
             they are looking at the devices connected to their system.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.HsDevice.Features">
            <summary>
            A list of <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>s that make up the device.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.HsDevice.FeatureDisplayPriority">
            <summary>
            <para>
            A list of <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/>s indicating the order of importance for the features of a
             device where 1 is the most important. This helps HomeSeer determine how to display features in the UI.
            </para>
            <para>
            You must call <see cref="M:HomeSeer.PluginSdk.IHsController.GetDeviceWithFeaturesByRef(System.Int32)"/> to fill this property, otherwise
             this will be an empty list.
            </para>
            </summary>
            <remarks>
            This should typically be left to the user to configure, but it is recommended that you pre-configure it
             for users with the best setup possible by adding the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>s in the desired order
             when using <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/> to create a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>.
            <para>See <see cref="T:HomeSeer.PluginSdk.Devices.EFeatureDisplayType"/> for additional info on controlling the way features are displayed.</para>
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsDevice.#ctor(System.Int32)">
            <summary>
            Create a HomeSeer device with the specified unique ID
            </summary>
            <param name="deviceRef">The unique ID associated with this device</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsDevice.Duplicate(System.Int32)">
            <summary>
            Make a copy of the device with a different unique ID.
            <para>
            This will not duplicate features associated with the device.
            </para>
            </summary>
            <param name="deviceRef">The new unique ID for the copy</param>
            <returns>A copy of the device with a new reference ID</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsDevice.GetFeatureByType(HomeSeer.PluginSdk.Devices.Identification.TypeInfo)">
            <summary>
            Get the first feature of the specified type associated with this device.
            </summary>
            <param name="featureType">The <see cref="T:HomeSeer.PluginSdk.Devices.Identification.TypeInfo"/> describing the desired feature</param>
            <returns>The feature associated with the device that matches that specified featureType</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if there are no features or if a feature with
             the specified featureType was not found.
            </exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.HsDevice.GetFeaturesInDisplayOrder">
            <summary>
            Get a collection of <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>s in the same order defined by <see cref="P:HomeSeer.PluginSdk.Devices.HsDevice.FeatureDisplayPriority"/>
            </summary>
            <returns>A List of <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>s ordered by <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.DisplayPriority"/></returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.EventUpdateReturnData">
            <summary>
            Data returned to HomeSeer by a plugin when an event action/trigger's configuration is updated
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EventUpdateReturnData.Result">
            <summary>
            When plug-in calls such as ...BuildUI, ...ProcessPostUI, or ...FormatUI are called and there is
            feedback or an error condition that needs to be reported back to the user, this string field 
            can contain the message to be displayed to the user in HomeSeer UI.  This field is cleared by
            HomeSeer after it is displayed to the user.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EventUpdateReturnData.TrigActInfo">
            <summary>
            This is the trigger or action info from HomeSeer - see the structure for more information.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Devices.EventUpdateReturnData.DataOut">
            <summary>
            (Also see DataIn of strTrigInfo) The serialization data for the plug-in object cannot be 
            passed ByRef which means it can be passed only one-way through the interface to HomeSeer.
            If the plug-in receives DataIn, de-serializes it into an object, and then makes a change 
            to the object, this is where the object can be serialized again and passed back to HomeSeer
            for storage in the HomeSeer database.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.PlugExtraData">
            <summary>
            A collection of keyed and non-keyed data items attached to an <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/>
            </summary>
            <remarks>
            <para>Use this to store any data specific to the operation of your plugin.</para>
            <para>Please note that all keys will be converted to lower case when stored in the HS database</para>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.PlugExtraData.NamedKeys">
            <summary>
            A list of keys for data items stored in this <see cref="T:HomeSeer.PluginSdk.Devices.PlugExtraData"/>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.PlugExtraData.NamedCount">
            <summary>
            The number of keyed data items stored in the <see cref="T:HomeSeer.PluginSdk.Devices.PlugExtraData"/>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.AddNamed(System.String,System.String)">
            <summary>
            Add a new keyed data item to the collection
            </summary>
            <param name="key">The key for the data</param>
            <param name="data">The data to save</param>
            <returns>
            TRUE if the item was saved,
             FALSE if it already exists
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the key is null or whitespace
            </exception>
            <remarks>
            <para>
            If you are trying to store an object, serialize it as a string using Newtonsoft before saving it or use <see cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.AddNamed``1(System.String,``0)"/>.
             Do not serialize primitives. Serializing primitives may produce unintended results.
            </para>
            <para>Please note that all keys will be converted to lower case when stored in the HS database</para>
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.AddNamed``1(System.String,``0)">
            <summary>
            Add a new keyed data item to the collection. Serialize the <paramref name="data"/> to a string before saving.
            </summary>
            <param name="key">The key for the data</param>
            <param name="data">The data to save in the collection of type <typeparamref name="TData"/></param>
            <typeparam name="TData">The type of the <paramref name="data"/> being saved.</typeparam>
            <returns>
            TRUE if the item was saved,
             FALSE if it already exists
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the key or data is null</exception>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">Thrown when there is an error while serializing the data</exception>
            <remarks>
            <para>Please note that all keys will be converted to lower case when stored in the HS database</para>
            <para>
            Do not serialize primitives. Serializing primitives may produce unintended results.
             Use <see cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.AddNamed(System.String,System.String)"/> to save primitive values.
            </para>
            </remarks>
            JLW - TData must be specified because the signature AddNamed(string, object) overlaps AddNamed(string, string)
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetNamed(System.String)">
            <summary>
            Get the item with the specified key. This does not process the data at all. It returns the value as it is stored.
            </summary>
            <param name="key">The key of the item to get</param>
            <returns>The string represented by the specified <paramref name="key"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified key is null or whitespace.</exception>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.String)"/>
            <seealso cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetNamed``1(System.String)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetNamed``1(System.String)">
            <summary>
            Get the item with the specified key deserialized as the specified type.
             To retrieve the value without deserializing it, use <see cref="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.String)"/> or <see cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetNamed(System.String)"/>
            </summary>
            <param name="key">The key of the item to get</param>
            <typeparam name="TData">The type of the object stored as a JSON serialized string</typeparam>
            <returns>
            The data stored at the specified key as an instance of the specified object type
            </returns>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">Thrown when there was a problem deserializing the data</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified key is null or whitespace.</exception>
            <remarks>
            <para>
            This method uses Newtonsoft to deserialize the value to the type specified by <typeparamref name="TData"/>.
             Do not use this to deserialize primitives.
            </para>
            </remarks>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.String)"/>
            <seealso cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetNamed(System.String)"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.String)">
            <summary>
            Access the item with the specified key
            </summary>
            <param name="key">The key of the item</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified key is null or whitespace.</exception>
            <remarks>This returns the value as is.</remarks>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.String)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.ContainsNamed(System.String)">
            <summary>
            Determine if a data item with the specified key exists in the collection
            </summary>
            <param name="key">The key of the data item to look for</param>
            <returns>
            TRUE if the item exists in the collection,
             FALSE if it does not.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified key is null or whitespace.</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.RemoveNamed(System.String)">
            <summary>
            Remove the data item with the specified key from the collection.
            </summary>
            <param name="key">The key of the data item to remove</param>
            <returns>
            TRUE if the item was removed from the collection,
             FALSE if it was not.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified key is null or whitespace.</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.RemoveAllNamed">
            <summary>
            Remove all keyed items from the collection.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.PlugExtraData.UnNamed">
            <summary>
            A collection of non-keyed data items stored in the <see cref="T:HomeSeer.PluginSdk.Devices.PlugExtraData"/>
            </summary>
            <remarks>
            <para>
            Use <see cref="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.Int32)"/> or <see cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetUnNamed(System.Int32)"/> to retrieve the value as is.
             If the stored value is a JSON string, use <see cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetUnNamed``1(System.Int32)"/> to retrieve the value while
             using Newtonsoft to deserialize it. 
            </para>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.PlugExtraData.UnNamedCount">
            <summary>
            The number of non-keyed items in the <see cref="T:HomeSeer.PluginSdk.Devices.PlugExtraData"/>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.AddUnNamed(System.String)">
            <summary>
            Add a new item to the collection without a key.
            </summary>
            <param name="data">The data for the item to save.</param>
            <returns>The index of the item in the collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the data to be stored is null or whitespace.</exception>
            <remarks>
            <para>
            If you are trying to store an object, serialize it as a string using Newtonsoft before saving it or use <see cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.AddUnNamed``1(``0)"/>.
             Do not serialize primitives. Serializing primitives may produce unintended results.
            </para>
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.AddUnNamed``1(``0)">
            <summary>
            Add a new item to the collection without a key. Serialize the <paramref name="data"/> to a string before saving.
            </summary>
            <param name="data">The data to save in the collection of type <typeparamref name="TData"/></param>
            <typeparam name="TData">The type of the <paramref name="data"/> being saved.</typeparam>
            <returns>The index of the item in the collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the data is null</exception>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">Thrown when there is an error while serializing the data</exception>
            <remarks>
            <para>
            Do not serialize primitives. Serializing primitives may produce unintended results.
             Use <see cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.AddUnNamed(System.String)"/> to save primitive values.
            </para>
            </remarks>
            <seealso cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.AddUnNamed(System.String)"/>
            <seealso cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetUnNamed``1(System.Int32)"/>
            JLW - TData must be specified because the signature AddUnNamed(object) overlaps AddUnNamed(string)
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetUnNamed(System.Int32)">
            <summary>
            Get the non-keyed item located at the specified index in the collection.
             This does not process the data at all. It returns the value as it is stored.
            </summary>
            <param name="index">The index of the non-keyed item to get.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the <paramref name="index"/> is out of bounds</exception>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.Int32)"/>
            <seealso cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetUnNamed``1(System.Int32)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetUnNamed``1(System.Int32)">
            <summary>
            Get the non-keyed item located at the specified index in the collection deserialized to the specified type.
             Use <see cref="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.Int32)"/> or <see cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetUnNamed(System.Int32)"/> to retrieve the value as is.
            </summary>
            <param name="index">The index of the non-keyed item to get.</param>
            <typeparam name="TData">The type the data should be deserialized to.</typeparam>
            <returns>
            An instance of the specified type of the data at the specified index in the collection.
            </returns>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">
            Thrown when there is an error deserializing the data to the type specified.
            </exception>
            <remarks>
            <para>
            This method uses Newtonsoft to deserialize the value to the type specified by <typeparamref name="TData"/>.
             Do not use this to deserialize primitives.
            </para>
            </remarks>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.Int32)"/>
            <seealso cref="M:HomeSeer.PluginSdk.Devices.PlugExtraData.GetUnNamed(System.Int32)"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.Int32)">
            <summary>
            Access the non-keyed item located at the specified index in the collection.
            </summary>
            <param name="index">The index of the non-keyed item.</param>
            <remarks>This returns the value as is.</remarks>
            <seealso cref="P:HomeSeer.PluginSdk.Devices.PlugExtraData.Item(System.Int32)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.RemoveUnNamedAt(System.Int32)">
            <summary>
            Remove the non-keyed item at the specified index from the collection.
            </summary>
            <param name="index">The index of the non-keyed item to remove from the collection.</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.RemoveUnNamed(System.String)">
            <summary>
            Remove the specified non-keyed item from the collection using the default Equals implementation of the strings.
            </summary>
            <param name="data">The non-keyed item to remove from the collection.</param>
            <returns>TRUE if the item was removed, FALSE if it wasn't.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified data is null or an empty string.</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.PlugExtraData.RemoveAllUnNamed">
            <summary>
            Remove all non-keyed items from the collection.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.ValueRange">
            <summary>
            A range of values that can be targeted by <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s and <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.ValueRange.#ctor(System.Double,System.Double)">
            <summary>
            Initialize a new range of values
            </summary>
            <param name="min">The smallest value permitted</param>
            <param name="max">The largest value permitted</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="min"/> is less than <paramref name="max"/></exception>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.ValueRange.Min">
            <summary>
            The minimum value permitted by the range
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the new minimum value is larger than the current maximum
            </exception>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.ValueRange.Max">
            <summary>
            The maximum value permitted by the range
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the new maximum value is smaller than the current minimum
            </exception>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.ValueRange.Offset">
            <summary>
            The amount to subtract from the value for display.
            <para>
            E.G. A value of 501 will be displayed as 1 with an offset of 500
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.ValueRange.DecimalPlaces">
            <summary>
            The number of decimal places of accuracy displayed by the range
            <para>
            The displayed value will be the rounded value to the nearest number of decimals. 
            E.G. If <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.DecimalPlaces"/> is 1, a value of 7.1589  will be displayed as 7.2
            </para>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if you try to set the decimal places to a value less than 0
            </exception>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.ValueRange.Prefix">
            <summary>
            A text prefix to include with the value when displayed
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.ValueRange.Suffix">
            <summary>
            A text suffix to include with the value when displayed
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.ValueRange.Divisor">
            <summary>
            The amount to divide the value by for display.
            <para>
            E.G. A value of 45 will be displayed as 22.5 with a divisor of 2
            </para>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if you try to set the divisor less than or equal to 0
            </exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.ValueRange.Clone">
            <summary>
            Create a deep copy of this <see cref="T:HomeSeer.PluginSdk.Devices.ValueRange"/>
            </summary>
            <returns>The deep copy of this <see cref="T:HomeSeer.PluginSdk.Devices.ValueRange"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.ValueRange.GetStringForValue(System.Double)">
            <summary>
            Obtain the string representation of the specified value according to the range's configuration
            </summary>
            <remarks>
            This returns <c>$"{_prefix}{((value - _offset) / _divisor).ToString($"F{_decimalPlaces}")}{_suffix}"</c>
            </remarks>
            <param name="value">The value to use in the string</param>
            <returns>The value correctly formatted according to the range</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.ValueRange.IsValueInRange(System.Double)">
            <summary>
            Determine if the specified value is valid for this range
            </summary>
            <param name="value">The value to check</param>
            <returns>
            TRUE is it is valid for the range,
             FALSE if it is not
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.ValueRange.Equals(System.Object)">
            <summary>
            Compare this object with another to see if they are equal
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if they are equal, False if they are not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.ValueRange.GetHashCode">
            <summary>
            Get the hash code
            </summary>
            <returns>A hash code based on the <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.Min"/> and <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.Max"/> value</returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Devices.StatusGraphic">
            <summary>
            Status graphics are used to specify what image is displayed for a device when its value matches certain criteria
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphic.#ctor(System.String,System.Double,System.String)">
            <summary>
            Initialize a new StatusGraphic with the specified image that targets a single value
            </summary>
            <param name="imagePath">The path to the image used for the graphic</param>
            <param name="targetValue">The value targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></param>
            <param name="label">The status text</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphic.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initialize a new StatusGraphic with the specified image that targets a range of values
            </summary>
            <param name="imagePath">The path to the image used for the graphic</param>
            <param name="minValue">The minimum value targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></param>
            <param name="maxValue">The maximum value targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphic.#ctor(System.String,HomeSeer.PluginSdk.Devices.ValueRange)">
            <summary>
            Initialize a new StatusGraphic with the specified image that targets a range of values
            </summary>
            <param name="imagePath">The path to the image used for the graphic</param>
            <param name="targetRange">The range of values targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></param>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Label">
            <summary>
            The text displayed when the associated <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>'s <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/> field matches
             the <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value"/> or <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.TargetRange"/>.
            <para>
            Leaving this blank will cause the StatusControl's Label field to be used instead
            </para>
            <para>
            Set this to a single space " " to ensure that the corresponding status is left blank when displayed
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphic.ControlUse">
            <summary>
            What the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> is used for.
             See <see cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/> for more information.
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.Controls.EControlUse"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Graphic">
            <summary>
            The path to an image displayed by the associated <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> when its
             <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/> field matches the <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value"/> or <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.TargetRange"/>
             on this <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphic.IsRange">
            <summary>
            Whether the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> targets a range of values or a single value.
            <para>
            Settings this to TRUE will cause the <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value"/> field to be ignored in favor of
             the <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.TargetRange"/>
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphic.HasAdditionalData">
            <summary>
            Whether the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> label includes additional data tokens to be replaced by strings
             in <see cref="P:HomeSeer.PluginSdk.Devices.HsFeature.AdditionalStatusData"/>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphic.TargetRange">
            <summary>
            The range of values that the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> targets.
            <para>
            If <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.IsRange"/> is FALSE then this is ignored in favor of <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value"/>
            </para>
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Devices.ValueRange"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphic.RangeMin">
            <summary>
            The minimum value targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphic.RangeMax">
            <summary>
            The maximum value targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value">
            <summary>
            The value this StatusControl targets.
            <para>
            If <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.IsRange"/> is TRUE then this is ignored in favor of <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.TargetRange"/>
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphic.Clone">
            <summary>
            Create a deep copy of this <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>
            </summary>
            <returns>The deep copy of this <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphic.GetTargetValue">
            <summary>
            Get the target value of the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> based on whether it is a range or not
            </summary>
            <returns>
            Returns <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.RangeMin"/> if it is a range and returns <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value"/> if it isn't
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphic.GetLabelForValue(System.Double,System.String[])">
            <summary>
            Get the label for the specified value correctly formatted according to the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>'s
             configuration
            </summary>
            <param name="value">The value to get the label for</param>
            <param name="additionalData">
            Additional data to include in the status label that replaces any tokens from
             <see cref="M:HomeSeer.PluginSdk.Devices.HsFeature.GetAdditionalDataToken(System.Int32)"/> included in the status.
            </param>
            <returns>The value as a string formatted according to the <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.TargetRange"/> configuration.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the value is not targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphic.TryGetLabelForValue(System.String@,System.Double,System.String[])">
            <summary>
            Try to get the label for the specified value correctly formatted according to the
             <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>'s configuration.
            </summary>
            <param name="label">The string variable the label will be written to</param>
            <param name="value">The value to get the label for</param>
            <param name="additionalData">
            Additional data to include in the status label that replaces any tokens from
             <see cref="M:HomeSeer.PluginSdk.Devices.HsFeature.GetAdditionalDataToken(System.Int32)"/> included in the status.
            </param>
            <returns>
            TRUE if a label is available for the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>,
             FALSE if the value is not valid for this <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> or there is no label defined.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphic.IsValueInRange(System.Double)">
            <summary>
            Determine if a specified value is targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>"/>
            </summary>
            <param name="value">The value to check</param>
            <returns>
            TRUE if the value is targeted by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>,
             FALSE if it is not
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphic.Equals(System.Object)">
            <summary>
            Compare this object with another to see if they are equal
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if they are equal, False if they are not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Devices.StatusGraphic.GetHashCode">
            <summary>
            Get the hash code
            </summary>
            <returns>A hash code based on the <see cref="P:HomeSeer.PluginSdk.Devices.ValueRange.Min"/> of <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.TargetRange"/> if <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.IsRange"/> is true or <see cref="P:HomeSeer.PluginSdk.Devices.StatusGraphic.Value"/> if it is false.</returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.AbstractActionType">
            <summary>
            The base implementation of a plugin action type available for users to select in HomeSeer
            <para>
            Inherit from this class to define your own action types and store them in your plugin's <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/>
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractActionType.LogDebug">
            <summary>
            Used to enable/disable internal logging to the console
            <para>
            When it is TRUE, log messages from the PluginSdk code will be written to the Console
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractActionType.ActionListener">
            <summary>
            An interface reference to the plugin that owns this action type.
            <para>
            Define your own interface that inherits from <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener"/>
             and then cast this as the type you defined to get a reference to your plugin that can handle any methods
             you wish to define.
            </para>
            <para>
            This is usually used to have the plugin handle running the action.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractActionType.Id">
            <summary>
            The unique ID for the action.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractActionType.EventRef">
            <summary>
            The reference ID of the event the action is associated with.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractActionType.Data">
            <summary>
            The byte[] describing the current state of the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> for the action.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractActionType.Name">
            <summary>
            The generic name of this action type that is displayed in the list of available actions
             a user can select from on the events page.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractActionType.SelectedSubActionIndex">
            <summary>
            The currently selected sub-action index
            </summary>
            <remarks>
            -1 if it is not set
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> with the specified ID, Event Ref, and Data byte array.
             The byte array will be automatically parsed for a <see cref="T:HomeSeer.Jui.Views.Page"/>, and a new one will be created if
             the array is empty.
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructors in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>
            </para>
            </summary>
            <param name="id">The unique ID of this action in HomeSeer</param>
            <param name="subTypeNumber">The action subtype number</param>
            <param name="eventRef">The event reference ID that this action is associated with in HomeSeer</param>
            <param name="dataIn">A byte array containing the definition for a <see cref="T:HomeSeer.Jui.Views.Page"/></param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.#ctor(System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> with the specified ID, Event Ref, and Data byte array.
             The byte array will be automatically parsed for a <see cref="T:HomeSeer.Jui.Views.Page"/>, and a new one will be created if
             the array is empty.
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement this constructor in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>
            </para>
            </summary>
            <param name="id">The unique ID of this action in HomeSeer</param>
            <param name="eventRef">The event reference ID that this action is associated with in HomeSeer</param>
            <param name="dataIn">A byte array containing the definition for a <see cref="T:HomeSeer.Jui.Views.Page"/></param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
            <param name="logDebug">If true debug messages will be written to the console</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.#ctor(System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> with the specified ID, Event Ref, and Data byte array.
             The byte array will be automatically parsed for a <see cref="T:HomeSeer.Jui.Views.Page"/>, and a new one will be created if
             the array is empty.
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructors in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>
            </para>
            </summary>
            <param name="id">The unique ID of this action in HomeSeer</param>
            <param name="eventRef">The event reference ID that this action is associated with in HomeSeer</param>
            <param name="dataIn">A byte array containing the definition for a <see cref="T:HomeSeer.Jui.Views.Page"/></param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.#ctor">
            <summary>
            Initialize a new, unconfigured <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractActionType.PageId">
            <summary>
            Use this as a unique prefix for all of your JUI views and as the ID for the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage">
            <summary>
            The <see cref="T:HomeSeer.Jui.Views.Page"/> displayed to users to allow them to configure this action.
            <para>
            The <see cref="P:HomeSeer.Jui.Views.Page.Name"/> of this page is not used or displayed anywhere and is not important.
            </para>
            </summary>
            <remarks>
            The ID of this page must be equal to the automatic <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.PageId"/>.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.GetName">
            <summary>
            Called by HomeSeer to obtain the name of this action type.
            </summary>
            <returns>A generic name for this action to be displayed in the list of available actions.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.OnNewAction">
            <summary>
            Called when a new action of this type is being created. Initialize the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> to
             the action's starting state so users can begin configuring it.
            <para>
            Initialize a new <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> and add views to it so the user can configure the trigger.
             Any JUI view added to the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> must use a unique ID as it will
             be displayed on an event page that could also be housing HTML from other plugins. It is recommended
             to use the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.PageId"/> as a prefix for all views added to ensure that their IDs are unique.
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.IsFullyConfigured">
            <summary>
            Called to determine if this action is configured completely or if there is still more to configure.
            </summary>
            <returns>
            TRUE if the action is configured and can be formatted for display,
             FALSE if there are more options to configure before the action can be used.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.OnEditAction(HomeSeer.Jui.Views.Page)">
            <summary>
            Called when an action of this type is being edited and changes need to be propagated to the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/>
            </summary>
            <param name="viewChanges">A <see cref="T:HomeSeer.Jui.Views.Page"/> containing changes to the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/></param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.OnConfigItemUpdate(HomeSeer.Jui.Views.AbstractView)">
            <summary>
            Called when a view on the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> has been updated by a user and needs to be processed.
            </summary>
            <param name="configViewChange">The new state of the view that was changed</param>
            <returns>
            TRUE to update the view in the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> and save the change, or
             FALSE to discard the change.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.GetPrettyString">
            <summary>
            Called by HomeSeer when the action is configured and needs to be displayed to the user as an
             easy to read sentence that flows with an IF... THEN... format.
            </summary>
            <returns>
            An easy to read, HTML formatted string describing the action as it would follow a THEN...
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.OnRunAction">
            <summary>
            Called when this action needs to be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.ReferencesDeviceOrFeature(System.Int32)">
            <summary>
            Called by HomeSeer to determine if this action references the device or feature with the specified ref.
            </summary>
            <param name="devOrFeatRef">The unique <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> to check for</param>
            <returns>
            TRUE if the action references the specified device/feature,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.ToHtml">
            <summary>
            Called by <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> when <see cref="M:HomeSeer.PluginSdk.IPlugin.ActionBuildUI(HomeSeer.PluginSdk.Events.TrigActInfo)"/> is called to get
             the HTML to display to the user so they can configure the action.
            <para>
            This HTML is automatically generated by the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> defined in the action.
            </para>
            </summary>
            <returns>HTML to show on the HomeSeer events page for the user.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.ConvertLegacyData(System.Byte[])">
            <summary>
            <para>
            Called when legacy action data needs to be converted to the new format.
            </para>
            <para>
            Override this if you need to support legacy actions. Convert the UI to the new format and save it in
             the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/>. Finally, return <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.Data"/> to automatically
             serialize the ConfigPage to byte[].  Use <see cref="M:HomeSeer.PluginSdk.Events.TrigActInfo.DeserializeLegacyData``1(System.Byte[],System.Boolean)"/> to
             deserialize the data using the legacy method.
            </para>
            </summary>
            <remarks>
            This is also called if there was an error while trying to deserialize the modern data format as a fallback
            </remarks>
            <param name="inData">A byte array describing the current action configuration in legacy format.</param>
            <returns>
            A byte array describing the current action configuration in new format.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.AbstractActionType2">
            <summary>
            The base implementation of a plugin action type available for users to select in HomeSeer
            <para>
            The difference between <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType2"/> and <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>, is that with
            <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType2"/> only a collection of view Id/Value pairs is stored in database whereas with 
            <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> the whole <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> is stored. This allows 
            the plugin to build the views in <see cref="M:HomeSeer.PluginSdk.Events.AbstractActionType2.OnInstantiateAction(System.Collections.Generic.Dictionary{System.String,System.String})"/> every time an action is instantiated.
            </para>
            <para>
            Inherit from this class to define your own action types and store them in your plugin's <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/>
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType2.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType2"/> with the specified ID, SubType number, Event Ref, Data byte array and listener.
             The byte array will be automatically parsed to a collection of view Id/Value pairs, and <see cref="M:HomeSeer.PluginSdk.Events.AbstractActionType2.OnInstantiateAction(System.Collections.Generic.Dictionary{System.String,System.String})"/> will be called
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructors in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType2"/>
            </para>
            </summary>
            <param name="id">The unique ID of this action in HomeSeer</param>
            <param name="subTypeNumber">The action subtype number</param>
            <param name="eventRef">The event reference ID that this action is associated with in HomeSeer</param>
            <param name="dataIn">A byte array containing a collection of view Id/Value pairs</param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType2.#ctor(System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType2"/> with the specified ID, Event Ref, Data byte array, listener, and logDebug flag.
             The byte array will be automatically parsed to a collection of view Id/Value pairs, and <see cref="M:HomeSeer.PluginSdk.Events.AbstractActionType2.OnInstantiateAction(System.Collections.Generic.Dictionary{System.String,System.String})"/> will be called
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructors in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType2"/>
            </para>
            </summary>
            <param name="id">The unique ID of this action in HomeSeer</param>
            <param name="eventRef">The event reference ID that this action is associated with in HomeSeer</param>
            <param name="dataIn">A byte array containing a collection of view Id/Value pairs</param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
            <param name="logDebug">If true debug messages will be written to the console</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType2.#ctor(System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType2"/> with the specified ID, Event Ref, and Data byte array.
             The byte array will be automatically parsed to a collection of view Id/Value pairs, and <see cref="M:HomeSeer.PluginSdk.Events.AbstractActionType2.OnInstantiateAction(System.Collections.Generic.Dictionary{System.String,System.String})"/> will be called.
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructors in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType2"/>
            </para>
            </summary>
            <param name="id">The unique ID of this action in HomeSeer</param>
            <param name="eventRef">The event reference ID that this action is associated with in HomeSeer</param>
            <param name="dataIn">A byte array containing a collection of view Id/Value pairs</param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType2.#ctor">
            <summary>
            Initialize a new, unconfigured <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType2"/>
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType2.OnNewAction">
            <inheritdoc cref="M:HomeSeer.PluginSdk.Events.AbstractActionType.OnNewAction" />
            <remarks>
            With <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType2"/> there is no need to override this method. <see cref="M:HomeSeer.PluginSdk.Events.AbstractActionType2.OnInstantiateAction(System.Collections.Generic.Dictionary{System.String,System.String})"/>
            will be called instead, with an empty Dictionary as parameter.
            </remarks> 
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractActionType2.OnInstantiateAction(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Called when an action of this type is being instantiated. Create the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> according
            to the values passed as parameters. If no value is passed it means it's a new action, so initialize the
            <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> to the action's starting state so users can begin configuring it.
            <para>
             Any JUI view added to the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ConfigPage"/> must use a unique ID as it will
             be displayed on an event page that could also be housing HTML from other plugins. It is recommended
             to use the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.PageId"/> as a prefix for all views added to ensure that their IDs are unique.
            </para>
            <param name="viewIdValuePairs">View Id/Value pairs containing the existing values for this action</param>
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.AbstractTriggerType">
            <summary>
            The base implementation of a plugin trigger type available for users to select in HomeSeer
            <para>
            Inherit from this class to define your own trigger types and store them in your plugin's <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/>
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.LogDebug">
            <summary>
            Used to enable/disable internal logging to the console
            <para>
            When it is TRUE, log messages from the PluginSdk code will be written to the Console
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.TriggerListener">
            <summary>
            An interface reference to the plugin that owns this trigger type.
            <para>
            Define your own interface that inherits from <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener"/>
             and then cast this as the type you defined to get a reference to your plugin that can handle any methods
             you wish to define.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.Id">
            <summary>
            The unique ID for the trigger.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.EventRef">
            <summary>
            The reference ID of the event the trigger is associated with.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.Data">
            <summary>
            The byte[] describing the current state of the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/> for the trigger.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.Name">
            <summary>
            The generic name of this trigger type that is displayed in the list of available triggers
             a user can select from on the events page.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.CanBeCondition">
            <summary>
            A boolean value indicating whether this trigger type can be used as a condition or not.
             A condition is a trigger that operates in conjunction with another trigger in an AND/OR pattern.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.SubTriggerCount">
            <summary>
            The number of sub-trigger types this trigger type supports.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.SelectedSubTriggerIndex">
            <summary>
            The currently selected sub-trigger index
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> with the specified ID, Event Ref, Data byte array, listener, and logDebug flag.
             The byte array will be automatically parsed for a <see cref="T:HomeSeer.Jui.Views.Page"/>, and a new one will be created if
             the array is empty.
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructor signatures in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>
            </para>
            </summary>
            <param name="id">The unique ID of this trigger in HomeSeer</param>
            <param name="eventRef">The event reference ID that this trigger is associated with in HomeSeer</param>
            <param name="selectedSubTriggerIndex">The 0 based index of the sub-trigger type selected for this trigger</param>
            <param name="dataIn">A byte array containing the definition for a <see cref="T:HomeSeer.Jui.Views.Page"/></param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
            <param name="logDebug">If true debug messages will be written to the console</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> with the specified ID, Event Ref, Data byte array and listener.
             The byte array will be automatically parsed for a <see cref="T:HomeSeer.Jui.Views.Page"/>, and a new one will be created if
             the array is empty.
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructor signatures in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>
            </para>
            </summary>
            <param name="id">The unique ID of this trigger in HomeSeer</param>
            <param name="eventRef">The event reference ID that this trigger is associated with in HomeSeer</param>
            <param name="selectedSubTriggerIndex">The 0 based index of the sub-trigger type selected for this trigger</param>
            <param name="dataIn">A byte array containing the definition for a <see cref="T:HomeSeer.Jui.Views.Page"/></param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.#ctor(HomeSeer.PluginSdk.Events.TrigActInfo,HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> from a <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/> and with the specified listener, and logDebug flag.
             The byte array in <paramref name="trigInfo"/> will be automatically parsed for a <see cref="T:HomeSeer.Jui.Views.Page"/>, and a new one will be created if
             the array is empty.
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructor signatures in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>
            </para>
            </summary>
            <param name="trigInfo">The <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/> containing all the trigger information</param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
            <param name="logDebug">If true debug messages will be written to the console</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.#ctor">
            <summary>
            Initialize a new, unconfigured <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.PageId">
            <summary>
            Use this as a unique prefix for all of your JUI views and as the ID for the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage">
            <summary>
            The <see cref="T:HomeSeer.Jui.Views.Page"/> displayed to users to allow them to configure this trigger.
            <para>
            The <see cref="P:HomeSeer.Jui.Views.Page.Name"/> of this page is not used or displayed anywhere and is not important.
            </para>
            </summary>
            <remarks>
            The ID of this page must be equal to the automatic <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.PageId"/>.
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.SubTriggerTypeNames">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of names for the available sub-trigger types users can select from for this trigger type.
             Leave this list empty if the trigger type does not support any subtypes.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.GetName">
            <summary>
            Called by HomeSeer to obtain the name of this trigger type.
            </summary>
            <returns>A generic name for this trigger to be displayed in the list of available triggers.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.GetSubTriggerName(System.Int32)">
            <summary>
            Called by HomeSeer to obtain the name of the sub-trigger with the specified index
            </summary>
            <param name="subTriggerNum">The index of the requested sub-trigger in the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.SubTriggerTypeNames"/> property</param>
            <returns>The name of the sub-trigger for the specified index</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the index requested does not exist in the list of available sub-triggers for this trigger type.
            </exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.OnNewTrigger">
            <summary>
            Called when a new trigger of this type is being created. Initialize the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/> to
             the trigger's starting state so users can begin configuring it.
            <para>
            You must create a new <see cref="T:HomeSeer.Jui.Views.Page"/> with a unique ID provided by <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.PageId"/>
             and be of the type <see cref="F:HomeSeer.Jui.Types.EPageType.EventTrigger"/>.
             Any JUI view added to the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/> must use a unique ID as it will
             be displayed on an event page that could also be housing HTML from other plugins. It is recommended
             to use the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.PageId"/> as a prefix for all views added to ensure that their IDs are unique.
            </para>
            <para>
            If no page is set, a blank page will be auto initialized.
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.IsFullyConfigured">
            <summary>
            Called to determine if this trigger is configured completely or if there is still more to configure.
            </summary>
            <returns>
            TRUE if the trigger is configured and can be formatted for display,
             FALSE if there are more options to configure before the trigger can be used.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.OnEditTrigger(HomeSeer.Jui.Views.Page)">
            <summary>
            Called when a trigger of this type is being edited and changes need to be propagated to the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/>
            <para>
            We do not recommend overriding this method unless you specifically want to adjust the way view changes
             are processed as a whole.
            </para>
            </summary>
            <param name="viewChanges">A <see cref="T:HomeSeer.Jui.Views.Page"/> containing changes to the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/></param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.OnConfigItemUpdate(HomeSeer.Jui.Views.AbstractView)">
            <summary>
            Called when a view on the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/> has been updated by a user and needs to be processed.
            </summary>
            <param name="configViewChange">The new state of the view that was changed</param>
            <returns>
            TRUE to update the view in the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/> and save the change, or
             FALSE to discard the change.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.GetPrettyString">
            <summary>
            Called by HomeSeer when the trigger is configured and needs to be displayed to the user as an
             easy to read sentence that flows with an IF... THEN... format.
            <para>
            This is currently a WIP (Work in Progress) The end goal is to provide a StringBuilder-like class that
             makes it easy to output pre-formatted HTML so that all common items are quickly identifiable by users.
             (ex. All device/feature names are colored the same and bolded)
            </para>
            </summary>
            <returns>
            An easy to read string describing the trigger as it would follow an IF...
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.IsTriggerTrue(System.Boolean)">
            <summary>
            Called by HomeSeer to determine if this trigger's conditions have been met.
            </summary>
            <remarks>
            Always return TRUE if the trigger cannot be a condition and there is nothing to check when an event is
             manually executed by a user.
            </remarks>
            <param name="isCondition">TRUE if the trigger is paired with other triggers, FALSE if it is alone.</param>
            <returns>
            TRUE if the trigger's conditions have been met,
             FALSE if they haven't
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.ReferencesDeviceOrFeature(System.Int32)">
            <summary>
            Called by HomeSeer to determine if this trigger references the device or feature with the specified ref.
            </summary>
            <param name="devOrFeatRef">The unique <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> to check for</param>
            <returns>
            TRUE if the trigger references the specified device/feature,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.ToHtml">
            <summary>
            Called by <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> when <see cref="M:HomeSeer.PluginSdk.IPlugin.TriggerBuildUI(HomeSeer.PluginSdk.Events.TrigActInfo)"/> is called to get
             the HTML to display to the user so they can configure the action.
            <para>
            This HTML is automatically generated by the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/> defined in the trigger.
            </para>
            </summary>
            <returns>HTML to show on the HomeSeer events page for the user.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConvertLegacyData(System.Byte[])">
            <summary>
            Called when legacy trigger data needs to be converted to the new format
            <para>
            Override this if you need to support legacy triggers. Convert the UI to the new format and save it in
             the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/>. Finally, return <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.Data"/> to automatically
             serialize the ConfigPage to byte[].  Use <see cref="M:HomeSeer.PluginSdk.Events.TrigActInfo.DeserializeLegacyData``1(System.Byte[],System.Boolean)"/> to
             deserialize the data using the legacy method.
            </para>
            </summary>
            <remarks>
            This is also called if there was an error while trying to deserialize the modern data format as a fallback
            </remarks>
            <param name="inData">A byte array describing the current trigger configuration in legacy format.</param>
            <returns>
            A byte array describing the current trigger configuration in new format.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2">
            <summary>
            The base implementation of a plugin trigger type available for users to select in HomeSeer
            <para>
            The difference between <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2"/> and <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>, is that with
            <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2"/> only a collection of view Id/Value pairs is stored in database whereas with 
            <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> the whole <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/> is stored. This allows 
            the plugin to build the views in <see cref="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.OnInstantiateTrigger(System.Collections.Generic.Dictionary{System.String,System.String})"/> every time a trigger is instantiated.
            </para>
            <para>
            Inherit from this class to define your own trigger types and store them in your plugin's <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/>
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2"/> with the specified ID, Event Ref, Data byte array, listener, and logDebug flag.
             The byte array will be automatically parsed to a collection of view Id/Value pairs, and <see cref="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.OnInstantiateTrigger(System.Collections.Generic.Dictionary{System.String,System.String})"/> will be called.
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructor signatures in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2"/>
            </para>
            </summary>
            <param name="id">The unique ID of this trigger in HomeSeer</param>
            <param name="eventRef">The event reference ID that this trigger is associated with in HomeSeer</param>
            <param name="selectedSubTriggerIndex">The 0 based index of the sub-trigger type selected for this trigger</param>
            <param name="dataIn">A byte array containing the definition for a <see cref="T:HomeSeer.Jui.Views.Page"/></param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
            <param name="logDebug">If true debug messages will be written to the console</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2"/> with the specified ID, Event Ref, Data byte array and listener.
             The byte array will be automatically parsed to a collection of view Id/Value pairs, and <see cref="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.OnInstantiateTrigger(System.Collections.Generic.Dictionary{System.String,System.String})"/> will be called.
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructor signatures in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2"/>
            </para>
            </summary>
            <param name="id">The unique ID of this trigger in HomeSeer</param>
            <param name="eventRef">The event reference ID that this trigger is associated with in HomeSeer</param>
            <param name="selectedSubTriggerIndex">The 0 based index of the sub-trigger type selected for this trigger</param>
            <param name="dataIn">A byte array containing the definition for a <see cref="T:HomeSeer.Jui.Views.Page"/></param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.#ctor(HomeSeer.PluginSdk.Events.TrigActInfo,HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2"/> from a <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/> and with the specified listener, and logDebug flag.
             The byte array in <paramref name="trigInfo"/> will be automatically parsed to a collection of view Id/Value pairs, 
             and <see cref="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.OnInstantiateTrigger(System.Collections.Generic.Dictionary{System.String,System.String})"/> will be called.
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            <para>
            You MUST implement one of these constructor signatures in any class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2"/>
            </para>
            </summary>
            <param name="trigInfo">The <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/> containing all the trigger information</param>
            <param name="listener">The listener that facilitates the communication with <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/></param>
            <param name="logDebug">If true debug messages will be written to the console</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.#ctor">
            <summary>
            Initialize a new, unconfigured <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2"/>
            <para>
            This is called through reflection by the <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> class if a class that
             derives from this type is added to its list.
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.OnNewTrigger">
            <inheritdoc cref="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.OnNewTrigger" />
            <remarks>
            With <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType2"/> there is no need to override this method. <see cref="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.OnInstantiateTrigger(System.Collections.Generic.Dictionary{System.String,System.String})"/>
            will be called instead, with an empty Dictionary as parameter.
            </remarks> 
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.AbstractTriggerType2.OnInstantiateTrigger(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Called when a trigger of this type is being instantiated. Create the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/> according
            to the values passed as parameters. If no value is passed it means it's a new trigger, so initialize the
            <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/> to the trigger's starting state so users can begin configuring it.
            <para>
             Any JUI view added to the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConfigPage"/> must use a unique ID as it will
             be displayed on an event page that could also be housing HTML from other plugins. It is recommended
             to use the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.PageId"/> as a prefix for all views added to ensure that their IDs are unique.
            </para>
            <param name="viewIdValuePairs">View Id/Value pairs containing the existing values for this trigger</param>
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.ActionTypeCollection">
            <summary>
            A collection of <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>s that can be used by users to create HomeSeer Event Actions.
            <para>
            An instance of this class is a field on <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/> initialized in the constructor.
             In addition, all calls from HomeSeer related to actions are automatically routed through that instance.
            </para>
            </summary>
            <remarks>
            Add action types supported by your plugin using <see cref="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.AddActionType(System.Type)"/>
            <para>
            Due to the fact that HomeSeer saves the index of the action type in its internal database, avoid
             changing the index of any of the types available to the user. Doing so may result in an incorrect
             <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> being instantiated and producing errors because the configuration parameters
             and signature of the action type do not match.
            </para>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.ActionTypeCollection.LogDebug">
            <summary>
            Used to enable/disable internal logging to the console
            <para>
            When it is TRUE, log messages from the PluginSdk code will be written to the Console
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.ActionTypeCollection.ActionTypes">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Type">Types</see> that are a subclass of <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>
            </summary>
            <remarks>
            These represent the types of <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> that are available for users
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.#ctor(HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener)">
            <summary>
            Initialize a new instance of an <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> with the specified listener
            </summary>
            <param name="listener">An <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener"/> that will be passed to action types</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.AddActionType(System.Type)">
            <summary>
            Add the specified class type that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> to the list of actions
            </summary>
            <param name="actionType">
            The <see cref="T:System.Type"/> of the class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>
            </param>
            <exception cref="T:System.ArgumentException">Thrown when the specified class type will not work as an action</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.GetName(System.Int32)">
            <summary>
            Get the name of the action type at the specified index
            </summary>
            <param name="actionIndex">The 1 based index of the action type to get the name for</param>
            <returns>The name of the action type</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.OnGetActionUi(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when it needs to display the configuration UI for an action type
            </summary>
            <param name="actInfo">The action to display as defined by <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/></param>
            <returns>HTML to display on the event page for the specified action</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.OnUpdateActionConfig(System.Collections.Generic.Dictionary{System.String,System.String},HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when a user updates the configuration of an action and those changes
             are in need of processing.
            </summary>
            <param name="postData">A <see cref="T:System.Collections.Generic.Dictionary`2"/> of changes to the action configuration</param>
            <param name="actInfo">The action being configured</param>
            <returns>
            An <see cref="T:HomeSeer.PluginSdk.Devices.EventUpdateReturnData"/> describing the new state of the action that will be saved by HomeSeer.
             The action configuration will be saved if the result returned is an empty string.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.IsActionConfigured(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when it needs to determine if a specific action is completely configured
             or requires additional configuration before it can be used.
            </summary>
            <param name="actInfo">The action to check</param>
            <returns>
            TRUE if the action is completely configured,
             FALSE if it is not. A call to <see cref="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.OnGetActionUi(HomeSeer.PluginSdk.Events.TrigActInfo)"/> will be called following this if FALSE is returned.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.OnGetActionPrettyString(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when it needs to get an easy to read, formatted string that communicates what
             the action does to the user.
            </summary>
            <param name="actInfo">The action that a pretty string is needed for</param>
            <returns>
            HTML formatted text communicating what the action does
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.HandleAction(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when an event has been triggered and a corresponding action needs to be processed.
            </summary>
            <param name="actInfo">The action that is being executed</param>
            <returns>
            TRUE if the action executed successfully,
             FALSE if there was an error executing the action.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.ActionReferencesDeviceOrFeature(System.Int32,HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when it needs to determine if a specific device/feature is referenced by a
             particular action.
            </summary>
            <param name="devOrFeatRef">The unique <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the device/feature</param>
            <param name="actInfo">The action to check</param>
            <returns>
            TRUE if the action references the specified device/feature,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.ActionTypeCollection.GetObjectFromActInfo(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Get an instance of an <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> from a <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/>.
            </summary>
            <remarks>
            <para>
            <see cref="F:HomeSeer.PluginSdk.Events.TrigActInfo.TANumber"/> is used to identify which of the
             <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType">AbstractActionTypes</see> is used.
            </para>
            </remarks>
            <param name="actInfo">An instance of <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/> that represents an action.</param>
            <returns>
            An instance of an <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>. This will be one of the types in the <see cref="P:HomeSeer.PluginSdk.Events.ActionTypeCollection.ActionTypes"/> list.
            </returns>
            <exception cref="T:System.TypeLoadException">
            Thrown if the <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> that is referenced by <see cref="F:HomeSeer.PluginSdk.Events.TrigActInfo.TANumber"/>
             does not have the proper constructor.
            <list type="bullet">
            <item><see cref="M:HomeSeer.PluginSdk.Events.AbstractActionType.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener)"/></item>
            <item><see cref="M:HomeSeer.PluginSdk.Events.AbstractActionType.#ctor(System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener,System.Boolean)"/></item>
            <item><see cref="M:HomeSeer.PluginSdk.Events.AbstractActionType.#ctor(System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener)"/></item>
            </list>
            </exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.ActionTypeCollection.IActionTypeListener">
            <summary>
            The base implementation of an action type interface that facilitates communication between
             <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>s and the <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/> that owns them.
            <para>
            Extend this interface and have your <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/> implementation inherit it to make it
             accessible through the <see cref="P:HomeSeer.PluginSdk.Events.AbstractActionType.ActionListener"/> field.
            </para>
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.BaseTypeCollection`1">
            <summary>
            A collection for holding types of classes that adhere to certain structural rules.
            </summary>
            <typeparam name="TBaseItemType">The type of item to manage</typeparam>
            <seealso cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/>
            <seealso cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.BaseTypeCollection`1.Count">
            <summary>
            The number of types that are supported by the collection
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.BaseTypeCollection`1.ConstructorSignatures">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of constructor signatures
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.BaseTypeCollection`1.MatchAllSignatures">
            <summary>
            Whether the items in the collection must match all of the listed <see cref="P:HomeSeer.PluginSdk.Events.BaseTypeCollection`1.ConstructorSignatures"/> or just one.
             <see langword="true"/> if the items must match all constructor signatures.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.BaseTypeCollection`1._itemTypes">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Type">Types</see> that are a subclass of <typeparamref name="TBaseItemType"/>
            </summary>
            <see cref="M:HomeSeer.PluginSdk.Events.BaseTypeCollection`1.AddItemType(System.Type)"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.BaseTypeCollection`1._itemTypeNames">
            <summary>
            <see cref="T:System.Collections.Generic.HashSet`1"/> of class names representing the <see cref="T:System.Type">Types</see> in <see cref="F:HomeSeer.PluginSdk.Events.BaseTypeCollection`1._itemTypes"/>
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.BaseTypeCollection`1.AddItemType(System.Type)">
            <summary>
            Add the specified class type that derives from <typeparamref name="TBaseItemType"/> to the list of item types
            </summary>
            <param name="itemType">
            The <see cref="T:System.Type"/> of the class that derives from <typeparamref name="TBaseItemType"/>
            </param>
            <exception cref="T:System.ArgumentException">Thrown when the specified class type will not work as the desired type</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.BaseTypeCollection`1.GetObjectFromInfo(System.Int32)">
            <summary>
            Get an instance of an object of the type defined at a specific index in the collection
            </summary>
            <param name="itemIndex">The index of the type to use</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when no item is found at the specified index</exception>
            <exception cref="T:System.TypeLoadException">Thrown when there was an error while creating an instance of the specified type</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.BaseTypeCollection`1.GetObjectFromInfo(System.Int32,System.Int32,System.Object[])">
            <inheritdoc cref="M:HomeSeer.PluginSdk.Events.BaseTypeCollection`1.GetObjectFromInfo(System.Int32)"/>
            <param name="itemIndex">The index of the type to use</param>
            <param name="signatureIndex">The index of the constructor signature to use</param>
            <param name="inParams">The parameters to pass to the constructor</param>
            <exception cref="T:System.ArgumentException">Thrown when there was an issue with the provided parameters</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.BaseTypeCollection`1.TypeHasConstructor(System.Int32,System.Int32)">
            <summary>
            Determine if a specific type has a particular constructor signature defined
            </summary>
            <param name="itemIndex">The index of the type to use</param>
            <param name="signatureIndex">The index of the constructor signature to use</param>
            <returns><see langword="true"/> if the type has the specific constructor defined</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if a type or signature was not found at the specified index</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.EEventFlag">
            <summary>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.EEventFlag.GoogleDiscoveryEnabled">
            <summary>
            Expose this event to Google cloud services
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.EEventFlag.AmazonDiscoveryEnabled">
            <summary>
            Expose this event to Amazon cloud services.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.EventData">
            <summary>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.EventData.FlagVoiceCommand">
            <summary>
            Event can be controlled by voice using the event name or the voice command override, must be set if Amazon or Google is set
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.EventData.FlagGoogleDiscoveryEnabled">
            <summary>
            Event can be discovered by Google Home
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.EventData.FlagAlexaDiscoveryEnabled">
            <summary>
            Event can be discovered by Amazon alexa
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.EventGroupData">
            <summary>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.EventTriggerGroupData">
            <summary>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.TrigActInfo">
            <summary>
            The internal data stored by HomeSeer describing a particular event action or trigger.
             Instances of this class are created and managed by HomeSeer and are passed through the <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/>
             to the <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> and <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> respectively.
             You shouldn't need to work with this class directly and can rely on the decoded pieces exposed through the
             <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> and <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> classes in most situations.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.TrigActInfo.evRef">
            <summary>
            This is the unique event reference ID number for the event that this trigger is a part of.
            </summary>
            <remarks></remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Events.EventData"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.TrigActInfo.UID">
            <summary>
            This is the unique ID for the trigger or action within an event that this <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/> is for.
            </summary>
            <remarks>
            <para>
            When the trigger is true, the plugin will pass this to HomeSeer to trigger to cause HomeSeer to check the
            conditions and trigger the event if appropriate. When the action needs to be carried out,
            HomeSeer will invoke the Handle procedure in the action, and if there is action information stored
            by the plugin, this property can be used to retrieve it.
            </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.TrigActInfo.TANumber">
            <summary>
            This is for plugin reference only. Plugins can support multiple types of different triggers or actions.
            This identifies which type of trigger or action, out of the triggers or actions offered by the plugin,
            that this <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/> is for.
            </summary>
            <remarks></remarks>
            <seealso cref="P:HomeSeer.PluginSdk.AbstractPlugin.ActionTypes"/>
            <seealso cref="P:HomeSeer.PluginSdk.AbstractPlugin.TriggerTypes"/>
            <seealso cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/>
            <seealso cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.TrigActInfo.SubTANumber">
            <summary>
            When a trigger has subtypes, this is used to identify which sub-trigger or trigger subtype, this trigger is set to.
            <para>
            For example, in HomeSeer there is a TIME trigger - this might identify whether it is the type AT, BEFORE, or AFTER a time value.
            </para>
            </summary>
            <remarks>
            <para>
            This is only used for <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType">triggers</see> and can be ignored in favor of managing
            a subtype directly. HomeSeer will present a list of trigger subtypes to choose from if
            <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.SubTriggerCount"/> > 1. HomeSeer does not do the same for
            <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType">actions</see>, and there is no corresponding <code>SubActionCount</code> property.
            </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.TrigActInfo.DataIn">
            <summary>
            Serialized data for this <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType">action</see> or <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType">trigger</see>
            that the plugin needs. This is stored within the HomeSeer database and serves as the configuration for the
            <see cref="T:HomeSeer.PluginSdk.Events.ActionTypeCollection"/> and <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> this is for.
            </summary>
            <remarks>
            <para>
            This is automatically unpacked by <see cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/> and <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> if it
            contains a JSON string describing a <see cref="T:HomeSeer.Jui.Views.Page"/>. If it contains any other data format, like
            data from an HS3 plugin, <see cref="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.ConvertLegacyData(System.Byte[])">AbstractTriggerType.ConvertLegacyData</see>
            or <see cref="M:HomeSeer.PluginSdk.Events.AbstractActionType.ConvertLegacyData(System.Byte[])">AbstractActionType.ConvertLegacyData</see>
            will be called. You can override these methods to define your own method for unpacking the data.
            </para>
            </remarks>
            <seealso cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>
            <seealso cref="T:HomeSeer.PluginSdk.Events.AbstractActionType"/>
        </member>
        <member name="F:HomeSeer.PluginSdk.Events.TrigActInfo.Instance">
            <summary>
            If the plug-in supports multiple instances and this trigger or action is for one of the instances, 
            then this field will have the instance name in it.
            </summary>
            <remarks>
            Multi-instance plugins were supported in HS3, but support for them was not carried over to HS4. This may change
            in the future, but, for now, this is an unused field.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TrigActInfo.DeserializeLegacyData``1(System.Byte[],System.Boolean)">
            <summary>
            Deserialize the specified byte array to an object of type <typeparamref name="TOutObject"/> using the legacy
             HomeSeer method for deserializing trigger/action data.
            </summary>
            <param name="inData">The byte array to deserialize.</param>
            <param name="willLog">Whether the method should write log messages to the console.</param>
            <typeparam name="TOutObject">The type of object to deserialize the data to. Must be a class.</typeparam>
            <returns>An object of type <typeparamref name="TOutObject"/> or null if it was unsuccessful.</returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection">
            <summary>
            A collection of <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>s that can be used by users to create HomeSeer Event Triggers.
            <para>
            An instance of this class is a field on <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/> initialized in the constructor.
             In addition, all calls from HomeSeer related to triggers are automatically routed through that instance.
            </para>
            </summary>
            <remarks>
            Add trigger types supported by your plugin using <see cref="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.AddTriggerType(System.Type)"/>
            <para>
            Due to the fact that HomeSeer saves the index of the trigger type in its internal database, avoid
             changing the index of any of the types available to the user. Doing so may result in an incorrect
             <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> being instantiated and producing errors because the configuration parameters
             and signature of the trigger type do not match.
            </para>
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.TriggerTypeCollection.LogDebug">
            <summary>
            Used to enable/disable internal logging to the console
            <para>
            When it is TRUE, log messages from the PluginSdk code will be written to the Console
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Events.TriggerTypeCollection.TriggerTypes">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Type">Types</see> that are a subclass of <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>
            </summary>
            <remarks>
            These represent the types of <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> that are available for users
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.#ctor(HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener)">
            <summary>
            Initialize a new instance of an <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection"/> with the specified listener
            </summary>
            <param name="listener">An <see cref="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener"/> that will be passed to trigger types</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.AddTriggerType(System.Type)">
            <summary>
            Add the specified class type that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> to the list of triggers
            </summary>
            <param name="triggerType">
            The <see cref="T:System.Type"/> of the class that derives from <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>
            </param>
            <exception cref="T:System.ArgumentException">Thrown when the specified class type will not work as a trigger</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.GetName(System.Int32)">
            <summary>
            Get the name of the trigger type at the specified index
            </summary>
            <param name="triggerIndex">The 1 based index of the trigger type to get the name for</param>
            <returns>The name of the trigger type</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.GetSubTriggerCount(System.Int32)">
            <summary>
            Called by HomeSeer to determine the number of available sub-trigger types available under the
             trigger type at the specified index.
            </summary>
            <param name="triggerIndex">The 1 based index of the trigger type to get the sub-trigger count for</param>
            <returns>The number of sub-trigger types available under the trigger type specified</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.GetSubTriggerName(System.Int32,System.Int32)">
            <summary>
            Get the name of the sub-trigger type at the specified index
            </summary>
            <param name="triggerIndex">The 1 based index of the trigger type the sub-trigger is a member of</param>
            <param name="subTriggerIndex">The 1 based index of the sub-trigger type to get the name for</param>
            <returns>The name of the sub-trigger type</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.OnGetTriggerUi(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when it needs to display the configuration UI for a trigger type
            </summary>
            <param name="trigInfo">The trigger to display as defined by <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/></param>
            <returns>HTML to display on the event page for the specified trigger</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.OnUpdateTriggerConfig(System.Collections.Generic.Dictionary{System.String,System.String},HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when a user updates the configuration of a trigger and those changes
             are in need of processing.
            </summary>
            <param name="postData">A <see cref="T:System.Collections.Generic.Dictionary`2"/> of changes to the trigger configuration</param>
            <param name="trigInfo">The trigger being configured</param>
            <returns>
            An <see cref="T:HomeSeer.PluginSdk.Devices.EventUpdateReturnData"/> describing the new state of the trigger that will be saved by HomeSeer.
             The trigger configuration will be saved if the result returned is an empty string.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.IsTriggerConfigured(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when it needs to determine if a specific trigger is completely configured
             or requires additional configuration before it can be used.
            </summary>
            <param name="trigInfo">The trigger to check</param>
            <returns>
            TRUE if the trigger is completely configured,
             FALSE if it is not. A call to <see cref="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.OnGetTriggerUi(HomeSeer.PluginSdk.Events.TrigActInfo)"/> will be called following this if FALSE is returned.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.OnGetTriggerPrettyString(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when it needs to get an easy to read, formatted string that communicates what
             the trigger does to the user.
            </summary>
            <param name="trigInfo">The trigger that a pretty string is needed for</param>
            <returns>
            HTML formatted text communicating what the trigger does
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.IsTriggerTrue(HomeSeer.PluginSdk.Events.TrigActInfo,System.Boolean)">
            <summary>
            Called by HomeSeer to determine if a trigger's conditions have been met.
            </summary>
            <param name="trigInfo">The trigger to check</param>
            <param name="isCondition">TRUE if the trigger is paired with other triggers, FALSE if it is alone.</param>
            <returns>
            TRUE if the trigger's conditions have been met,
             FALSE if they haven't
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.TriggerReferencesDeviceOrFeature(System.Int32,HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by HomeSeer when it needs to determine if a specific device/feature is referenced by a
             particular trigger.
            </summary>
            <param name="devOrFeatRef">The unique <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the device/feature</param>
            <param name="trigInfo">The trigger to check</param>
            <returns>
            TRUE if the trigger references the specified device/feature,
             FALSE if it does not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.TriggerCanBeCondition(System.Int32)">
            <summary>
            Called by HomeSeer to determine if a particular trigger can be used as a condition or not.
             A condition is a trigger that operates in conjunction with another trigger in an AND/OR pattern.
            </summary>
            <param name="triggerIndex">The 1 based index of the trigger type to check</param>
            <returns>
            TRUE if the trigger can be used as a condition,
             FALSE if it can not.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Events.TriggerTypeCollection.GetObjectFromTrigInfo(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Get an instance of an <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> from a <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/>.
            </summary>
            <remarks>
            <para>
            <see cref="F:HomeSeer.PluginSdk.Events.TrigActInfo.TANumber"/> is used to identify which of the
             <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType">AbstractTriggerTypes</see> is used.
            </para>
            </remarks>
            <param name="trigInfo">An instance of <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/> that represents a trigger.</param>
            <returns>
            An instance of an <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>. This will be one of the types in the <see cref="P:HomeSeer.PluginSdk.Events.TriggerTypeCollection.TriggerTypes"/> list.
            </returns>
            <exception cref="T:System.TypeLoadException">
            Thrown if the <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/> that is referenced by <see cref="F:HomeSeer.PluginSdk.Events.TrigActInfo.TANumber"/>
             does not have the proper constructor.
            <list type="bullet">
            <item><see cref="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener)"/></item>
            <item><see cref="M:HomeSeer.PluginSdk.Events.AbstractTriggerType.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener,System.Boolean)"/></item>
            </list>
            </exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Events.TriggerTypeCollection.ITriggerTypeListener">
            <summary>
            The base implementation of a trigger type interface that facilitates communication between
             <see cref="T:HomeSeer.PluginSdk.Events.AbstractTriggerType"/>s and the <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/> that owns them.
            <para>
            Extend this interface and have your <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/> implementation inherit it to make it
             accessible through the <see cref="P:HomeSeer.PluginSdk.Events.AbstractTriggerType.TriggerListener"/> field.
            </para>
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Constants.editions">
            <summary>
            editions is the type of software features enabled. license ID determines which edition we are running
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Constants.HSEvent">
             <summary>
             For HSEvent callbacks
            
             <para>WARNING - This is being deprecated. Please use the values provided by <see cref="T:HomeSeer.PluginSdk.Systems.EHsSystemEvent"/>.</para>
             </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Energy.KWH">
            <summary>
            kwh used
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Energy.Graphing">
            <summary>
            HS graphing device
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Alarm">
            <summary>
            Alarm status control (shows alarms that have occurred and can also invoke an alarm - e.g. Duress)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Arming">
            <summary>
            Arming status control (shows the state of the security arming and can set arming state)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Keypad">
            <summary>
            Keypad status control
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Zone_Perimeter">
            <summary>
            A perimeter zone
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Zone_Perimeter_Delay">
            <summary>
            A perimeter zone with a violation alarm delay
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Zone_Interior">
            <summary>
            An interior zone (not normally armed in stay mode)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Zone_Interior_Delay">
            <summary>
            An interior zone (with a violation alarm delay when armed)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Zone_Auxiliary">
            <summary>
            An aux zone, not usually included in any arming mode
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Zone_Other">
            <summary>
            A zone that does not fit any other zone description
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Zone_Safety_Smoke">
            <summary>
            A smoke detector zone (not allowed to be bypassed)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Zone_Safety_CO">
            <summary>
            A Carbon Monoxide zone (not allowed to be bypassed)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Zone_Safety_CO2">
            <summary>
            A Carbon Dioxide zone (not allowed to be bypassed)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Zone_Safety_Other">
            <summary>
            A zone for some other safety sensor that cannot be bypassed
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Output_Relay">
            <summary>
            A general purpose output relay
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Output_Other">
            <summary>
            A general purpose output (could be virtual as in a 'flag' output)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Communicator">
            <summary>
            Communicator status and (if available) control
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Siren">
            <summary>
            Siren output - status usually - control follows alarm state.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.eDeviceType_Security.Root">
            <summary>
            Indicates a root device of a root/child grouping.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.TunnelCommand.ErrorMessage">
            <summary>
            data contains the error message
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.TunnelCommand.CreateHSTouchUser">
            <summary>
            create a user/pass that is the MyHS user pass so HSTouch allows connections with these credentials
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.TunnelCommand.RequestLicID">
            <summary>
            tunnel requests license ID from HS after HS connects
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.TunnelCommand.DeviceChange">
            <summary>
            HS device has changed value, new value sent to tunned (mainly for IFTTT)
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.TunnelCommand.UseBOISSerialization">
            <summary>
            use compact serialization
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Constants.enumEnergyDirection">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Constants.enumEnergyDevice">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice._Undefined_">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Light_Small">
            <summary>
            A small light
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Light_Large">
            <summary>
            A large light or several lights
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Appliance">
            <summary>
            Any appliance
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Appliance_Small">
            <summary>
            A small appliance such as a toaster
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Appliance_Large">
            <summary>
            A large appliance such as an oven
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Utility">
            <summary>
            A utility device
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Utility_Small">
            <summary>
            A small utility device such as a water filter
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Utility_Large">
            <summary>
            A large utility device such as a well pump
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Entertainment">
            <summary>
            An entertainment device
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Entertainment_Small">
            <summary>
            A small entertainment device such as a radio
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Entertainment_Large">
            <summary>
            A large entertainment device such as a home theatre system
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.HVAC">
            <summary>
            An HVAC device
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Electric_AC">
            <summary>
            An Air Conditioning device
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Electric_Heat">
            <summary>
            An electric heating device
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Panel">
            <summary>
            An electrical panel providing several branches of electrical service to the home.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Panel_A">
            <summary>
            An electrical panel providing several branches of electrical service to the home.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Panel_B">
            <summary>
            An electrical panel providing several branches of electrical service to the home.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Panel_C">
            <summary>
            An electrical panel providing several branches of electrical service to the home.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Panel_D">
            <summary>
            An electrical panel providing several branches of electrical service to the home.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Panel_E">
            <summary>
            An electrical panel providing several branches of electrical service to the home.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Panel_F">
            <summary>
            An electrical panel providing several branches of electrical service to the home.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Meter">
            <summary>
            An electric meter measuring usage for an unspecified or general purpose.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Meter_Service">
            <summary>
            An electric meter measuring usage for electrical service such as a house service entrance.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Meter_Device">
            <summary>
            An electric meter measuring usage for a single device.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Generator">
            <summary>
            An electricity producing generator.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Solar_Panel">
            <summary>
            An electricity producing solar panel.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Wind_Turbine">
            <summary>
            An electricity producing wind turbine.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Water_Turbine">
            <summary>
            An electricity producing water (wave) turbine.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Root">
            <summary>
            The root device for child energy devices.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.enumEnergyDevice.Other">
            <summary>
            A device (consumer or producer) that does not fit any other device type.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Constants.eGraphType">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Constants.eGraphInterval">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Constants.speak_error_values">
            <summary>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Constants.speak_type_values">
            <summary>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.speak_type_values.SPEAK_TTS">
            <summary>
            TTS voice
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.speak_type_values.SPEAK_MESSAGE">
            <summary>
            Text message
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Constants.speak_type_values.SPEAK_WAVEFILE">
            <summary>
            Play a wave file
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Energy.EnergyCalcData">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyCalcData.Range">
            <summary>
            The amount of time to be included in the calculation starting from the starting point.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyCalcData.StartBack">
            <summary>
            The amount of time to be subtracted from NOW to get our starting point.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyCalcData.RoundDay">
            <summary>
            Whether to round the time to an even day.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Energy.EnergyData">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyData.dvRef">
            <summary>
            Device reference ID number for the device this energy data is for.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyData.Direction">
            <summary>
            Indicates whether the energy was consumed (used) or produced (created).
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyData.Amount">
            <summary>
            Always measured in Watts
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyData.Amount_Start">
            <summary>
            The start of the time period this measurement is for.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyData.Amount_End">
            <summary>
            The end of the time period this measurement is for.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyData.Duration">
            <summary>
            When the data is compacted, time periods missed (perhaps HS was shut down) end up having the actual amounts averaged across the missing time period.
            <para>
            For example, if you log 500W at 1:00PM through 1:05PM, then HS was shut down for 5 minutes, 
            then log 500W from 1:10PM through 1:15PM, then when data compaction happens and 
            the records are consolidated, the only thing that could happen is to show 1000W
            from 1:00PM through 1:15PM, which is accurate, but does not provide evidence of
            the fact that there was a 5 minute period when data was not collected.  Furthermore,
            calculations of the COST which must include the time to get to kWh will be adversely
            affected (more for electricity produced than consumed!).  This duration field 
            takes care of that NOT by providing any record of the missing periods, but by 
            at least keeping track of the total time within the consolidated (compacted) 
            record which only reflects the start period and end period.
            </para>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyData.Rate">
            <summary>
            Always measured in kWH
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyData.UserCode">
            <summary>
            For the user to indicate something about this reading.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyData.Device">
            <summary>
            Indicates the type of device.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Energy.EnergyGraph">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Energy.EnergyGraphData">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyGraphData.FirstOf">
            <summary>
            FirstOf is really a boolean, but for database compatibility, we'll use integer.
            <para>
            If true, goes to the first instance of the gbInterval e.g: 
            if a day, to the beginning of the day, 
            if a week, to the beginning of the week.
            </para>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyGraphData.DynamicCalc">
            <summary>
            DynamicCalc is really a boolean, but for database compatibility, we'll use integer.
            <para>
            This can be inferred, but is added to explicitly show whether to use static dates or calc them out.
            </para>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Energy.EnergyGraphData.AdditionalParameters">
            <summary>
            back_color,pane_color,bar1_color,bar2_color,use_gradient,font_color,pane_color_left,
            pane_color_bottom,pane_color_top,pane_color_right
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.AbstractFeaturePage">
            <summary>
            An abstract implementation of the <see cref="T:HomeSeer.PluginSdk.Features.IFeaturePage"/> interface establishing a basic structure to build
             a feature page from.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.AbstractFeaturePage.Title">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Features.IFeaturePage.Title"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.AbstractFeaturePage.FileName">
            <inheritdoc cref="P:HomeSeer.PluginSdk.Features.IFeaturePage.FileName"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.AbstractFeaturePage.RequestMap">
            <summary>
            A map of keys and methods used as callbacks for requests that match their key.
             Use <see cref="M:HomeSeer.PluginSdk.Features.AbstractFeaturePage.RegisterRequestCallback(System.String,System.Func{HomeSeer.PluginSdk.Features.JsonRequest,HomeSeer.PluginSdk.Features.Responses.JsonResponse})"/> and <see cref="M:HomeSeer.PluginSdk.Features.AbstractFeaturePage.UnregisterRequestCallback(System.String)"/>.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.AbstractFeaturePage.#ctor">
            <summary>
            Create a new instance of an <see cref="T:HomeSeer.PluginSdk.Features.AbstractFeaturePage"/>.
             Register the <see cref="M:HomeSeer.PluginSdk.Features.AbstractFeaturePage.IsAlive(HomeSeer.PluginSdk.Features.JsonRequest)"/> method for feature page access validation.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.AbstractFeaturePage.GetHtmlFragment(System.String)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.Features.IFeaturePage.GetHtmlFragment(System.String)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.AbstractFeaturePage.PostBackProc(System.String,System.String,System.Int32)">
            <inheritdoc cref="M:HomeSeer.PluginSdk.Features.IFeaturePage.PostBackProc(System.String,System.String,System.Int32)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.AbstractFeaturePage.RegisterRequestCallback(System.String,System.Func{HomeSeer.PluginSdk.Features.JsonRequest,HomeSeer.PluginSdk.Features.Responses.JsonResponse})">
            <summary>
            Register a callback method to be invoked when a POST request is submitted using a specific key.
            </summary>
            <param name="requestKey">The key to match the callback method to</param>
            <param name="callback">
            A method that takes a <see cref="T:HomeSeer.PluginSdk.Features.JsonRequest"/> as a single parameter and returns a <see cref="T:HomeSeer.PluginSdk.Features.Responses.JsonResponse"/>
            </param>
            <remarks>
            Calling this successive times with the same key will replace any existing callback method tied to that key.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.AbstractFeaturePage.UnregisterRequestCallback(System.String)">
            <summary>
            Unregister an existing callback method so it will not longer be executed when a request is submitted using a particular key.
            </summary>
            <param name="requestKey">The key to stop responding to</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.AbstractFeaturePage.IsAlive(HomeSeer.PluginSdk.Features.JsonRequest)">
            <summary>
            A sample callback method that can be used to validate that a page is up and responding to POSTs
            </summary>
            <param name="request">The request data submitted in the POST</param>
            <returns>Response message of "Title is alive"</returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.JsonRequest">
            <summary>
            <para>
            A POST request with JSON data from a web client to a feature page as a collection of key-value pairs
            </para>
            <para>
            Use JSON stringify to build a request in JavaScript:
            <code>
            JSON.stringify({ data: {"request" : "load-page", "key" : "value"} });
            </code>
            </para>
            </summary>
            <remarks>
            <para>
            A default handler is provided for you in the FeaturePagePost.js page. Include that file with your plugin's
             feature pages and customize it as needed. A shared version will be implemented in a future release.
            </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.JsonRequest.RequestKey">
            <summary>
            Key that identifies the type request being made
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.JsonRequest.Request">
            <summary>
            The type of request being made
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.JsonRequest.#ctor">
            <summary>
            Create a new, empty JsonRequest
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.JsonRequest.#ctor(HomeSeer.PluginSdk.Features.GenericJsonData)">
            <summary>
            Create a new JsonRequest using a set of Json data
            </summary>
            <param name="genericJsonData">The <see cref="T:HomeSeer.PluginSdk.Features.GenericJsonData"/> that describes the request</param>
            <exception cref="T:System.ArgumentNullException">Thrown when no data is provided</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when no <see cref="P:HomeSeer.PluginSdk.Features.JsonRequest.Request"/> type is defined in the data</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.GenericJsonData">
            <summary>
            Generic data collection used as a JSON object. Takes the form of {"data":{}}.
            See <see cref="T:HomeSeer.PluginSdk.Features.JsonRequest"/>, <see cref="T:HomeSeer.PluginSdk.Features.Responses.JsonResponse"/>, and <see cref="T:HomeSeer.PluginSdk.Features.Responses.JsonError"/> for basic implementation
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.GenericJsonData.Data">
            <summary>
            A collection of data keys and values
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.GenericJsonData.#ctor">
            <summary>
            Create a new GenericJsonData object
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.GenericJsonData.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new GenericJsonData object with data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.GenericJsonData.FromJson(System.String)">
            <summary>
            Deserialize a GenericJsonData object from JSON
            </summary>
            <param name="json">JSON string containing a serialized GenericJsonData</param>
            <returns>A GenericJsonData object</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.GenericJsonData.Contains(System.String)">
            <summary>
            Determine if a key exists in the data collection
            </summary>
            <param name="key">The key to look for</param>
            <returns>TRUE if the key exists in the collection, FALSE if it does not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.GenericJsonData.Get(System.String)">
            <summary>
            Get the data value for a key
            </summary>
            <param name="key">The key for the data to get</param>
            <returns>The data value corresponding to the key</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.GenericJsonData.Put(System.String,System.String)">
            <summary>
            Put a value in the data collection
            </summary>
            <param name="key">The key to map the data with</param>
            <param name="value">The data value to save</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.GenericJsonData.Remove(System.String)">
            <summary>
            Remove the value associated with a key from the data
            </summary>
            <param name="key">The key to remove from the data</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.GenericJsonData.Clear">
            <summary>
            Remove all data from the collection
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.GenericJsonData.ToJson">
            <summary>
            Serialize the data to a JSON string
            </summary>
            <returns>A JSON string</returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.IFeaturePage">
            <summary>
            The base implementation of a feature page in HS4.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.IFeaturePage.Title">
            <summary>
            The title of the page. Displayed in the plugin menu and by the browser client.
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.IFeaturePage.FileName">
            <summary>
            The name of the HTML file that backs this feature page. Ex "my-feature.html"
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.IFeaturePage.PostBackProc(System.String,System.String,System.Int32)">
            <summary>
            Respond to an HTTP POST directed at this page.
            </summary>
            <param name="data">The body of data attached to the POST</param>
            <returns>The data to return as a string. Use JSON.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.IFeaturePage.GetHtmlFragment(System.String)">
            <summary>
            Get a fragment of HTML attached to a particular ID.
            </summary>
            <param name="fragmentId">The ID of the fragment to get</param>
            <returns>A fragment of HTML</returns>
            <remarks>Used by Scriban.</remarks>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.JsonError">
            <summary>
            A POST error response for a feature page as a collection of key-value pairs 
            </summary>
            <remarks>
            <para>
            A default handler is provided for you in the FeaturePagePost.js page. Include that file with your plugin's
             feature pages and customize it as needed. A shared version will be implemented in a future release.
            </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.JsonError.ErrorKey">
            <summary>
            Key that identifies the error message data
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.Responses.JsonError.Error">
            <summary>
            The error message associated with this response
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.JsonError.#ctor">
            <summary>
            Create a new, empty JsonError
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.JsonError.#ctor(HomeSeer.PluginSdk.Features.JsonRequest,System.String)">
            <summary>
            Create a new JsonError with a specific message
            </summary>
            <param name="request">The <see cref="T:HomeSeer.PluginSdk.Features.JsonRequest"/> to base this response on</param>
            <param name="errorMessage">The error message</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no error message is provided</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.JsonError.#ctor(HomeSeer.PluginSdk.Features.GenericJsonData)">
            <summary>
            Create a new JsonError using a set of data
            </summary>
            <param name="genericJsonData">The <see cref="T:HomeSeer.PluginSdk.Features.GenericJsonData"/> that describes the error</param>
            <exception cref="T:System.ArgumentNullException">Thrown when no data is provided</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when no <see cref="P:HomeSeer.PluginSdk.Features.Responses.JsonError.Error"/> message is defined in the data</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.JsonError.CreateJson(System.String)">
            <summary>
            Generate the JSON necessary to describe a <see cref="T:HomeSeer.PluginSdk.Features.Responses.JsonError"/> based on a specified message
            </summary>
            <param name="message">The error message</param>
            <returns>A string of JSON describing a <see cref="T:HomeSeer.PluginSdk.Features.Responses.JsonError"/></returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.JsonResponse">
            <summary>
            A POST response with JSON data for a feature page as a collection of key-value pairs
            </summary>
            <remarks>
            <para>
            A default handler is provided for you in the FeaturePagePost.js page. Include that file with your plugin's
             feature pages and customize it as needed. A shared version will be implemented in a future release.
            </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.JsonResponse.ResponseKey">
            <summary>
            Key that identifies the type of response
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.Responses.JsonResponse.Response">
            <summary>
            The type of the response. This determines the behavior of the client.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.JsonResponse.#ctor">
            <summary>
            Create a new, empty JsonResponse
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.JsonResponse.#ctor(HomeSeer.PluginSdk.Features.GenericJsonData)">
            <summary>
            Create a new JsonResponse using a set of JSON data
            </summary>
            <param name="genericJsonData">The <see cref="T:HomeSeer.PluginSdk.Features.GenericJsonData"/> that describes the response</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no <see cref="P:HomeSeer.PluginSdk.Features.Responses.JsonResponse.Response"/> type is defined in the data</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.JsonResponse.#ctor(HomeSeer.PluginSdk.Features.JsonRequest,System.String)">
            <summary>
            Create a new JsonResponse based on a <see cref="T:HomeSeer.PluginSdk.Features.JsonRequest"/>
            </summary>
            <param name="request">The <see cref="T:HomeSeer.PluginSdk.Features.JsonRequest"/> to base this response on</param>
            <param name="response">The type of response</param>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction">
            <summary>
            A type of action that can be taken on a feature page using a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.Show">
            <summary>
            Show an element.
            </summary>
            <remarks>Use the <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.ShowPageAction"/> class to generate a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> using this type</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.Hide">
            <summary>
            Hide an element
            </summary>
            <remarks>Use the <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.HidePageAction"/> class to generate a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> using this type</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetText">
            <summary>
            Set the text on an element
            </summary>
            <remarks>Use the <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.SetTextPageAction"/> class to generate a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> using this type</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetHtml">
            <summary>
            Set the HTML content of an element
            </summary>
            <remarks>Use the <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.SetHtmlPageAction"/> class to generate a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> using this type</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetValue">
            <summary>
            Set the value of an element
            </summary>
            <remarks>Use the <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.SetValuePageAction"/> class to generate a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> using this type</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.NextStep">
            <summary>
            Go to the next step on an mdbootstrap stepper
            </summary>
            <remarks>Use the <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.NextStepPageAction"/> class to generate a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> using this type</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.PreviousStep">
            <summary>
            Go to the previous step on an mdbootstrap stepper
            </summary>
            <remarks>Use the <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.PreviousStepPageAction"/> class to generate a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> using this type</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetStep">
            <summary>
            Set the current step on an mdboostrap stepper
            </summary>
            <remarks>Use the <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.SetStepPageAction"/> class to generate a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> using this type</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.Callback">
            <summary>
            Callback to the plugin after waiting an amount of time
            </summary>
            <remarks>Use the <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.CallbackPageAction"/> class to generate a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> using this type</remarks>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction">
            <summary>
            An action to be executed on a feature page using javascript
            </summary>
            <seealso cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.PageActionResponse"/>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction.PageAction">
            <summary>
            The page action to take. See <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction"/> for acceptable keys
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction.Selector">
            <summary>
            The JQuery selector to use when performing the action
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction.Data">
            <summary>
            Additional data associated with the action
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction.#ctor">
            <summary>
            Create a new, empty FeaturePageAction
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new FeaturePageAction
            </summary>
            <param name="pageAction">The key for the action to take. See <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction"/></param>
            <param name="selector">The JQuery <see cref="P:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction.Selector"/> to use</param>
            <param name="data">Data to include with the action. See documentation on each action for more info.</param>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.CallbackPageAction">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> used to instruct the client to callback to the plugin after waiting a specified amount of time
            </summary>
            <remarks>
            <para>
            Uses the <a href="https://www.w3schools.com/jsref/met_win_settimeout.asp">setTimeout() method</a> to schedule a call
             to the featurePagePost JS method after a specified amount of time.
            </para>
            <para>
            The javascript that handles this is not included in the FeaturePagePost.js file by default and must be included manually.
             Add the following to the end of the switch statement in the onFeaturePagePostSuccess, replacing PUTCALLBACKURLHERE
             with the URL for your page:
            <code>
            case "callback":
                setTimeout(function() {featurePagePost(pageAction.data, PUTCALLBACKURLHERE)}, pageAction.selector);
                break;
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.CallbackPageAction.#ctor">
            <summary>
            Create a new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.Callback"/> action type
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.CallbackPageAction.#ctor(System.String,System.Int32)">
            <summary>
            Create a new instance of a <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.Callback"/>
             action type that will send the specified data blob after waiting the specified amount of time
            </summary>
            <param name="data">The data to include in the next request</param>
            <param name="timeout">The amount of time to wait, in millisecond, before making the callback request</param>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.HidePageAction">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> used to instruct the client to HIDE a specific HTML element
            </summary>
            <remarks>Uses the <a href="https://www.w3schools.com/jquery/jquery_hide_show.asp">jQuery hide() method</a></remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.HidePageAction.#ctor">
            <summary>
            Create a new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.Hide"/> action type
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.HidePageAction.#ctor(System.String)">
            <summary>
            Create new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.Hide"/> action type using a specific JQuery selector
            </summary>
            <param name="selector">The JQuery selector to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no selector is specified</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.NextStepPageAction">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> used to instruct the client to proceed to the next stepper step
            </summary>
            <remarks>Uses the <a href="https://mdbootstrap.com/docs/jquery/components/stepper">mdbootstrap stepper nextStep() method</a></remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.NextStepPageAction.#ctor">
            <summary>
            Create a new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.NextStep"/> action type
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.NextStepPageAction.#ctor(System.String)">
            <summary>
            Create new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.NextStep"/> action type using a specific JQuery selector
            </summary>
            <param name="selector">The JQuery selector to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no selector is specified</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.PageActionExtensions">
            <summary>
            Extension methods for members of the <see cref="N:HomeSeer.PluginSdk.Features.Responses.PageActions"/> namespace
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.PageActionExtensions.GetKey(HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction)">
            <summary>
            Get the page action key associated with a particular <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction"/>
            </summary>
            <param name="pageAction">The <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction"/> to get the key for</param>
            <returns>The key string used on feature page javascript for the specified <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when an invalid <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction"/> is specified</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.PageActionResponse">
            <summary>
            A POST response with JSON data for a feature page as a collection of key-value pairs that describes a series of
             actions that will be executed by JavaScript
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Features.Responses.PageActions.PageActionResponse.PageActionsKey">
            <summary>
            The key for the collection of actions to execute
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.Features.Responses.PageActions.PageActionResponse.PageActions">
            <summary>
            A collection of <see cref="P:HomeSeer.PluginSdk.Features.Responses.PageActions.PageActionResponse.PageActions"/> to execute on the Feature Page
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.PageActionResponse.#ctor">
            <summary>
            Create a new, empty PageActionReponse
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.PageActionResponse.#ctor(HomeSeer.PluginSdk.Features.JsonRequest)">
            <summary>
            Create a new PageActionResponse based on a received <see cref="T:HomeSeer.PluginSdk.Features.JsonRequest"/>
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.PreviousStepPageAction">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> used to instruct the client to return to the previous stepper step
            </summary>
            <remarks>Uses the <a href="https://mdbootstrap.com/docs/jquery/components/stepper">mdbootstrap stepper prevStep() method</a></remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.PreviousStepPageAction.#ctor">
            <summary>
            Create a new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.PreviousStep"/> action type
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.PreviousStepPageAction.#ctor(System.String)">
            <summary>
            Create new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.PreviousStep"/> action type using a specific JQuery selector
            </summary>
            <param name="selector">The JQuery selector to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no selector is specified</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.SetHtmlPageAction">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> used to instruct the client to set the HTML for an HTML element
            </summary>
            <remarks>Uses the <a href="https://www.w3schools.com/jquery/html_html.asp">jQuery html() method</a></remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.SetHtmlPageAction.#ctor">
            <summary>
            Create a new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetHtml"/> action type
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.SetHtmlPageAction.#ctor(System.String,System.String)">
            <summary>
            Create new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetHtml"/> action type using a specific JQuery selector
            </summary>
            <param name="selector">The JQuery selector to use</param>
            <param name="html">The html to set on the element</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no selector is specified</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.SetStepPageAction">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> used to instruct the client to go to a particular stepper step
            </summary>
            <remarks>Uses the <a href="https://mdbootstrap.com/docs/jquery/components/stepper">mdbootstrap stepper setStep() method</a></remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.SetStepPageAction.#ctor">
            <summary>
            Create a new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetStep"/> action type
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.SetStepPageAction.#ctor(System.String)">
            <summary>
            Create new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetStep"/> action type using a specific JQuery selector
            </summary>
            <param name="selector">The JQuery selector to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no selector is specified</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.SetTextPageAction">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> used to instruct the client to set the text for an HTML element
            </summary>
            <remarks>Uses the <a href="https://www.w3schools.com/jquery/html_text.asp">jQuery text() method</a></remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.SetTextPageAction.#ctor">
            <summary>
            Create a new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetText"/> action type
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.SetTextPageAction.#ctor(System.String,System.String)">
            <summary>
            Create new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetText"/> action type using a specific JQuery selector
            </summary>
            <param name="selector">The JQuery selector to use</param>
            <param name="text">The text to set on the element</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no selector is specified</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.SetValuePageAction">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> used to instruct the client to set the value for an HTML element
            </summary>
            <remarks>Uses the <a href="https://www.w3schools.com/jquery/html_val.asp">jQuery val() method</a></remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.SetValuePageAction.#ctor">
            <summary>
            Create a new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetValue"/> action type
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.SetValuePageAction.#ctor(System.String,System.String)">
            <summary>
            Create new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.SetValue"/> action type using a specific JQuery selector
            </summary>
            <param name="selector">The JQuery selector to use</param>
            <param name="value">The value to set on the element</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no selector is specified</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.Features.Responses.PageActions.ShowPageAction">
            <summary>
            A <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> used to instruct the client to show a specific HTML element
            </summary>
            <remarks>Uses the <a href="https://www.w3schools.com/jquery/jquery_hide_show.asp">jQuery show() method</a></remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.ShowPageAction.#ctor">
            <summary>
            Create a new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.Show"/> action type
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.Features.Responses.PageActions.ShowPageAction.#ctor(System.String)">
            <summary>
            Create new <see cref="T:HomeSeer.PluginSdk.Features.Responses.PageActions.FeaturePageAction"/> with the <see cref="F:HomeSeer.PluginSdk.Features.Responses.PageActions.EPageAction.Show"/> action type using a specific JQuery selector
            </summary>
            <param name="selector">The JQuery selector to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no selector is specified</exception>
        </member>
        <member name="T:HomeSeer.PluginSdk.IHsController">
            <summary>
            The interface used by plugins to communicate with the HomeSeer software
            <para>
            An instance of this interface is automatically provided to an AbstractPlugin when AbstractPlugin.Connect(string[]) is called.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IHsController.APIVersion">
            <summary>
            The current version of the HomeSeer Plugin API
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IHsController.DeviceCount">
            <summary>
            The number of devices connected to the HomeSeer system
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RegisterPlugin(System.String,System.String)">
            <summary>
            Register a new plugin with HomeSeer
            <para>
            This will add the specified ID/filename pair to HomeSeer's list of plugins to check when it runs through
             the plugin initialization process.
            </para>
            </summary>
            <param name="pluginId">The ID of the plugin to register</param>
            <param name="pluginName">The name of the plugin to register</param>
            <returns>
            TRUE if the plugin was registered successfully;
             FALSE if there was a problem with registration
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.ClearIniSection(System.String,System.String)">
            <summary>
            Clear all of the settings saved in a section in a specific file
            </summary>
            <param name="sectionName">The section to clear</param>
            <param name="fileName">The name of the INI file to edit</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetINISetting(System.String,System.String,System.String,System.String)">
            <summary>
            Get the value of the setting saved to INI file
            </summary>
            <param name="sectionName">The name of the section the setting is saved to</param>
            <param name="key">The key of the setting</param>
            <param name="defaultVal">A default value to use if the setting was not previously saved</param>
            <param name="fileName">The name of the INI file to search</param>
            <returns></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SaveINISetting(System.String,System.String,System.String,System.String)">
            <summary>
            Save the new value of a setting
            </summary>
            <param name="sectionName">The name of the section the setting is saved to</param>
            <param name="key">The key of the setting</param>
            <param name="value">The value to save</param>
            <param name="fileName">The name of the INI file to save the setting to</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetIniSection(System.String,System.String)">
            <summary>
            Get a key-value map of settings saved in the specified section of the INI file
            </summary>
            <param name="section">The section to get</param>
            <param name="fileName">The name of the INI file</param>
            <returns>A Dictionary of setting keys and values</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RegisterFeaturePage(System.String,System.String,System.String)">
            <summary>
            Register a feature page to create a link to it in the navigation menu in HomeSeer.
            <para>
            The PluginFilename must end with .html and not include the enclosing folder name.
              The page must exist in the HomeSeer html folder as: PluginID/PluginFilename
            </para>
            </summary>
            <param name="pluginId">The ID of the plugin</param>
            <param name="pageFilename">The filename of the page, ending with .html</param>
            <param name="linkText">The text that appears in the navigation menu</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UnregisterFeaturePage(System.String,System.String)">
            <summary>
            Unregister a feature page to remove any navigation links to the page.
            </summary>
            <param name="pluginId">The ID of the plugin</param>
            <param name="pageFilename">
            The filename of the page, ending with .html.
              This must be exactly the same as the filename used to register the page</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RegisterDeviceIncPage(System.String,System.String,System.String)">
            <summary>
            Register a page as the device inclusion process guide for this plugin.
            <para>
            There can only be one device inclusion process for each plugin.
              The page that is tagged as the device inclusion process will be displayed first in
             the list of features for the plugin and be shown in the list of devices users can add.
            </para>
            </summary>
            <param name="pluginId">The ID of the plugin</param>
            <param name="pageFilename">The filename of the page, ending with .html</param>
            <param name="linkText">The text that appears in the navigation menu</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UnregisterDeviceIncPage(System.String)">
            <summary>
            Unregister the device inclusion page for this plugin.
            </summary>
            <param name="pluginId">The ID of the plugin</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.CreateDevice(HomeSeer.PluginSdk.Devices.NewDeviceData)">
            <summary>
            Create a new device in HomeSeer
            </summary>
            <param name="deviceData">
            <see cref="T:HomeSeer.PluginSdk.Devices.NewDeviceData"/> describing the device produced by <see cref="T:HomeSeer.PluginSdk.Devices.DeviceFactory"/>
            </param>
            <returns>The unique reference ID assigned to the device</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.CreateFeatureForDevice(HomeSeer.PluginSdk.Devices.NewFeatureData)">
            <summary>
            Create a new feature on a device in HomeSeer
            </summary>
            <param name="featureData">
            <see cref="T:HomeSeer.PluginSdk.Devices.NewFeatureData"/> describing the feature produced by <see cref="T:HomeSeer.PluginSdk.Devices.FeatureFactory"/>
            </param>
            <returns>The unique reference ID assigned to the feature</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetRefsByInterface(System.String,System.Boolean)">
            <summary>
            Get a list of device/feature references that are associated with the specified plugin interface
            </summary>
            <param name="interfaceName">The ID of the plugin interface to get devices and features for</param>
            <param name="deviceOnly"> Whether to get refs for devices or both devices and features</param>
            <returns>A list of device/feature reference IDs</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetPropertyByInterface(System.String,HomeSeer.PluginSdk.Devices.EProperty,System.Boolean)">
            <summary>
            Get a map containing the value of a specific property for every device owned by a particular plugin
            </summary>
            <param name="interfaceName">The ID of the plugin that owns the devices</param>
            <param name="property">The EProperty type to read</param>
            <param name="deviceOnly">Whether the result should only contain devices or both devices and features</param>
            <returns>A Dictionary of device/feature refs and the value of the EProperty requested</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetNameByRef(System.Int32)">
            <summary>
            Get the name of a specific device/feature by its <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/>
            </summary>
            <param name="devOrFeatRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>The name of the device/feature with the matching <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DoesRefExist(System.Int32)">
            <summary>
            Determine if a specific device/feature <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> exists in the HomeSeer system
            </summary>
            <param name="devOrFeatRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>TRUE if the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> exists, FALSE if it does not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetPropertyByRef(System.Int32,HomeSeer.PluginSdk.Devices.EProperty)">
            <summary>
            Get the value of the <see cref="T:HomeSeer.PluginSdk.Devices.EProperty"/> for the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> with the specified <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> 
            </summary>
            <param name="devOrFeatRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <param name="property">The <see cref="T:HomeSeer.PluginSdk.Devices.EProperty"/> to read</param>
            <returns>The value of the requested <see cref="T:HomeSeer.PluginSdk.Devices.EProperty"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.IsFlagOnRef(System.Int32,HomeSeer.PluginSdk.Devices.EMiscFlag)">
            <summary>
            Determine if a <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/> is turned on for a particular <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/>
            </summary>
            <param name="devOrFeatRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <param name="miscFlag">The <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/> to read</param>
            <returns>TRUE if the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> found contains the specified <see cref="T:HomeSeer.PluginSdk.Devices.EMiscFlag"/>, FALSE if it doesn't</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.IsRefDevice(System.Int32)">
            <summary>
            Determine if the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> with the specified <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> is a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> or a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> of a device
            </summary>
            <param name="devOrFeatRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>TRUE if the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> found is a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>, FALSE if it is a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetAllRefs">
            <summary>
            Get a list of all of the device and feature refs present in the HomeSeer system
            <para>
            To get just a list of devices, call <see cref="M:HomeSeer.PluginSdk.IHsController.GetAllDeviceRefs"/>
             or to get a list of features, call <see cref="M:HomeSeer.PluginSdk.IHsController.GetAllFeatureRefs"/>
            </para>
            </summary>
            <returns>A list of integers corresponding to the device and feature refs managed by the HomeSeer system</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetDeviceByRef(System.Int32)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> as a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> with the specified <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/>.
             The <see cref="P:HomeSeer.PluginSdk.Devices.HsDevice.Features"/> property will be empty. To include <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>s use <see cref="M:HomeSeer.PluginSdk.IHsController.GetDeviceWithFeaturesByRef(System.Int32)"/>
            </summary>
            <remarks>
            Calling this using the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> may have adverse effects.
            </remarks>
            <param name="devRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> whether it is a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Device"/> or <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Feature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetDeviceWithFeaturesByRef(System.Int32)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> as a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> with the specified <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/>.
             The <see cref="P:HomeSeer.PluginSdk.Devices.HsDevice.Features"/> property will be populated with associated features.
            </summary>
            <remarks>
            Calling this using the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> may have adverse effects.
            </remarks>
            <param name="devRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> whether it is a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Device"/> or <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Feature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetDeviceByAddress(System.String)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> as a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> with the specified <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/>.
             The <see cref="P:HomeSeer.PluginSdk.Devices.HsDevice.Features"/> property will be empty. To include <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>s use <see cref="M:HomeSeer.PluginSdk.IHsController.GetDeviceWithFeaturesByRef(System.Int32)"/>
            </summary>
            <remarks>
            Calling this using the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> of a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> may have adverse effects.
            </remarks>
            <param name="devAddress">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> whether it is a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Device"/> or <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Feature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetDeviceByCode(System.String)">
            <summary>
            Get the first <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> found as a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> with the specified Code.
            </summary>
            <remarks>
            Calling this using the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> of a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> may have adverse effects.
            </remarks>
            <remarks>
            The Code field was used in HS3 and has been deprecated since. This method is for backwards compatibility support.
            </remarks>
            <param name="devCode">The Code of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> whether it is a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Device"/> or <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Feature"/></returns>
            <seealso cref="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.GetCodeFromAddressString(System.String)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetAllDeviceRefs">
            <summary>
            Get a list of all of the device refs present in the HomeSeer system
            <para>
            This does not include refs for features. To get those in addition to these, use <see cref="M:HomeSeer.PluginSdk.IHsController.GetAllRefs"/>
             or call <see cref="M:HomeSeer.PluginSdk.IHsController.GetAllFeatureRefs"/> to get a list of just features
            </para>
            </summary>
            <returns>A list of integers corresponding to the device refs managed by the HomeSeer system</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetAllDevices(System.Boolean)">
            <summary>
            Get a list of all of the devices managed by the HomeSeer system without associated features.
            <para>
            WARNING - this is an expensive method to execute and it should be used with the utmost discretion
            </para>
            </summary>
            <param name="withFeatures">
            TRUE if associated features should be attached to their devices,
             or FALSE if features should be left out.
            </param>
            <returns>
            A list of <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>s managed by the HomeSeer system with or without associated features linked.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetFeatureByRef(System.Int32)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> as a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> with the specified <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/>.
            </summary>
            <remarks>
            Calling this using the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> may have adverse effects.
            </remarks>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> whether it is a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Device"/> or <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Feature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetFeatureByAddress(System.String)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> as a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> with the specified <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/>.
            </summary>
            <remarks>
            Calling this using the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> of a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> may have adverse effects.
            </remarks>
            <param name="featAddress">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> whether it is a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Device"/> or <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Feature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetFeatureByCode(System.String)">
            <summary>
            Get the first <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> found as a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> with the specified Code.
            </summary>
            <remarks>
            Calling this using the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> of a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> may have adverse effects.
            </remarks>
            <remarks>
            The Code field was used in HS3 and has been deprecated since. This method is for backwards compatibility support.
            </remarks>
            <param name="featCode">The Code of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> whether it is a <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Device"/> or <see cref="F:HomeSeer.PluginSdk.Devices.Identification.ERelationship.Feature"/></returns>
            <seealso cref="M:HomeSeer.PluginSdk.Devices.AbstractHsDevice.GetCodeFromAddressString(System.String)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.IsFeatureValueValid(System.Int32)">
            <summary>
            Determine if the current status value of a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> is considered valid.
             This calls <see cref="M:HomeSeer.PluginSdk.Devices.HsFeature.IsValueValid"/> on the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to determine validity.
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to read</param>
            <returns>The result of <see cref="M:HomeSeer.PluginSdk.Devices.HsFeature.IsValueValid"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetAllFeatureRefs">
            <summary>
            Get a list of all of the feature refs present in the HomeSeer system
            <para>
            This does not include refs for devices. To get those in addition to these, use <see cref="M:HomeSeer.PluginSdk.IHsController.GetAllRefs"/>
             or call <see cref="M:HomeSeer.PluginSdk.IHsController.GetAllDeviceRefs"/> to get a list of just devices
            </para>
            </summary>
            <returns>A list of integers corresponding to the feature refs managed by the HomeSeer system</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetStatusControlForValue(System.Int32,System.Double)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> for a value on an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <param name="value">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/> managed by the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/></param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> that manages the value specified for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetStatusControlForLabel(System.Int32,System.String)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> for a <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Label"/> on an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <param name="label">The <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Label"/> used by the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/></param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> with the specified <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.Label"/> for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetStatusControlsForRange(System.Int32,System.Double,System.Double)">
            <summary>
            Get a list of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s for a range of values on an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <param name="min">The minimum value of the range</param>
            <param name="max">The maximum value of the range</param>
            <returns>A list  of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s for a range of values on the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetStatusControlCountByRef(System.Int32)">
            <summary>
            Get the number of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s associated with an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>The number of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetStatusControlsByRef(System.Int32)">
            <summary>
            Get a list of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s associated with an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>The list of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetStatusControlCollectionByRef(System.Int32)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection"/> describing all of the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s associated with
             an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControlCollection"/> for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetStatusGraphicForValue(System.Int32,System.Double)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> for a value on an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <param name="value">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Value"/> managed by the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/></param>
            <returns>A <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> that manages the value specified for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetStatusGraphicsForRange(System.Int32,System.Double,System.Double)">
            <summary>
            Get a list of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s for a range of values on an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <param name="min">The minimum value of the range</param>
            <param name="max">The maximum value of the range</param>
            <returns></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetStatusGraphicCountByRef(System.Int32)">
            <summary>
            Get the number of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s associated with an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>The number of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetStatusGraphicsByRef(System.Int32)">
            <summary>
            Get a list of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s associated with an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to read</param>
            <returns>The list of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s for the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UpdateDeviceByRef(System.Int32,System.Collections.Generic.Dictionary{HomeSeer.PluginSdk.Devices.EProperty,System.Object})">
            <summary>
            <para>
            Update some properties on a device
            </para>
            <para>
            The collection of changes passed as parameter is usually <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Changes"/>
            </para>
            </summary>
            <param name="devRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> to update</param>
            <param name="changes">A collection of <see cref="T:HomeSeer.PluginSdk.Devices.EProperty"/> with their new values</param>
            <returns>The updated <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UpdateFeatureByRef(System.Int32,System.Collections.Generic.Dictionary{HomeSeer.PluginSdk.Devices.EProperty,System.Object})">
            <summary>
            <para>
            Update some properties on a feature
            </para>
            <para>
            The collection of changes passed as parameter is usually <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Changes"/>
            </para>
            </summary>
            <remarks>
            Do not use this method to update <see cref="F:HomeSeer.PluginSdk.Devices.EProperty.StatusControls"/> or <see cref="F:HomeSeer.PluginSdk.Devices.EProperty.StatusGraphics"/>.
            Instead, use <see cref="M:HomeSeer.PluginSdk.IHsController.AddStatusControlToFeature(System.Int32,HomeSeer.PluginSdk.Devices.Controls.StatusControl)"/>, <see cref="M:HomeSeer.PluginSdk.IHsController.DeleteStatusControlByValue(System.Int32,System.Double)"/>, <see cref="M:HomeSeer.PluginSdk.IHsController.ClearStatusControlsByRef(System.Int32)"/>,
            <see cref="M:HomeSeer.PluginSdk.IHsController.AddStatusGraphicToFeature(System.Int32,HomeSeer.PluginSdk.Devices.StatusGraphic)"/>, <see cref="M:HomeSeer.PluginSdk.IHsController.DeleteStatusGraphicByValue(System.Int32,System.Double)"/>, <see cref="M:HomeSeer.PluginSdk.IHsController.ClearStatusGraphicsByRef(System.Int32)"/>
            </remarks>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to update</param>
            <param name="changes">A collection of <see cref="T:HomeSeer.PluginSdk.Devices.EProperty"/> with their new values</param>
            <returns>The updated <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UpdatePropertyByRef(System.Int32,HomeSeer.PluginSdk.Devices.EProperty,System.Object)">
            <summary>
            <para>
            Update one property on a device or a feature
            </para>
            <para>
            When used with <see cref="F:HomeSeer.PluginSdk.Devices.EProperty.Value"/>, this is the same as the legacy method SetDeviceValueByRef(Integer, Double, False).
            This does not fire a control event to the owning <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Interface"/>.
             Use <see cref="M:HomeSeer.PluginSdk.IHsController.SendControlForFeatureByValue(System.Int32,System.Double)"/> to control a device you do not own.
            </para>
            </summary>
            <remarks>
            Do not use this method to update <see cref="F:HomeSeer.PluginSdk.Devices.EProperty.StatusControls"/> or <see cref="F:HomeSeer.PluginSdk.Devices.EProperty.StatusGraphics"/>.
            Instead, use <see cref="M:HomeSeer.PluginSdk.IHsController.AddStatusControlToFeature(System.Int32,HomeSeer.PluginSdk.Devices.Controls.StatusControl)"/>, <see cref="M:HomeSeer.PluginSdk.IHsController.DeleteStatusControlByValue(System.Int32,System.Double)"/>, <see cref="M:HomeSeer.PluginSdk.IHsController.ClearStatusControlsByRef(System.Int32)"/>,
            <see cref="M:HomeSeer.PluginSdk.IHsController.AddStatusGraphicToFeature(System.Int32,HomeSeer.PluginSdk.Devices.StatusGraphic)"/>, <see cref="M:HomeSeer.PluginSdk.IHsController.DeleteStatusGraphicByValue(System.Int32,System.Double)"/>, <see cref="M:HomeSeer.PluginSdk.IHsController.ClearStatusGraphicsByRef(System.Int32)"/>
            </remarks>
            <param name="devOrFeatRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/> to update</param>
            <param name="property">The <see cref="T:HomeSeer.PluginSdk.Devices.EProperty"/> to update</param>
            <param name="value">The new value for this property</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UpdateFeatureValueByRef(System.Int32,System.Double)">
            <summary>
            <para>
            Set the value on a feature and trigger HomeSeer to process the update to update the status accordingly.
            </para>
            <para>
            To update the value without triggering HomeSeer to process the update, call
             <see cref="M:HomeSeer.PluginSdk.IHsController.UpdatePropertyByRef(System.Int32,HomeSeer.PluginSdk.Devices.EProperty,System.Object)"/>
            </para>
            <para>
            This does not fire a control event to the owning <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Interface"/>.
             Use <see cref="M:HomeSeer.PluginSdk.IHsController.SendControlForFeatureByValue(System.Int32,System.Double)"/> to control a device you do not own.
            </para>
            </summary>
            <remarks>
            This is the same as the legacy method SetDeviceValueByRef(Integer, Double, True).
            </remarks>
            <param name="featRef">The unique reference of the feature to control</param>
            <param name="value">The new value to set on the feature</param>
            <returns>TRUE if the control sent correctly, FALSE if there was a problem</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UpdateFeatureValueStringByRef(System.Int32,System.String)">
            <summary>
            <para>
            Set the value on a feature by string and trigger HomeSeer to process the update to update the status
             accordingly
            </para>
            <para>
            This does not fire a control event to the owning <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Interface"/>.
             Use <see cref="M:HomeSeer.PluginSdk.IHsController.SendControlForFeatureByValue(System.Int32,System.Double)"/> to control a device you do not own.
            </para>
            </summary>
            <remarks>
            This is the same as the legacy method SetDeviceString(Integer, String, True)
            </remarks>
            <param name="featRef">The unique reference of the feature to control</param>
            <param name="value">The new value to set on the feature</param>
            <returns>TRUE if the control sent correctly, FALSE if there was a problem</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.AddStatusControlToFeature(System.Int32,HomeSeer.PluginSdk.Devices.Controls.StatusControl)">
            <summary>
            Add a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to the collection of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s associated with an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to update</param>
            <param name="statusControl">The <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to add</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteStatusControlByValue(System.Int32,System.Double)">
            <summary>
            Delete a <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> in the collection of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s associated with an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to update</param>
            <param name="value">The value of the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to delete</param>
            <returns>true if the deletion succeeded, otherwise false</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.ClearStatusControlsByRef(System.Int32)">
            <summary>
            Delete all <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s associated with an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to update</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.AddStatusGraphicToFeature(System.Int32,HomeSeer.PluginSdk.Devices.StatusGraphic)">
            <summary>
            Add a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> to the collection of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s associated with an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to update</param>
            <param name="statusGraphic">The <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> to add</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteStatusGraphicByValue(System.Int32,System.Double)">
            <summary>
            Delete a <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> in the collection of <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s associated with an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to update</param>
            <param name="value">The value of the <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/> to delete</param>
            <returns>true if the deletion succeeded, otherwise false</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.ClearStatusGraphicsByRef(System.Int32)">
            <summary>
            Delete all <see cref="T:HomeSeer.PluginSdk.Devices.StatusGraphic"/>s associated with an <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to update</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteDevice(System.Int32)">
            <summary>
            Delete the <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> with the specified <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> and all
             other <see cref="T:HomeSeer.PluginSdk.Devices.AbstractHsDevice"/>s associated with it.
            </summary>
            <param name="devRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> to delete</param>
            <returns>
            TRUE if the <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> was deleted, FALSE if there was an error.
             Check the HS logs for more info on the error.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified <paramref name="devRef"/> refers to a <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> and
             not a <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/>.
            </exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteFeature(System.Int32)">
            <summary>
            Delete the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> with the specified <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/>
            </summary>
            <param name="featRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> to delete</param>
            <returns>
            TRUE if the <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> was deleted, FALSE if there was an error.
             Check the HS logs for more info on the error.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteDevicesByInterface(System.String)">
            <summary>
            Delete all devices, and their corresponding features, from the HomeSeer system that are managed by
             the specified plugin interface
            </summary>
            <param name="interfaceName">
            The name of the interface that owns all of the devices and features to delete. This is usually the plugin Id
            </param>
            <returns>TRUE if the delete was successful, FALSE if there was a problem during the process.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SendControlForFeatureByValue(System.Int32,System.Double)">
            <summary>
            <para>
            Send a control request through HomeSeer to the <see cref="M:HomeSeer.PluginSdk.AbstractPlugin.SetIOMulti(System.Collections.Generic.List{HomeSeer.PluginSdk.Devices.Controls.ControlEvent})"/> implementation for
             the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Interface"/> that owns the device.
            </para>
            <para>
            If you own the device being controlled, you should be calling <see cref="M:HomeSeer.PluginSdk.IHsController.UpdateFeatureValueByRef(System.Int32,System.Double)"/>,
             <see cref="M:HomeSeer.PluginSdk.IHsController.UpdateFeatureValueStringByRef(System.Int32,System.String)"/>, or <see cref="M:HomeSeer.PluginSdk.IHsController.UpdatePropertyByRef(System.Int32,HomeSeer.PluginSdk.Devices.EProperty,System.Object)"/> respectively.
            </para> 
            </summary>
            <remarks>
            This is the same as the legacy method CAPIControlHandler(CAPIControl)
            </remarks>
            <param name="devOrFeatRef">
            The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the device or feature to control. You should only be pointing at
             <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> instead of its <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> for legacy devices.
            </param>
            <param name="value">
            The value corresponding with the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/> or
             <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange"/> to send a control event for
            </param>
            <returns>True if the control event succeeded, False if an error was reported</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SendControlForFeatureByString(System.Int32,System.Double,System.String)">
            <summary>
            <para>
            Send a control request through HomeSeer to the <see cref="M:HomeSeer.PluginSdk.AbstractPlugin.SetIOMulti(System.Collections.Generic.List{HomeSeer.PluginSdk.Devices.Controls.ControlEvent})"/> implementation for
             the <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Interface"/> that owns the device.
             This is different than <see cref="M:HomeSeer.PluginSdk.IHsController.SendControlForFeatureByValue(System.Int32,System.Double)"/> because the value that describes the
             desired control outcome is encoded into a string and cannot be described by a double.
            </para>
            <para>
            If you own the device being controlled, you should be calling <see cref="M:HomeSeer.PluginSdk.IHsController.UpdateFeatureValueByRef(System.Int32,System.Double)"/>,
             <see cref="M:HomeSeer.PluginSdk.IHsController.UpdateFeatureValueStringByRef(System.Int32,System.String)"/>, or <see cref="M:HomeSeer.PluginSdk.IHsController.UpdatePropertyByRef(System.Int32,HomeSeer.PluginSdk.Devices.EProperty,System.Object)"/> respectively.
            </para>
            </summary>
            <remarks>
            This is the same as the legacy method CAPIControlHandler(CAPIControl)
            <para>
            Most simple features use a single value within a range of decimal numbers to control their state.
            These situations can easily be hardcoded as <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s allowing HomeSeer to automatically
             handle processing control requests tied to these values. IE A dimmable light uses a value of 0-100
             to determine what state it is in. This usually requires 3 <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s:
             one for off (0), one for a variable on state (1-99), and one for full brightness (100)
            This does not work well for values that cannot be described by a range of decimal numbers or require more
             than a handful of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s.
            When a more complex data value is required to describe the desired state to set the feature to,
             a string is used. IE the color of a light uses a value from 0-16777216.
            That requires 16777216 different <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/>s. It is more efficient to send the raw value
             to the handling plugin for processing.
            </para> 
            </remarks>
            <param name="devOrFeatRef">
            The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the device or feature to control. You should only be pointing at
             <see cref="T:HomeSeer.PluginSdk.Devices.HsDevice"/> instead of its <see cref="T:HomeSeer.PluginSdk.Devices.HsFeature"/> for legacy devices.
            </param>
            <param name="controlValue">
            The value corresponding with the <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetValue"/> or
             <see cref="P:HomeSeer.PluginSdk.Devices.Controls.StatusControl.TargetRange"/> of the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.StatusControl"/> to select
             and include in the <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlEvent"/> being sent to the owning plugin.
            </param>
            <param name="controlString">
            The desired value to send to the control for processing. This is passed to <see cref="P:HomeSeer.PluginSdk.Devices.Controls.ControlEvent.ControlString"/>
            </param>
            <returns>True if the control event succeeded, False if an error was reported</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.CreateEventWithNameInGroup(System.String,System.String)">
            <summary>
            Create a new event with a specific name in a particular group
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="name">The name of the new event</param>
            <param name="group">The group to add the event to</param>
            <returns>The Ref of the new event</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetEventNameByRef(System.Int32)">
            <summary>
            Get the name of the event with the specific Ref
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="eventRef">The Ref of the event to read</param>
            <returns>The name of the event</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetEventTriggerTime(System.Int32)">
            <summary>
            Get the DateTime of the last time a specific event was triggered
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="evRef">The Ref of the event to read</param>
            <returns>The DateTime the event was last triggered</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetEventVoiceCommand(System.Int32)">
            <summary>
            Get the voice command attached to an event
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="evRef">The Ref of the event to read</param>
            <returns>The voice command string set on the event</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetEventRefByName(System.String)">
            <summary>
            Get the Ref of an event by name
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="eventName">The name of the event to read</param>
            <returns>The Ref of the event</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetEventRefByNameAndGroup(System.String,System.String)">
            <summary>
            Get the Ref of an event by its name and the group it is in
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="eventName">The name of the event</param>
            <param name="eventGroup">The name of the group</param>
            <returns>The Ref of the event</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetEventGroupById(System.Int32)">
            <summary>
            Get the data for an event group
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="groupRef">The Ref of the group</param>
            <returns>The data of the event group</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetAllEventGroups">
            <summary>
            Get the data for all event groups
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <returns>A list of all of the event groups</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetEventByRef(System.Int32)">
            <summary>
            Get the data for an event
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="eventRef">The Ref of the event</param>
            <returns>The data of the event</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetAllEvents">
            <summary>
            Get the data for all of the events
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <returns>A list of all of the events</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetEventsByGroup(System.Int32)">
            <summary>
            Get all of the events in a particular group
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="groupId">The Ref of the event group</param>
            <returns>A list of all of the events in the event group</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetActionsByInterface(System.String)">
            <summary>
            Get all of the event actions managed by a specific plugin
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="pluginId">The ID of the plugin
            <remarks>If you are targeting a actiona owned by a legacy plugin, use the IPlugInAPI.Name of the plugin for <paramref name="pluginId"/></remarks>
            </param>
            <returns>A list of all of the actions managed by the plugin</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.IsEventLoggingEnabledByRef(System.Int32)">
            <summary>
            Determine if logging is enabled on an event
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="eventRef">The Ref of the event</param>
            <returns>TRUE if logging is enabled for the event</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.EventEnabled(System.Int32)">
            <summary>
            Determine if an event is enabled or not
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="evRef">The Ref of the event</param>
            <returns>TRUE if the event is enabled</returns>
        </member>
        <member name="P:HomeSeer.PluginSdk.IHsController.EventCount">
            <summary>
            The number of events configured on the HomeSeer system
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.EventExistsByRef(System.Int32)">
            <summary>
            Determine if an event with a particular Ref exists
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="evRef">The Ref of the event</param>
            <returns>TRUE if an event with the specified Ref exists</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetTriggersByInterface(System.String)">
            <summary>
            Get all of the triggers managed by a specific plugin
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="pluginId">The ID of the plugin
            <remarks>If you are targeting triggers owned by a legacy plugin, use the IPlugInAPI.Name of the plugin for <paramref name="pluginId"/></remarks>
            </param>
            <returns>An array of triggers managed by the plugin</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.TriggerEventByRef(System.Int32)">
            <summary>
            Run an event causing it to execute its actions
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="eventRef">The Ref of the event</param>
            <returns>TRUE if the event run started successfully. This does not indicate that the actions succeeded.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.AddDeviceActionToEvent(System.Int32,HomeSeer.PluginSdk.Devices.Controls.ControlEvent)">
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.EventSetTimeTrigger(System.Int32,System.DateTime)">
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.EventSetRecurringTrigger(System.Int32,System.TimeSpan,System.Boolean,System.Boolean)">
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.AddActionRunScript(System.Int32,System.String,System.String,System.String)">
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DisableEventByRef(System.Int32)">
            <summary>
            Disable an event
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="evRef">The Ref of the event to disable</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteAfterTrigger_Set(System.Int32)">
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.EnableEventByRef(System.Int32)">
            <summary>
            Enable an event
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="evref">The Ref of the event to enable</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteAfterTrigger_Clear(System.Int32)">
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UpdatePlugAction(System.String,System.Int32,HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Update the data saved to an event action
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="plugId">The ID of the plugin that owns the action
            <remarks>If you are targeting an action owned by a legacy plugin, use the IPlugInAPI.Name of the plugin for <paramref name="plugId"/></remarks>
            </param>
            <param name="evRef">The Ref of the event</param>
            <param name="actInfo">The data to save to the event action</param>
            <returns>A message describing the result. Empty if it was successful</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UpdatePlugTrigger(System.String,System.Int32,HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Update an existing plugin trigger in an event
            </summary>
            <param name="plugId">The ID of the plugin that owns the trigger
            <remarks>If you are targeting a trigger owned by a legacy plugin, use the IPlugInAPI.Name of the plugin for <paramref name="plugId"/></remarks>
            </param>
            <param name="evRef">Reference # of the event to modify</param>
            <param name="trigInfo">The TrigActInfo that is to replace the existing trigger. The UID 
            in this structure must match the UID in the original trigger</param>
            <returns>Returns an empty string on success or an error message</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteEventByRef(System.Int32)">
            <summary>
            Delete an event
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="evRef">The Ref of the event to delete</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RegisterGenericEventCB(System.String,System.String)">
            <summary>
            HomeSeer has the ability to raise events in applications and plug-ins when one of a list of specific
             events in HomeSeer occurs (See RegisterEventCB).  RegisterGenericEventCB allows an application or
             plug-in writer the opportunity to have custom events raised and to enable other applications and plug-ins
             to receive those callbacks. To remove the callback script, call UnRegisterGenericEventCB.
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="genericType">
            This is a string that identifies the callback.  For example, a type of "MyPlugEvent" would mean that calls
             to RaiseGenericEventCB using something other than "MyPlugEvent" would be ignored. This string should be
             unique, and should be provided to all applications wishing to register to receive these callbacks.
             A special value of a single asterisk (*) can be used to indicate that you wish to receive ALL generic
             type callbacks from other plug-ins/applications.
            </param>
            <param name="pluginId">The ID of the plugin to call</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UnRegisterGenericEventCB(System.String,System.String)">
            <summary>
            This will remove an application or plug-in from the list that should receive generic event callbacks
             for the type indicated (See RegisterGenericEventCB).
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="genericType">This is the generic type string that was used to register the callback with RegisterGenericEventCB.</param>
            <param name="pluginId">The ID of the plugin remove from the callback listen</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RaiseGenericEventCB(System.String,System.Object[],System.String)">
            <summary>
            When an application or plug-in registers to receive specific types of generic HSEvent callbacks,
             this procedure is used to raise those callbacks and send information to that application.
             See RegisterGenericEventCB , UnRegisterGenericEventCB ,and HSEvent  information for more details.
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="genericType">
            This is the generic type name that was used when the receiving plug-in or application called RegisterGenericEventCB.
             If you know that the plug-in or application that you wish to raise the generic event with used an asterisk
             as the Generic Type, then you can use any text here as that plug-in will receive all generic event callbacks.
            </param>
            <param name="parms">
            These are parameters that you wish to be passed to the receiving application.
             As an array of objects, it can contain strings, integers, other objects, etc.
            </param>
            <param name="pluginId">The ID of the plugin</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RegisterEventCB(HomeSeer.PluginSdk.Constants.HSEvent,System.String)">
            <summary>
            Call this function when your plugin initializes to notify HomeSeer that you want to be called when a
             specific event happens. The normal use for this is to be notified when a device changes value or
             it's displayed string changes. You will be notified about any device change, not just changes to
             your own devices. However, if your device is controlled and your SetIOMulti() call is made, after you
             call back with hs.SetDeviceValueByRef you will get an HSEvent notifying you about the value change.
             Since the change is to your device, this notification should be ignored. When an event is detected that
             has beenn registered by your plug-in, call is made to the HSEvent function in your plug-in.
             You can then handle the event. See HSEvent  for more information and an example.
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="evType">The type of event to register a callback for</param>
            <param name="pluginId">The ID of the plugin that should be called</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.TriggerMatches(System.String,System.Int32,System.Int32)">
            <summary>
            This function returns an array of <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/> which matches the given plug-in, trigger number, and
             sub-trigger number provided.  GetTriggers returns all triggers, so use TriggerMatches when you only
             want to know if there are triggers in events for a specific plug-in's trigger.
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="pluginId">The ID of the plugin
            <remarks>If you are targeting triggers owned by a legacy plugin, use the IPlugInAPI.Name of the plugin for <paramref name="pluginId"/></remarks>
            </param>
            <param name="trigId">The ID of the trigger</param>
            <param name="subTrigId">The ID of the subtrigger</param>
            <returns>An array of <see cref="T:HomeSeer.PluginSdk.Events.TrigActInfo"/> which matches the given plug-in, trigger number, and
             sub-trigger number provided</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetTriggersByType(System.String,System.Int32)">
            <summary>
            Get all of the triggers of a particular type
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="pluginId">The ID of the plugin that owns the trigger type
            <remarks>If you are targeting triggers owned by a legacy plugin, use the IPlugInAPI.Name of the plugin for <paramref name="pluginId"/></remarks>
            </param>
            <param name="trigId">The ID of the trigger type</param>
            <returns>An array of trigger data</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.TriggerFire(System.String,HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            This function is a callback function and is called when a plugin detects that a trigger condition is true.
            </summary>
            <remarks>
            PLEASE NOTE: This was ported directly from the legacy HS3 API and has not been fully reviewed to ensure
             proper compatibility and support through this SDK.  This may undergo significant change in the near future.
             Please use with caution.
            </remarks>
            <param name="pluginId">The ID of the plugin
            <remarks>If you are targeting a trigger owned by a legacy plugin, use the IPlugInAPI.Name of the plugin for <paramref name="pluginId"/></remarks>
            </param>
            <param name="trigInfo">The data of the trigger to fire</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Version">
            <summary>
            Get the current version of HomeSeer that is running
            </summary>
            <returns>The version string for HomeSeer in the format of MAJOR.MINOR.PATCH.BUILD</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetHSEdition">
            <summary>
            Get the current edition of HomeSeer that is running
            </summary>
            <returns>The edition of HomeSeer currently running</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetUsers">
            <summary>
            Get a list of users and their rights
            </summary>
            <returns>a list of users in this format: username|rights,username2|rights2...</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.IsLicensed">
            <summary>
            Determine if the HomeSeer system is licensed using any license, including a trial
            </summary>
            <returns>TRUE if the HomeSeer system is licensed</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.IsRegistered">
            <summary>
            Determine if the HomeSeer system is registered using a paid license
            </summary>
            <returns>TRUE if the HomeSeer system is registered with a paid license</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.IsLocation1First">
            <summary>
            Determine if Location1 is used first on devices/features.
            </summary>
            <remarks>
            By default, Location2 is used as the first logical location when organizing devices/features.
             For this reason, it is important to check which location is marked as the first location before working
             with locations.
            </remarks>
            <returns>TRUE if Location1 is used first, FALSE if Location2 is used first</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetLocationsList">
            <summary>
            Get an alpha-sorted list of Location1 strings
            </summary>
            <returns>A SortedList of Location1 location strings</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetLocation1Name">
            <summary>
            Get the name of the Location1 location
            </summary>
            <returns>The user defined name of Location1</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetLocations2List">
            <summary>
            Get an alpha-sorted list of Location2 strings
            </summary>
            <returns>A SortedList of Location2 location strings</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetLocation2Name">
            <summary>
            Get the name of the Location2 location
            </summary>
            <returns>The user defined name of Location2</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetFirstLocationName">
            <summary>
            Get the name of the first location.
            <para>
            This is the name of the location that is marked as first according to <see cref="M:HomeSeer.PluginSdk.IHsController.IsLocation1First"/>
            </para>
            </summary>
            <returns>The name of the first location</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetSecondLocationName">
            <summary>
            Get the name of the second location.
            <para>
            This is the name of the location that is marked as second according to <see cref="M:HomeSeer.PluginSdk.IHsController.IsLocation1First"/>
            </para>
            </summary>
            <returns>The name of the second location</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetFirstLocationList">
            <summary>
            Get an alpha-sorted list of the location strings marked as first
            <para>
            This is the list of location strings that are marked as first according to <see cref="M:HomeSeer.PluginSdk.IHsController.IsLocation1First"/>
            </para>
            </summary>
            <returns>A List of the first location strings</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetSecondLocationList">
            <summary>
            Get an alpha-sorted list of the location strings marked as second
            <para>
            This is the list of location strings that are marked as second according to <see cref="M:HomeSeer.PluginSdk.IHsController.IsLocation1First"/>
            </para>
            </summary>
            <returns>A List of the second location strings</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.CheckRegistrationStatus(System.String)">
            <summary>
            Get the <see cref="T:HomeSeer.PluginSdk.Types.ERegistrationMode"/> of a plugin
            </summary>
            <param name="pluginId">The ID of the plugin to read</param>
            <returns>The <see cref="T:HomeSeer.PluginSdk.Types.ERegistrationMode"/> of the plugin with the specified ID</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetOsType">
            <summary>
            Get the type of OS HomeSeer is running on as <see cref="T:HomeSeer.PluginSdk.Types.EOsType"/>
            </summary>
            <returns>0 = windows, 1 = linux</returns>
            <seealso cref="T:HomeSeer.PluginSdk.Types.EOsType"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetIpAddress">
            <summary>
            Obtain the IP address the HomeSeer system is accessible through
            </summary>
            <returns>A string representation of the IP address HomeSeer is running on</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.ShutDown">
            <summary>
            Shutdown the HS system
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RestartSystem">
            <summary>
            Shutdown and restart the HS system. This restarts the hardware
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.WindowsShutdownSystem">
            <summary>
            Shut down HS and shutdown the hardware system
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.WindowsRebootSystem">
            <summary>
            Shut down HS and reboot the hardware system
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.WindowsLogoffSystem">
            <summary>
            Logs off the active user and closes all processes running under the user
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.ReplaceVariables(System.String)">
            <summary>
            HomeSeer supports the use of replacement variables, which is the use of special tags to indicate where
             HomeSeer should replace the tag with text information.  A full list of replacement variables is listed
             in HomeSeer's help file.
            </summary>
            <param name="strIn">A string with the replacement variables</param>
            <returns>A string with the replacement variables removed with the indicated values put in their place</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetAppPath">
            <summary>
            Returns the path to the HS executable. Some plugins need this when running remotely
            </summary>
            <returns>The path to the HomeSeer executable</returns>
        </member>
        <member name="P:HomeSeer.PluginSdk.IHsController.SolarNoon">
            <summary>
            Get the DateTime for Solar Noon from the HomeSeer system
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IHsController.Sunrise">
            <summary>
            Get the DateTime for Sunrise from the HomeSeer system
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IHsController.Sunset">
            <summary>
            Get the DateTime for Sunset from the HomeSeer system
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.WriteLog(HomeSeer.PluginSdk.Logging.ELogType,System.String,System.String,System.String)">
            <summary>
            Write a message to the HomeSeer logs
            </summary>
            <param name="logType">The <see cref="T:HomeSeer.PluginSdk.Logging.ELogType"/> to write</param>
            <param name="message">The message to write to the log</param>
            <param name="pluginName">The name of your plugin, used to mark the source of the log message</param>
            <param name="color">The color code to use. NOTE: Legacy HS3 API implementation</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_AddCalculator(System.Int32,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_AddCalculatorEvenDay(System.Int32,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_AddData(System.Int32,HomeSeer.PluginSdk.Energy.EnergyData)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_AddDataArray(System.Int32,HomeSeer.PluginSdk.Energy.EnergyData[])">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_SetEnergyDevice(System.Int32,HomeSeer.PluginSdk.Constants.enumEnergyDevice)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_CalcCount(System.Int32)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_GetGraphDataIDs">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_GetEnergyRefs(System.Boolean)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_GetGraph(System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_GetData(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_GetArchiveData(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_GetArchiveDatas(System.String,System.DateTime,System.DateTime)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_GetCalcByName(System.Int32,System.String)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_GetCalcByIndex(System.Int32,System.Int32)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_GetGraphData(System.Int32)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_SaveGraphData(HomeSeer.PluginSdk.Energy.EnergyGraphData)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Energy_RemoveData(System.Int32,System.DateTime)">
            <summary>
            PLEASE NOTE: Code related to the Energy components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Energy API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.Speak(System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            This function speaks some text
            </summary>
            <remarks>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </remarks>
            <param name="speechDevice">
            This is the device that is to be used for the speaking.  In older versions of HomeSeer, this value was
             used to indicate the sound card to use, and if it was over 100, then it indicated that it was speaking
             for HomeSeer Phone (device - 100 = phone line), or the WAV audio device to use.
             Although this is still used for HomeSeer Phone, speaks for HomeSeer phone are never proxied and so
             values >= 100 should never been seen in the device parameter.
            </param>
            <param name="spokenText">
            This is the text to be spoken, or if it is a WAV file to be played, then the characters ":\" will be
             found starting at position 2 of the string as playing a WAV file with the speak command in HomeSeer
             REQUIRES a fully qualified path and filename of the WAV file to play.
            </param>
            <param name="wait">
            This parameter tells HomeSeer whether to continue processing commands immediately or to wait until
             the speak command is finished.
            </param>
            <param name="host">
            This is a list of host:instances to speak or play the WAV file on.
             An empty string or a single asterisk (*) indicates all connected speaker clients on all hosts.
            </param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SpeakProxy(System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            This procedure is used to cause HomeSeer to speak something when a speak proxy is registered and active.
             Since speak commands when a speak proxy plug-in is registered are trapped and passed to the SpeakIn
             procedure of the speak proxy plug-in, this command is used when the speak proxy plug-in is ready to do
             the real speaking.
            </summary>
            <remarks>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </remarks>
            <param name="speechDevice">
            This is the device that is to be used for the speaking.  In older versions of HomeSeer, this value was
             used to indicate the sound card to use, and if it was over 100, then it indicated that it was speaking
             for HomeSeer Phone (device - 100 = phone line), or the WAV audio device to use.
             Although this is still used for HomeSeer Phone, speaks for HomeSeer phone are never proxied and so
             values >= 100 should never been seen in the device parameter.
             Pass the device parameter unchanged to SpeakProxy.
            </param>
            <param name="spokenText">
            This is the text to be spoken, or if it is a WAV file to be played, then the characters ":\" will be
             found starting at position 2 of the string as playing a WAV file with the speak command in HomeSeer
             REQUIRES a fully qualified path and filename of the WAV file to play.
            </param>
            <param name="wait">
            This parameter tells HomeSeer whether to continue processing commands immediately or to wait until
             the speak command is finished - pass this parameter unchanged to SpeakProxy.
            </param>
            <param name="host">
            This is a list of host:instances to speak or play the WAV file on.
             An empty string or a single asterisk (*) indicates all connected speaker clients on all hosts.
             Normally this parameter is passed to SpeakProxy unchanged.
            </param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SpeakToFile(System.String,System.String,System.String)">
            <summary>
            Sends TTS to a file using the system voice
            </summary>
            <remarks>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </remarks>
            <param name="Text">The text to speak</param>
            <param name="Voice">The voice to use, SAPI only on Windows</param>
            <param name="FileName">Filename to send the speech to</param>
            <returns></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.PlayWavFile(System.String,System.String,System.Boolean)">
            <summary>
            Plays audio from passed file to a specific speaker client
            </summary>
            <param name="FileName">The filename can be the full path to the file,
            or just the name of file that is located in one of the following folders
            in the HomeSeer root directory: wave/Mdia/scripts</param>
            <param name="Host">The speaker host to speak to in the format host:instance</param>
            <param name="Wait">If True, this function will not return until speaking has finished.
            If False, the function returns immediately and the speaking is queued
            </param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SetVolume(System.Int32,System.String)">
            <summary>
            Set the volume on a speaker client
            </summary>
            <param name="level">Volume level in the range of 0-100</param>
            <param name="Host">The speaker host to speak to in the format host:instance</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetVolume(System.String)">
            <summary>
            Get the volume on a speaker client
            </summary>
            <param name="host">The speaker host to speak to in the format host:instance</param>
            <returns>Volume level in the range of 0-100</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.IsSpeakerBusy(System.String)">
            <summary>
            This function can let you know if a specific speaker client (host or host:instance) is currently busy speaking or playing WAV audio.
            </summary>
            <param name="host">Leaving this a null string will return the busy status for the first instance HomeSeer finds, 
            otherwise use the hostname of the computer you are interested in determining the busy status of. 
            If more than one instance of the Speaker application is running on "host" then you may need to specify the instance as well in the format host:instance.</param>
            <returns> TRUE indicates that the speaker application instance is busy</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetSpeakerInstanceList">
            <summary>
            This function retrieves a comma separated list of host:instance names for Speaker client instances currently connected to HomeSeer.
            </summary>
            <returns>The returned instance list is a comma separated list of host:instance pairs</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RegisterProxySpeakPlug(System.String)">
            <summary>
            Register your plug-in as a Speak Proxy plug-in.
            <para>
            After this registration, whenever a Speak command is issued in HomeSeer,
             your plug-in's SpeakIn procedure will be called instead.
             When your plug-in wishes to have HomeSeer actually speak something, it uses SpeakProxy instead of Speak.
            </para>
            <para>
            If you no longer wish to proxy Speak commands in your plug-in, or when your plug-in has its Shutdown
             procedure called, use UnRegisterProxySpeakPlug to remove the registration as a speak proxy.
            </para>
            </summary>
            <param name="pluginId">The Id of your plugin</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.UnRegisterProxySpeakPlug(System.String)">
            <summary>
            Unregister a plug-in as a Speak proxy that was previously
             registered using RegisterProxySpeakPlug.
            </summary>
            <param name="pluginId">The Id of your plugin</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.IsMediaPlaying(System.String)">
            <summary>
            This function checks if the media player is currently playing a selection
            </summary>
            <param name="host">Leaving this a null string will apply the command to the first instance HomeSeer finds, otherwise use the hostname of the computer for this command.  
            If more than one instance of the Speaker application is running on "host" then you may need to specify the instance as well in the format host:instance.</param>
            <returns>TRUE if a media selection is currently playing and the sound card is most likely busy, FALSE if a media selection is not playing and the sound is most likely free.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SaveImageFile(System.Byte[],System.String,System.Boolean)">
             <summary>
             Save the specified image, as a byte array, to file in the HomeSeer html images directory
             </summary>
             <param name="imageBytes">A byte array of the image to save</param>
             <param name="destinationFile">The path of the image following "\html\images\"</param>
             <param name="overwriteExistingFile">TRUE to overwrite any existing file, FALSE to not</param>
             <returns>TRUE if the file was saved successfully, FALSE if there was a problem</returns>
             <example>
             The following example shows how to download an image from a URL and save the bytes to file from the HSPI class.
             
             <code>
             var url = "http://homeseer.com/images/HS4/hs4-64.png";
             var webClient = new WebClient();
             var imageBytes = webClient.DownloadData(url);
             var filePath = $"{Id}\\{Path.GetFileName(url)}";
             if (!HomeSeerSystem.SaveImageFile(imageBytes, filePath, true)) {
                 Console.WriteLine($"Error saving {url} to {filePath}");
             }
             </code>
             </example>
             <example>
             The following example shows how to convert an image to bytes and save them from the HSPI class.
            
             <code>
             var myImage = System.Drawing.Image.FromFile("sampleImage.png");
             var imageBytes = new byte[0];
             using (var ms = new MemoryStream()) {
                 myImage.Save(ms, myImage.RawFormat);
                 imageBytes = ms.toArray();
             }
             var filePath = $"{Id}\\sampleImage.png";
             if (!HomeSeerSystem.SaveImageFile(imageBytes, filePath, true)) {
                 Console.WriteLine($"Error saving sampleImage.png to {filePath}");
             }
             </code>
             </example>
             <seealso cref="M:HomeSeer.PluginSdk.IHsController.DeleteImageFile(System.String)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteImageFile(System.String)">
            <summary>
            Delete the specified file from HomeSeer's HTML image directory.
            </summary>
            <param name="targetFile">The path of the image following "\html\images\"</param>
            <returns>TRUE if the file was deleted successfully, FALSE if it still exists</returns>
            <example>
            The following example shows how to delete an image from HomeSeer's HTML image directory.
            
            <code>
            var filePath = $"{Id}\\sampleImage.png";
            if (!HomeSeerSystem.DeleteImageFile(filePath)) {
                Console.WriteLine($"Error deleting {filePath}");
            }
            </code>
            </example>
            <seealso cref="M:HomeSeer.PluginSdk.IHsController.SaveImageFile(System.Byte[],System.String,System.Boolean)"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RunScript(System.String,System.Boolean,System.Boolean)">
            <summary>
            Run a script file
            </summary>
            <param name="scr">Filename of the script to run. Script must be located in the scripts folder.</param>
            <param name="Wait">If True, function does not return until script finishes, if false, the script is run in the background.</param>
            <param name="SingleInstance">If true, the script will not run if it is already running. If false, multiple copies of the same script can run.</param>
            <returns></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RunScriptFunc(System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Run a script file calling the given function in the file
            </summary>
            <param name="scr">Filename of the script to run. Script must be located in the scripts folder.</param>
            <param name="func">The name of the function to run. Normally the function "Main" is run if no function is specified.</param>
            <param name="param">The parameter(s) to be passed to the function. This is an object and can be a single
            parameter such as a string, or multiple parameters in an array</param>
            <param name="Wait">If True, function does not return until script finishes, if false, the script is run in the background.</param>
            <param name="SingleInstance">If true, the script will not run if it is already running. If false, multiple copies of the same script can run.</param>
            <returns></returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.IsScriptRunning(System.String)">
            <summary>
            This function indicates if a specified script is currently running.
            </summary>
            <param name="scr">Filename of the script to check.</param>
            <returns>TRUE if the specified script is currently running and FALSE if it doesn't.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.LegacyPluginFunction(System.String,System.String,System.String,System.Object[])">
            <summary>
            Execute a specific function declared within a plugin installed on the HomeSeer system. This calls <see cref="M:HomeSeer.PluginSdk.IPlugin.PluginFunction(System.String,System.Object[])"/> on the target plugin.
            </summary>
            <param name="plugName">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Name"/> of the plugin that owns the function</param>
            <param name="plugInstance">The instance name of the plugin that owns the function</param>
            <param name="procName">The name of the function</param>
            <param name="params">An array of parameters to pass to the function being called</param>
            <returns>An object that contains the return value from the function called. You are on your own when it comes to casting this to the right type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either the <paramref name="plugName"/> or <paramref name="procName"/> parameters are null or whitespace</exception>
            <exception cref="T:System.AggregateException">Thrown when there was an error trying to execute the function. Check the enclosed exception for details.</exception>
            <remarks>
            This is useful for interacting with Legacy plugins that used a name-instance pair for identification
             instead of a unique ID. You should use <see cref="M:HomeSeer.PluginSdk.IHsController.PluginFunction(System.String,System.String,System.Object[])"/> if you are trying to
             interface with HS4 plugins.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.PluginFunction(System.String,System.String,System.Object[])">
            <summary>
            Execute a specific function declared within a plugin installed on the HomeSeer system. This calls <see cref="M:HomeSeer.PluginSdk.IPlugin.PluginFunction(System.String,System.Object[])"/> on the target plugin.
            </summary>
            <param name="pluginId">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Id"/> of the plugin that owns the function</param>
            <param name="procName">The name of the function</param>
            <param name="params">An array of parameters to pass to the function being called</param>
            <returns>An object that contains the return value from the function called. You are on your own when it comes to casting this to the right type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either the <paramref name="pluginId"/> or <paramref name="procName"/> parameters are null or whitespace</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a plugin with the specified ID is not found in the list of installed plugins</exception>
            <exception cref="T:System.AggregateException">Thrown when there was an error trying to execute the function. Check the enclosed exception for details.</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetPluginVersionByName(System.String)">
            <summary>
            Get the version of a particular plugin by its name. For interfacing with legacy plugins.
            </summary>
            <param name="pluginName">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Name"/> of the plugin</param>
            <returns>The version of the main dll for the plugin</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="pluginName"/> parameter is null or whitespace</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a plugin with the specified name is not found in the list of installed plugins</exception>
            <remarks>
            This is useful for interacting with Legacy plugins that used a name-instance pair for identification
             instead of a unique ID. You should use <see cref="M:HomeSeer.PluginSdk.IHsController.GetPluginVersionById(System.String)"/> if you are trying to
             interface with HS4 plugins.
            </remarks>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetPluginVersionById(System.String)">
            <summary>
            Get the version of a particular plugin by its <see cref="P:HomeSeer.PluginSdk.IPlugin.Id"/>. Do not use this for legacy plugins; it will not work.
            </summary>
            <param name="pluginId">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Id"/> of the plugin</param>
            <returns>The version of the main dll for the plugin</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="pluginId"/> parameter is null or whitespace</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a plugin with the specified ID is not found in the list of installed plugins</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.LegacyPluginPropertyGet(System.String,System.String,System.String)">
            <summary>
            Get a specific property declared within a plugin installed on the HomeSeer system.
             This calls <see cref="M:HomeSeer.PluginSdk.IPlugin.PluginPropertyGet(System.String)"/> on the target plugin.
            </summary>
            <remarks>
            This is useful for interacting with Legacy plugins that used a name-instance pair for identification
             instead of a unique ID. You should use <see cref="M:HomeSeer.PluginSdk.IHsController.PluginPropertyGet(System.String,System.String)"/> if you are trying to
             interface with HS4 plugins.
            </remarks>
            <param name="plugName">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Name"/> of the plugin that owns the property</param>
            <param name="plugInstance">The instance name of the plugin that owns the property</param>
            <param name="propName">The exact name of the property</param>
            <returns>An object representing the value of the target property</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.PluginPropertyGet(System.String,System.String)">
            <summary>
            Get a specific property declared within a plugin installed on the HomeSeer system.
             This calls <see cref="M:HomeSeer.PluginSdk.IPlugin.PluginPropertyGet(System.String)"/> on the target plugin.
            </summary>
            <param name="plugId">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Id"/> of the plugin that owns the property</param>
            <param name="propName">The exact name of the property</param>
            <returns>An object representing the value of the target property</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.LegacyPluginPropertySet(System.String,System.String,System.String,System.Object)">
            <summary>
            Set a specific property declared within a plugin installed on the HomeSeer system.
             This calls <see cref="M:HomeSeer.PluginSdk.IPlugin.PluginPropertySet(System.String,System.Object)"/> on the target plugin
            </summary>
            <remarks>
            This is useful for interacting with Legacy plugins that used a name-instance pair for identification
             instead of a unique ID. You should use <see cref="M:HomeSeer.PluginSdk.IHsController.PluginPropertySet(System.String,System.String,System.Object)"/> if you are trying to
             interface with HS4 plugins.
            </remarks>
            <param name="plugName">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Name"/> of the plugin that owns the property</param>
            <param name="plugInstance">The instance name of the plugin that owns the property</param>
            <param name="propName">The exact name of the property</param>
            <param name="propValue">The value of the property to set.
             Its type must exactly match the type defined in the plugin.</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.PluginPropertySet(System.String,System.String,System.Object)">
            <summary>
            Set a specific property declared within a plugin installed on the HomeSeer system.
             This calls <see cref="M:HomeSeer.PluginSdk.IPlugin.PluginPropertySet(System.String,System.Object)"/> on the target plugin
            </summary>
            <param name="plugId">The <see cref="P:HomeSeer.PluginSdk.IPlugin.Id"/> of the plugin that owns the property</param>
            <param name="propName">The exact name of the property</param>
            <param name="propValue">The value of the property to set.
             Its type must exactly match the type defined in the plugin.</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.CreateCategory(System.String,System.String)">
            <summary>
            Create a new category with the specified name and image path
            </summary>
            <param name="name">The display name of the category</param>
            <param name="image">The path to the image for the category. Use the files in /html/images/Categories/</param>
            <returns>The ID of the newly created category</returns>
            <exception cref="T:System.ArgumentException">Thrown when the name is already in use by another category</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetAllCategories">
            <summary>
            Get a Dictionary of all categories on the HomeSeer system where the key is the ID and the value is the name of each category
            </summary>
            <returns>A Dictionary of category names by ID</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetCategoryNameById(System.String)">
            <summary>
            Get the name of a category by its ID
            </summary>
            <param name="id">The ID of the category</param>
            <returns>The name of the category. Null or empty string if the category does not exist</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetCategoryImageById(System.String)">
            <summary>
            Get the image path of a category by its ID
            </summary>
            <param name="id">The ID of the category</param>
            <returns>The image path of the category. Null if the category doesn't exist. Empty string if there is no image path for that category</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetRefsByCategoryId(System.String)">
            <summary>
            Get a list of <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/>s of devices and features included in the category
            </summary>
            <param name="id">The ID of the category</param>
            <returns>
            A List of <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/>s of devices and features included in the category.
             Null if the category doesn't exist. Empty list if no devices or features are included in the category.
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SetImageForCategoryById(System.String,System.String)">
            <summary>
            Set the image path for a category
            </summary>
            <param name="id">The ID of the category</param>
            <param name="image">The path to the image for the category. Use /html/images/Categories/</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if a category with that ID isn't found</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SetNameForCategoryById(System.String,System.String)">
            <summary>
            Set the name for a category
            </summary>
            <param name="id">The ID of the category</param>
            <param name="name">The new name for the category</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if a category with that ID isn't found</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SetRefsForCategoryById(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the list of refs for a category
            </summary>
            <param name="id">The ID of the category</param>
            <param name="devRefs">The new list of refs for the category</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if a category with that ID isn't found</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.AddRefToCategory(System.String,System.Int32)">
            <summary>
            Add a ref to a category
            </summary>
            <param name="id">The ID of the category</param>
            <param name="devRef">The ref to add to the category</param>
            <returns>The current list of refs on the category after adding the one specified</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if a category with that ID isn't found</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.AddRefsToCategory(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Add a collection of refs to a category
            </summary>
            <param name="id">The ID of the category</param>
            <param name="devRefs">A list of refs to add to the category</param>
            <returns>The current list of refs on the category after adding the ones specified</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if a category with that ID isn't found</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RemoveRefFromCategory(System.String,System.Int32)">
            <summary>
            Remove a ref from a category
            </summary>
            <param name="id">The ID of the category</param>
            <param name="devRef">The ref to remove from the category</param>
            <returns>The current list of refs on the category after removing the one specified</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if a category with that ID isn't found</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.RemoveRefsFromCategory(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Remove a list of refs from a category
            </summary>
            <param name="id">The ID of the category</param>
            <param name="devRefs">The refs to remove from the category</param>
            <returns>The current list of refs on the category after removing the ones specified</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if a category with that ID isn't found</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteCategoryById(System.String)">
            <summary>
            Delete a category by ID
            </summary>
            <param name="id">The ID of the category to delete</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.CreateVar(System.String)">
            <summary>
            Create a new global variable
            </summary>
            <param name="name">The name of the global variable</param>
            <returns>An empty string no error occured, or an error string if one did occur.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DeleteVar(System.String)">
            <summary>
            Delete a global variable
            </summary>
            <param name="name">The name of the global variable</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.GetVar(System.String)">
            <summary>
            Find the global variable associated with the name parameter and return it.
            </summary>
            <param name="name">The name of the global variable</param>
            <returns>The global variable saved.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SaveVar(System.String,System.Object)">
            <summary>
            Save the global variable contained in the obj parameter. 
            The parameter may be any variable type such as a string or integer, or it may be a reference to an object created with CreateObject
            </summary>
            <param name="name">The name of the global variable</param>
            <param name="obj">The object to be saved</param>
            <returns>An empty string no error occured, or an error string if one did occur.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.DecryptString(System.String,System.String,System.String)">
            <summary>
            Decrypt a string using a decryption password that you specify.
            </summary>
            <param name="text">The text to decrypt</param>
            <param name="password">The user-created text string to decrypt the text with</param>
            <param name="keyModifier">The modifier used with the password to create the decryption key. 
            If EncryptString was used with a key modifier was, you must specify the same key modifier here.</param>
            <returns>A string containing a decrypted form of the text parameter, decrypted using password (and keyModifier if provided)</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IHsController.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send an Email message
            </summary>
            <param name="to">The address you are sending the email to</param>
            <param name="from">The adress you are sending from.  Note that some ISPs will not allow you to put just anything in this field.  
            You may be required to put your real E-mail address here. If you are using MAPI to handle your E-mail, 
            MAPI will enter your E-mail address that is associated with your default E-mail account.  In that case, this field will be ignored.</param>
            <param name="cc">The CC address</param>
            <param name="bcc">The BCC address</param>
            <param name="subject">The subject of the email</param>
            <param name="message">The body of the email</param>
            <param name="attach">The abosulte path to the file to be attached to the email.</param>
        </member>
        <member name="T:HomeSeer.PluginSdk.Logging.ELogType">
            <summary>
            Used to categorize log entries in increasing level of severity.
            </summary>
            <remarks>
            Users are able to filter the HomeSeer log by type based on what kind of information they are looking for.
             Properly categorizing your log entries will make it easier for users and HomeSeer support staff to
             troubleshoot any issues with the expected operation of your plugin.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Logging.ELogType.Trace">
            <summary>
            Messages typically used for marking where the plugin process is in code.
            <para>
            The least severe and most verbose log type.
            </para>
            </summary>
            <remarks>
            Use this type for all entries that fall outside of the scope of the other types.
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Logging.ELogType.Debug">
            <summary>
            Messages used for debugging the plugin process.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Logging.ELogType.Info">
            <summary>
            Informational messages about the plugin process that require no attention but may be useful for users.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Logging.ELogType.Warning">
            <summary>
            Messages indicating that there may be an issue interfering with the normal operation
             of the plugin that the user might want to address.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Logging.ELogType.Error">
            <summary>
            Critical messages about issues that require user attention and may be interfering with normal operation.
            <para>
            The most severe log type.
            </para>
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Speech.EMediaOperation">
            <summary>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.EMediaOperation.MediaIsPlaying">
            <summary>
            Return true if media player is currently playing
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.EMediaOperation.MediaSetVolume">
            <summary>
            0 -> 100 100=full
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Speech.AbstractSpeakerClient">
            <summary>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Speech.ESpeakErrorValue">
            <summary>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Speech.ESpeakTypeValue">
            <summary>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.ESpeakTypeValue.Tts">
            <summary>
            TTS voice
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.ESpeakTypeValue.Message">
            <summary>
            Text message
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.ESpeakTypeValue.WaveFile">
            <summary>
            Play a wave file
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Speech.clsLastVR">
            <summary>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Speech.IFromSpeaker">
            <summary>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Speech.ISpeechAPI">
            <summary>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Speech.RemoteHost">
            <summary>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.RemoteHost.hostname">
            <summary>
            name of host speaker client is running on
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.RemoteHost.instance">
            <summary>
            instance name of speaker client on remote host
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.RemoteHost.client">
            <summary>
            receiver object used to call back into speaker client
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.RemoteHost.clientID">
            <summary>
            unique identifier of client
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.RemoteHost.vr">
            <summary>
            vr object to handle voice recognition
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.RemoteHost.ipaddr">
            <summary>
            IP address of remote host
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.RemoteHost.SpeakingCount">
            <summary>
            incremented when speaking or wave play starts, decremented when finished
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.RemoteHost.LastBusyCheck">
            <summary>
            last time we polled the remote for play wave and speak status
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Speech.RemoteHost.valid">
            <summary>
            true indicates valid entry
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Systems.EConfigChangeTarget">
            <summary>
            The target of a <see cref="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.ConfigChange"/> system event
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EConfigChangeTarget.Device">
            <summary>
            A device is being changed
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EConfigChangeTarget.Event">
            <summary>
            An event is being changed
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EConfigChangeTarget.EventGroup">
            <summary>
            An event group is being changed
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EConfigChangeTarget.SetupItem">
            <summary>
            A setup item is being changed
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Systems.EConfigChangeAction">
            <summary>
            The action that is occuring during a <see cref="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.ConfigChange"/> system event
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EConfigChangeAction.Unknown">
            <summary>
            The action type is unknown or unspecified
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EConfigChangeAction.Add">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Systems.EConfigChangeTarget"/> is being added
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EConfigChangeAction.Delete">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Systems.EConfigChangeTarget"/> is being deleted
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EConfigChangeAction.Change">
            <summary>
            The <see cref="T:HomeSeer.PluginSdk.Systems.EConfigChangeTarget"/> is being edited
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Systems.EHsSystemEvent">
            <summary>
            Types of system events.
            </summary>
            <remarks>
            <para>
            System events represent changes in the system that plugins can react to.
             They are not the same thing as Events configured by users.
            </para>
            <para>
            This replaces <see cref="T:HomeSeer.PluginSdk.Constants.HSEvent"/>
            </para>
            </remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.Log">
            <summary>
            When the event log is written, this event is fired.
            Parameters are:
            <list type="table">
                <listheader>
                    <term>Parameter index</term>
                    <description>Content</description>
                </listheader>
                <item>
                    <term>0</term>
                    <description>The event type as an <see cref="T:System.Int32"/> with a value of <see cref="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.Log"/></description>
                </item>
                <item>
                    <term>1</term>
                    <description>The date and time of the log entry as a <see cref="T:System.String"/></description>
                </item>
                <item>
                    <term>2</term>
                    <description>The type of the log entry as a <see cref="T:System.String"/></description> TODO switch to use ELogType
                </item>
                <item>
                    <term>3</term>
                    <description>The content of the log entry as a <see cref="T:System.String"/></description>
                </item>
                <item>
                    <term>4</term>
                    <description>The color of the log entry as a <see cref="T:System.String"/> formatted in HTML color format</description>
                </item>
                <item>
                    <term>5</term>
                    <description>DEPRECATED</description>
                </item>
                <item>
                    <term>6</term>
                    <description>The source of the log entry as a <see cref="T:System.String"/></description>
                </item>
                <item>
                    <term>7</term>
                    <description>The error code associated with the log entry as a <see cref="T:System.Int32"/></description>
                </item>
                <item>
                    <term>8</term>
                    <description>The date and time of the log entry as a <see cref="T:System.DateTime"/></description>
                </item>
            </list>
            </summary>
            <remarks>Parameter index 2 will be undergoing some changes to ensure it matches <see cref="T:HomeSeer.PluginSdk.Logging.ELogType"/></remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.Audio">
            <summary>
            When audio is started or stopped, this event is fired.
            This includes playing an audio file or speaking TTS
            Parameters are:
            <list type="table">
                <listheader>
                    <term>Parameter index</term>
                    <description>Content</description>
                </listheader>
                <item>
                    <term>0</term>
                    <description>The event type as an <see cref="T:System.Int32"/> with a value of <see cref="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.Audio"/></description>
                </item>
                <item>
                    <term>1</term>
                    <description>
                        A <see cref="T:System.Boolean"/> representing whether audio has started or stopped.
                        <see langword="True"/> means audio has started, and <see langword="false"/> means audio has stopped.
                    </description>
                </item>
                <item>
                    <term>2</term>
                    <description>The audio device number as an <see cref="T:System.Int32"/> or 0 if not using Windows PC audio.</description>
                </item>
                <item>
                    <term>3</term>
                    <description>The speaker host name as a <see cref="T:System.String"/> if audio is being sent to a client.</description>
                </item>
                <item>
                    <term>4</term>
                    <description>The speaker host instance as a <see cref="T:System.String"/> if audio is being sent to a client.</description>
                </item> 
            </list>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.ConfigChange">
            <summary>
            When a change is made to the configuration of the system, such as Setup, this event is fired. 
            Parameters are:
            <list type="table">
                <listheader>
                    <term>Parameter index</term>
                    <description>Content</description>
                </listheader>
                <item>
                    <term>0</term>
                    <description>The event type as an <see cref="T:System.Int32"/> with a value of <see cref="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.ConfigChange"/></description>
                </item>
                <item>
                    <term>1</term>
                    <description>The target of the config change event as defined by <see cref="T:HomeSeer.PluginSdk.Systems.EConfigChangeTarget"/> and represented as an <see cref="T:System.Int32"/></description>
                </item>
                <item>
                    <term>2</term>
                    <description>UNUSED - always 0</description>
                </item>
                <item>
                    <term>3</term>
                    <description>Target unique reference number as an <see cref="T:System.Int32"/></description>
                </item>
                <item>
                    <term>4</term>
                    <description>The type of change happening as defined by <see cref="T:HomeSeer.PluginSdk.Systems.EConfigChangeAction"/> and represented by an <see cref="T:System.Int32"/></description>
                </item>
                <item>
                    <term>5</term>
                    <description>A description of what changed as a <see cref="T:System.String"/></description>
                </item>
            </list>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.StringChange">
            <summary>
            When the string value of a device is changed, this event is fired.
            Parameters are:
            <list type="table">
                <listheader>
                    <term>Parameter index</term>
                    <description>Content</description>
                </listheader>
                <item>
                    <term>0</term>
                    <description>The event type as an <see cref="T:System.Int32"/> with a value of <see cref="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.StringChange"/></description>
                </item>
                <item>
                    <term>1</term>
                    <description>The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> of the device that has changed</description>
                </item>
                <item>
                    <term>2</term>
                    <description>The new value as a <see cref="T:System.String"/></description>
                </item>
                <item>
                    <term>3</term>
                    <description>The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the device that has changed</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.SpeakerConnect">
            <summary>
            When a new speaker client connects to the system, this event is fired.
            Parameters are:
            <list type="table">
                <listheader>
                    <term>Parameter index</term>
                    <description>Content</description>
                </listheader>
                <item>
                    <term>0</term>
                    <description>The event type as an <see cref="T:System.Int32"/> with a value of <see cref="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.SpeakerConnect"/></description>
                </item>
                <item>
                    <term>1</term>
                    <description>The name of the speaker host as a <see cref="T:System.String"/></description>
                </item>
                <item>
                    <term>2</term>
                    <description>The instance of the speaker host as a <see cref="T:System.String"/></description>
                </item>
                <item>
                    <term>3</term>
                    <description>
                        An <see cref="T:System.Int32"/> representing what the speaker host is doing.
                        1 means the host is connecting.
                        2 means it is disconnecting.
                    </description>
                </item>
                <item>
                    <term>4</term>
                    <description>The IP address of the speaker host as a <see cref="T:System.String"/></description>
                </item>
            </list>
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.CallerId">
            <summary>
            Deprecated, no longer supported
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.ValueChange">
            <summary>
            When the value of a device changes, this event is fired.
            Parameters are:
            <list type="table">
                <listheader>
                    <term>Parameter index</term>
                    <description>Content</description>
                </listheader>
                <item>
                    <term>0</term>
                    <description>The event type as an <see cref="T:System.Int32"/> with a value of <see cref="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.ValueChange"/></description>
                </item>
                <item>
                    <term>1</term>
                    <description>The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> of the device that has changed</description>
                </item>
                <item>
                    <term>2</term>
                    <description>The new value as a <see cref="T:System.Double"/></description>
                </item>
                <item>
                    <term>3</term>
                    <description>The old value as a <see cref="T:System.Double"/></description>
                </item>
                <item>
                    <term>4</term>
                    <description>The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the device that has changed</description>
                </item>
            </list>
            </summary>        
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.DeleteDevice">
            <summary>
            A device has been deleted
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.ValueSet">
            <summary>
            When a device has it's value set, this event is fired.
            This will fire even if the device is being set to the same value.
            Parameters are:
            <list type="table">
                <listheader>
                    <term>Parameter index</term>
                    <description>Content</description>
                </listheader>
                <item>
                    <term>0</term>
                    <description>The event type as an <see cref="T:System.Int32"/> with a value of <see cref="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.ValueSet"/></description>
                </item>
                <item>
                    <term>1</term>
                    <description>The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> of the device that has been set</description>
                </item>
                <item>
                    <term>2</term>
                    <description>The new value as a <see cref="T:System.Double"/></description>
                </item>
                <item>
                    <term>3</term>
                    <description>The old value as a <see cref="T:System.Double"/></description>
                </item>
                <item>
                    <term>4</term>
                    <description>The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the device that has been set</description>
                </item>
            </list>
            P(0) = EHsSystemEvent.ValueSet
            P(1) = HSAddress of device that changed
            P(2) = New value being set (double)
            P(3) = Previous value (double)
            P(4) = Device reference number
            </summary>        
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.VoiceRec">
            <summary>
            Deprecated, no longer supported
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.SetupChange">
            <summary>
            When an item in setup is changed, this event is fired. The parameters note the settings.ini file values that are set.
            Parameters are:
            <list type="table">
                <listheader>
                    <term>Parameter index</term>
                    <description>Content</description>
                </listheader>
                <item>
                    <term>0</term>
                    <description>The event type as an <see cref="T:System.Int32"/> with a value of <see cref="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.SetupChange"/></description>
                </item>
                <item>
                    <term>1</term>
                    <description>The INI section as a <see cref="T:System.String"/></description>
                </item>
                <item>
                    <term>2</term>
                    <description>The INI key as a <see cref="T:System.String"/></description>
                </item>
                <item>
                    <term>3</term>
                    <description>The new INI value as a <see cref="T:System.String"/></description>
                </item>
            </list>
            P(0) = EHsSystemEvent.SetupChange
            P(1) = INI section
            P(2) = INI key
            P(3) = INI value
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.ValueStringChangeRunScript">
            <summary>
            If a script includes a callback script, this event is fired before the script is run.
            Note that this event does not include event ID in P(0).
            Parameters are:
            <list type="table">
                <listheader>
                    <term>Parameter index</term>
                    <description>Content</description>
                </listheader>
                <item>
                    <term>0</term>
                    <description>The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Code"/> of the device that has been changed</description>
                </item>
                <item>
                    <term>1</term>
                    <description>The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Address"/> of the device that has been changed</description>
                </item>
                <item>
                    <term>2</term>
                    <description>The new value as a <see cref="T:System.Double"/></description>
                </item>
                <item>
                    <term>3</term>
                    <description>The old value as a <see cref="T:System.Double"/></description>
                </item>
                <item>
                    <term>4</term>
                    <description>The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the device that has been changed</description>
                </item>
            </list>
            P(0) = Device HSCode
            P(1) = Device HSAddress
            P(2) = New device value being set (double)
            P(3) = Previous device value (double)
            P(4) = Device reference number
            </summary>
            <remarks>The behavior of this event callback is not clear and may be revised.</remarks>
        </member>
        <member name="F:HomeSeer.PluginSdk.Systems.EHsSystemEvent.Generic">
            <summary>
            If a generic event is registered, this event is fired when the event is triggered.
            The event is typically triggered by a plugin. Parameter 0 is EHsSystemEvent.Generic.
            The remaining parameters are defined by the event that is registered.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Types.EAccessLevel">
            <summary>
            License requirement modes for plugins. Set <see cref="P:HomeSeer.PluginSdk.IPlugin.AccessLevel"/> to the integer value corresponding to the desired level.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.EAccessLevel.LicenseNotRequired">
            <summary>
            Plug-in is not licensed and may be enabled and run without purchasing a license. Use this value for free plug-ins.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.EAccessLevel.AcceptsLegacyLicense">
            <summary>
            Plug-in is licensed and a user must purchase a license in order to use this plug-in. When the plug-in Is first enabled, it will will run as a trial for 30 days. Legacy (HS3) plugin licenses are also accepted.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.EAccessLevel.DoNotUse">
            <summary>
            Reserved for internal compatibility management. Do not use.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.EAccessLevel.RequiresLicense">
            <summary>
            Plug-in is licensed and a user must purchase a license in order to use this plug-in. When the plug-in Is first enabled, it will will run as a trial for 30 days.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Types.EOsType">
            <summary>
            The type of Operating System that HomeSeer is running on
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.EOsType.Windows">
            <summary>
            Microsoft Windows
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.EOsType.Linux">
            <summary>
            A compatible Linux Operating System
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.Types.ERegistrationMode">
            <summary>
            The registration mode of a plugin
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.ERegistrationMode.Unknown">
            <summary>
            The registration mode is not known
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.ERegistrationMode.Unregistered">
            <summary>
            The plugin is unregistered
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.ERegistrationMode.Trial">
            <summary>
            The plugin is running as a trial
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.ERegistrationMode.Registered">
            <summary>
            The plugin is registered
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.Types.ERegistrationMode.ReadyToRegister">
            <summary>
            For HSPRO, plugin does not have a license and needs to be enabled to get one
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.PluginStatus">
            <summary>
            Represents the current operational state of a HomeSeer plugin. 
            </summary>
            <remarks>
            This is the expected return type when HomeSeer calls a
             plugin's implementation of <see cref="M:HomeSeer.PluginSdk.IPlugin.OnStatusCheck"/>
            </remarks>
            <example>
            <code>
            public void BeforeReturnStatus() {
                //Analyze the current state of the plugin
                //...
                //The plugin is operating as expected
                Status = PluginStatus.Ok();
            }
            </code>
            </example>
        </member>
        <member name="P:HomeSeer.PluginSdk.PluginStatus.Status">
            <summary>
            The status of the plugin as an <see cref="T:HomeSeer.PluginSdk.PluginStatus.EPluginStatus"/>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.PluginStatus.StatusText">
            <summary>
            A detailed explanation of the status of the plugin
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.PluginStatus.#ctor(HomeSeer.PluginSdk.PluginStatus.EPluginStatus,System.String)">
            <summary>
            Creates a new PluginStatus with the specified <see cref="T:HomeSeer.PluginSdk.PluginStatus.EPluginStatus"/> and status text
            </summary>
            <param name="status">The <see cref="T:HomeSeer.PluginSdk.PluginStatus.EPluginStatus"/> representing the current state of the plugin</param>
            <param name="statusText">A detailed explanation of the status</param>
            <exception cref="T:System.ArgumentNullException">Thrown if no status text was supplied when the status is not OK</exception>
        </member>
        <member name="M:HomeSeer.PluginSdk.PluginStatus.Ok">
            <summary>
            Creates a new PluginStatus of OK
            </summary>
            <returns>A PluginStatus with a status of OK</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.PluginStatus.Info(System.String)">
            <summary>
            Creates a new PluginStatus with the status of Info and the specified description
            </summary>
            <param name="statusText">A detailed explanation of the status</param>
            <returns>A PluginStatus with a status of Info</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.PluginStatus.Warning(System.String)">
            <summary>
            Creates a new PluginStatus with the status of Warning and the specified description
            </summary>
            <param name="statusText">A detailed explanation of the status</param>
            <returns>A PluginStatus with a status of Warning</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.PluginStatus.Critical(System.String)">
            <summary>
            Creates a new PluginStatus with the status of Critical and the specified description
            </summary>
            <param name="statusText">A detailed explanation of the status</param>
            <returns>A PluginStatus with a status of Critical</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.PluginStatus.Fatal(System.String)">
            <summary>
            Creates a new PluginStatus with the status of Fatal and the specified description
            </summary>
            <param name="statusText">A detailed explanation of the status</param>
            <returns>A PluginStatus with a status of Fatal</returns>
        </member>
        <member name="T:HomeSeer.PluginSdk.PluginStatus.EPluginStatus">
            <summary>
            An Enum representing the current state of a plugin
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.PluginStatus.EPluginStatus.Ok">
            <summary>
            Everything is fine.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.PluginStatus.EPluginStatus.Info">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.PluginStatus.EPluginStatus.Warning">
            <summary>
            Something wrong, but should not affect operation.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.PluginStatus.EPluginStatus.Critical">
            <summary>
            Something wrong that will prevent operation from being successful.
            </summary>
        </member>
        <member name="F:HomeSeer.PluginSdk.PluginStatus.EPluginStatus.Fatal">
            <summary>
            Something really wrong and the plug-in cannot function.
            </summary>
        </member>
        <member name="T:HomeSeer.PluginSdk.IPlugin">
            <summary>
            The core plugin interface used by HomeSeer to interact with third-party plugins.
            <para>
            The <see cref="T:HomeSeer.PluginSdk.AbstractPlugin"/> class provides a default implementation of this interface
             that should be used to develop plugins.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IPlugin.Id">
            <summary>
            Unique ID for this plugin, needs to be unique for all plugins.
            <para>
            Do NOT use special characters or spaces in your plugin ID
            </para>
            </summary>
            <remarks>
            The ID is used throughout the HomeSeer platform to target this plugin specifically via URL or internal code.
             It is recommended to use the name of your plugin, removing special characters and spaces, as the ID to make it
             easy to match them with one-another.
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.IPlugin.Name">
            <summary>
            The name of the plugin
            <para>
            Do NOT use special characters in your plugin name with the exception of "-", ".", and " " (space).
            </para>
            <para>
            This is used to identify your plug-in to HomeSeer and your users. 
            Keep the name to 16 characters or less. 
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IPlugin.HasSettings">
            <summary>
            Whether the plugin has settings pages or not.
            <para>
            If this is TRUE, you must return valid JUI data in GetJuiSettingsPages()
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IPlugin.AccessLevel">
            <summary>
            Return the access level of this plug-in. Access level is the licensing mode.
             Use the integer value corresponding to the <see cref="T:HomeSeer.PluginSdk.Types.EAccessLevel"/> for your plugin
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IPlugin.SupportsConfigDevice">
            <summary>
            Whether this plugin supports a device configuration page for devices created/managed by it
            <para>
            TRUE will cause HomeSeer to call GetJuiDeviceConfigPage() for devices this plugin manages.
              FALSE means HomeSeer will not call GetJuiDeviceConfigPage() for any devices
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IPlugin.SupportsConfigFeature">
            <summary>
            Whether this plugin supports a feature configuration page for features created/managed by it
            <para>
            TRUE will cause HomeSeer to call GetJuiDeviceConfigPage() for features this plugin manages.
              FALSE means HomeSeer will not call GetJuiDeviceConfigPage() for any features 
            </para>
            </summary>
            <remarks>
            Setting this to TRUE allows you to display a unique page for each feature instead of using a single page
             for the device and all of its features.
            </remarks>
        </member>
        <member name="P:HomeSeer.PluginSdk.IPlugin.SupportsConfigDeviceAll">
            <summary>
            Whether this plugin supports a device configuration page for all devices
            <para>
            TRUE will cause HomeSeer to call GetJuiDeviceConfigPage() for every device.
              FALSE means HomeSeer will not call GetJuiDeviceConfigPage() for all devices
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IPlugin.ActionCount">
            <summary>
            The number of unique event actions the plugin supports
            </summary>
        </member>
        <member name="P:HomeSeer.PluginSdk.IPlugin.TriggerCount">
            <summary>
            The number of unique event triggers the plugin supports
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.InitIO">
            <summary>
            Called by the HomeSeer system to initialize the plugin.
            <para>
            This is the primary entry point for all plugins.  Start the plugin and get it ready for use.
            </para>
            </summary>
            <returns>
            TRUE if the plugin started successfully; FALSE if it did not
            <para>
            You should opt for throwing an exception that contains a detailed messaged over
             returning FALSE whenever possible.
            </para>
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.OnStatusCheck">
            <summary>
            Called by the HomeSeer system to determine the status of the plugin.
            </summary>
            <returns>A PluginStatus object describing the state of the plugin</returns>
            <seealso cref="T:HomeSeer.PluginSdk.PluginStatus"/>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.ShutdownIO">
            <summary>
            Called by the HomeSeer system to shutdown the plugin and its operations
            </summary>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.SetIOMulti(System.Collections.Generic.List{HomeSeer.PluginSdk.Devices.Controls.ControlEvent})">
            <summary>
            Called by the HomeSeer system when a device that this plugin owns is controlled.
            <para>
            A plugin owns a device when its Interface property is set to the plugin ID.
            </para>
            </summary>
            <param name="controlEvents">
            A collection of <see cref="T:HomeSeer.PluginSdk.Devices.Controls.ControlEvent"/> objects,
             one for each device being controlled
            </param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.HasJuiDeviceConfigPage(System.Int32)">
            <summary>
            Called by HomeSeer Core to determine if a device or feature configuration page is available for a particular device or feature.
             Only called if <see cref="P:HomeSeer.PluginSdk.IPlugin.SupportsConfigDevice"/> or <see cref="P:HomeSeer.PluginSdk.IPlugin.SupportsConfigFeature"/> or <see cref="P:HomeSeer.PluginSdk.IPlugin.SupportsConfigDeviceAll"/> is set to TRUE.
            </summary>
            <param name="devOrFeatRef">The <see cref="P:HomeSeer.PluginSdk.Devices.AbstractHsDevice.Ref"/> of the device</param>
            <returns>
            True if there is a page available, false if not.
             Returning True will cause HomeSeer Core to call <see cref="M:HomeSeer.PluginSdk.IPlugin.GetJuiDeviceConfigPage(System.Int32)"/> for the device or feature
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.GetJuiDeviceConfigPage(System.Int32)">
            <summary>
            Called by the HomeSeer software to obtain a HS-JUI device or feature configuration page for a specific device or feature
            </summary>
            <param name="devOrFeatRef">The device or feature reference to get the page for</param>
            <returns>A JSON serialized Jui.Page</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.SaveJuiDeviceConfigPage(System.String,System.Int32)">
            <summary>
            Save updated values for a HS-JUI formatted device or feature config page
            </summary>
            <param name="pageContent">A JSON serialized Jui.Page describing what has changed about the page</param>
            <param name="devOrFeatRef">The reference of the device or feature the config page is for</param>
            <returns>
            TRUE if the save was successful; FALSE if it was unsuccessful. 
            <para>
            An exception should be thrown with details about the error if it was unsuccessful
            </para>
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.UpdateStatusNow(System.Int32)">
            <summary>
            Called by the HomeSeer system when it needs the current status for a device/feature owned by the plugin.
            <para>
            This should force the device/feature to update its current status on HomeSeer.
            </para>
            </summary>
            <param name="devOrFeatRef">The reference ID of the device/feature to poll</param>
            <returns>An <see cref="T:HomeSeer.PluginSdk.Devices.EPollResponse"/> describing the result of the request</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.GetJuiSettingsPages">
            <summary>
            Called by the HomeSeer software to obtain a list of settings pages
            </summary>
            <returns>
            A SettingsCollection serialized to a JSON string
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.SaveJuiSettingsPages(System.String)">
            <summary>
            Called by the HomeSeer system when settings changes need to be saved
            </summary>
            <param name="jsonString">A List of Jui.Pages containing views that have changed, serialized as JSON</param>
            <returns>
            TRUE if the save was successful; FALSE if it was unsuccessful. 
            <para>
            An exception should be thrown with details about the error if it was unsuccessful
            </para>
            </returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.HsEvent(HomeSeer.PluginSdk.Constants.HSEvent,System.Object[])">
            <summary>
            When you wish to have HomeSeer call back in to your plug-in or application when certain events 
            happen in the system, call the RegisterEventCB procedure and provide it with event you wish to monitor.  
            See RegisterEventCB for more information and an example and event types.
            <para>
            The parameters are passed in an array of objects.  Each entry in the array is a parameter.  
            The number of entries depends on the type of event and are described below.  
            The event type is always present in the first entry or params(0).
            </para>
            </summary>
            <param name="eventType">The type of event that has occurred</param>
            <param name="params">The data associated with the event</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.GetActionNameByNumber(System.Int32)">
            <summary>
            Return the name of the action given an action number
            <para>The name of the action will be displayed in the HomeSeer events actions list.</para>
            </summary>
            <param name="actionNum">The number of the action to get the name for</param>
            <returns>The name of the action associated with the action number</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.ActionBuildUI(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by the HomeSeer system when an event is in edit mode and in need of HTML controls for the user.
            </summary>
            <param name="actInfo">Object that contains information about the action like current selections.</param>
            <returns>HTML controls that need to be displayed so the user can select the action parameters.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.ActionConfigured(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by the HomeSeer system to verify that the configuration is valid and can be saved
            </summary>
            <param name="actInfo">Object describing the action.</param>
            <returns>TRUE if the given action is configured properly; FALSE if the action shouldn't be saved</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.ActionFormatUI(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by the HomeSeer system when an event action is finished being configured and needs to be displayed
             in an easy to read format.
            </summary>
            <param name="actInfo">Object that contains information about the current configuration of the trigger.</param>
            <returns>HTML representing easy to read text describing the action</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.ActionProcessPostUI(System.Collections.Generic.Dictionary{System.String,System.String},HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by the HomeSeer system to process selections when a user edits your event actions.
            </summary>
            <param name="postData">A collection of name value pairs that include the user's selections.</param>
            <param name="trigInfoIn">Object that contains information about the action.</param>
            <returns>Object the holds the parsed information for the action. HomeSeer will save this information for you in the database.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.ActionReferencesDevice(HomeSeer.PluginSdk.Events.TrigActInfo,System.Int32)">
            <summary>
            Called by the HomeSeer system to determine if a specified device is referenced by a certain action.
            </summary>
            <param name="actInfo">Object describing the action.</param>
            <param name="devRef">The reference ID of the device to check</param>
            <returns>TRUE if the action references the device; FALSE if it does not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.HandleAction(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by the HomeSeer system when an event is triggered and the plugin needs to carry out a specific action.
            </summary>
            <param name="actInfo">Object describing the trigger and action.</param>
            <returns>TRUE if the action was executed successfully; FALSE if there was an error</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.TriggerCanBeCondition(System.Int32)">
            <summary>
            Called by HomeSeer to determine if a given trigger can also be used as a condition
            </summary>
            <param name="triggerNum">The number of the trigger to check</param>
            <returns>TRUE if the given trigger can also be used as a condition, for the given trigger number.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.GetSubTriggerCount(System.Int32)">
            <summary>
            Returns the number of sub triggers the plugin supports for the specified trigger number
            </summary>
            <param name="triggerNum">The number of the trigger to check</param>
            <returns>The number of sub triggers the specified trigger number supports</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.GetSubTriggerNameByNumber(System.Int32,System.Int32)">
            <summary>
            The name of the sub trigger with the specified number of the trigger with the specified number
            </summary>
            <param name="triggerNum">The number of the trigger to check</param>
            <param name="subTriggerNum">The number of the sub trigger to check</param>
            <returns>The name of the sub trigger</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.IsTriggerConfigValid(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Given a TrigActInfo object, detect if this trigger is configured properly
            </summary>
            <param name="trigInfo">The trigger info to validate</param>
            <returns>TRUE if the trigger is configured properly, FALSE otherwise</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.GetTriggerNameByNumber(System.Int32)">
            <summary>
            Return the name of the given trigger based on the specified trigger number
            </summary>
            <param name="triggerNum">The trigger number to get the name for</param>
            <returns>The name of the trigger</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.TriggerBuildUI(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by the HomeSeer system when an event is in edit mode and in need of HTML controls for the user.
            </summary>
            <param name="trigInfo">Object that contains information about the current configuration of the trigger.</param>
            <returns>HTML controls that need to be displayed so the user can select the trigger parameters.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.TriggerFormatUI(HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by the HomeSeer system when an event trigger is finished being configured and needs to be displayed
             in an easy to read format.
            </summary>
            <param name="trigInfo">Object that contains information about the current configuration of the trigger.</param>
            <returns>HTML representing easy to read text describing the trigger</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.TriggerProcessPostUI(System.Collections.Generic.Dictionary{System.String,System.String},HomeSeer.PluginSdk.Events.TrigActInfo)">
            <summary>
            Called by the HomeSeer system to process selections when a user edits your event triggers.
            </summary>
            <param name="postData">A collection of name value pairs that include the user's selections.</param>
            <param name="trigInfoIn">Object that contains information about the trigger.</param>
            <returns>Object the holds the parsed information for the trigger. HomeSeer will save this information for you in the database.</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.TriggerReferencesDeviceOrFeature(HomeSeer.PluginSdk.Events.TrigActInfo,System.Int32)">
            <summary>
            Called by the HomeSeer system to determine if a specified device is referenced by a certain trigger.
            </summary>
            <param name="trigInfo">Object describing the trigger.</param>
            <param name="devOrFeatRef">The reference ID of the device or feature to check</param>
            <returns>TRUE if the trigger references the device; FALSE if it does not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.TriggerTrue(HomeSeer.PluginSdk.Events.TrigActInfo,System.Boolean)">
            <summary>
            Called by HomeSeer when a trigger needs to be evaluated as a condition
            </summary>
            <param name="trigInfo">Object describing the trigger</param>
            <param name="isCondition">TRUE if the trigger represents a condition, FALSE if it is a trigger</param>
            <returns>TRUE if the conditions are met; FALSE if they are not</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.PluginFunction(System.String,System.Object[])">
            <summary>
            Called by the HomeSeer system to run a plugin function by name using reflection
            </summary>
            <param name="procName">The name of the method to execute</param>
            <param name="params">The parameters to execute the method with</param>
            <returns>The result of the method execution</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.PluginPropertyGet(System.String)">
            <summary>
            Called by the HomeSeer system to get the value of a property by name using reflection
            </summary>
            <param name="propName">The name of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.PluginPropertySet(System.String,System.Object)">
            <summary>
            Called by the HomeSeer system to set the value of a property by name using reflection
            </summary>
            <param name="propName">The name of the property</param>
            <param name="value">The new value of the property</param>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.PostBackProc(System.String,System.String,System.String,System.Int32)">
            <summary>
            Called by the HomeSeer system when a page owned by this plugin receives an HTTP POST request
            </summary>
            <param name="page">The page that received the POST request</param>
            <param name="data">The data included in the request</param>
            <param name="user">The user responsible for initiating the request</param>
            <param name="userRights">The user's rights</param>
            <returns>A string of data that is returned to the requester</returns>
        </member>
        <member name="M:HomeSeer.PluginSdk.IPlugin.SpeakIn(System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            If your plug-in is registered as a Speak proxy plug-in, then when HomeSeer is asked to speak something.
             It will pass the speak information to your plug-in using this procedure.
             When your plug-in is ready to do the actual speaking, it should call SpeakProxy, and pass the information
             that it got from this procedure to SpeakProxy.
             It may be necessary or a feature of your plug-in to modify the text being spoken or the host/instance
             list provided in the host parameter - this is acceptable.
            </summary>
            <remarks>
            PLEASE NOTE: Code related to the Speech components in HomeSeer were ported from the HS3 plugin API and
             have not been fully tested to verify full functionality from the new SDK. The Speech API may undergo
             significant changes in the near future. Please use with caution.
            </remarks>
            <param name="speechDevice">
            This is the device that is to be used for the speaking.  In older versions of HomeSeer, this value was
             used to indicate the sound card to use, and if it was over 100, then it indicated that it was speaking
             for HomeSeer Phone (device - 100 = phone line), or the WAV audio device to use.
             Although this is still used for HomeSeer Phone, speaks for HomeSeer phone are never proxied and so
             values >= 100 should never been seen in the device parameter.
             Pass the device parameter unchanged to SpeakProxy.
            </param>
            <param name="spokenText">
            This is the text to be spoken, or if it is a WAV file to be played, then the characters ":\" will be
             found starting at position 2 of the string as playing a WAV file with the speak command in HomeSeer
             REQUIRES a fully qualified path and filename of the WAV file to play.
            </param>
            <param name="wait">
            This parameter tells HomeSeer whether to continue processing commands immediately or to wait until
             the speak command is finished - pass this parameter unchanged to SpeakProxy.
            </param>
            <param name="host">
            This is a list of host:instances to speak or play the WAV file on.
             An empty string or a single asterisk (*) indicates all connected speaker clients on all hosts.
             Normally this parameter is passed to SpeakProxy unchanged.
            </param>
        </member>
        <member name="T:HomeSeer.Jui.Types.ELabelType">
            <summary>
            The label type determines how a label view is displayed
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.ELabelType.Default">
            <summary>
            Displays the label as regular text
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.ELabelType.Preformatted">
            <summary>
            Displays the label as preformatted text
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Types.EInputType">
            <summary>
            The input type determines the type of data that will be accepted by an input
            view and the keyboard that is shown to the user when they are typing in it.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Text">
            <summary>
            Used for text of any kind
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Number">
            <summary>
            Used for whole numbers
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Email">
            <summary>
            Used for Email Addresses in the format of *@*.*
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Url">
            <summary>
            Used for web addresses; values are parsed to ensure they are a valid URI
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Password">
            <summary>
            Used to mask secure text
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Decimal">
            <summary>
            Used for decimal numbers
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Date">
            <summary>
            Used for date only pickers
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Time">
            <summary>
            Used for time only pickers
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.DateTime">
            <summary>
            Used for date and time multi pickers
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Types.EPageType">
            <summary>
            A page's type determines where it is published in HomeSeer and what kinds of tasks it is used for
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.Settings">
            <summary>
            A settings page is used to configure the way the plug-in behaves
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.DeviceConfig">
            <summary>
            These pages can be used to include customization options and procedures that can
            be executed by the user for a specific device
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.Generic">
            <summary>
            These pages can be used for whatever you would like if you want to use JUI to
            generate MDBootstrap compatible HTML elements
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.EventAction">
            <summary>
            These pages are used to display the configuration options for event actions
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.EventTrigger">
            <summary>
            These pages are used to display the configuration options for event triggers and conditions
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Types.ESelectListType">
            <summary>
            The select list type determines how a select list view is displayed
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.ESelectListType.DropDown">
            <summary>
            Displays the select list as a traditional drop down list
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.ESelectListType.RadioList">
            <summary>
            Displays the select list as a collection of radio buttons
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.ESelectListType.SearchableDropDown">
            <summary>
            Displays the select list as a searchable drop down list
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Types.EToggleType">
            <summary>
            The toggle type determines how it is displayed
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EToggleType.Switch">
            <summary>
            Display a toggle as a switch
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EToggleType.Checkbox">
            <summary>
            Display a toggle as a checkbox
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Types.EViewType">
            <summary>
            The type that a view is set to determines what class a client application will deserialize it as.
            Each view type has a different set of properties that specifies how it behaves and how it should
            be displayed to the user
            <para>
            Some view types are ignored by different page types.
            Refer to the page type you are using to determine what views are available for use.
            </para>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Undefined">
            <summary>
            No type is defined.  This will cause an error
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Group">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.ViewGroup"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Label">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.LabelView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.SelectList">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.SelectListView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Input">
            <summary>
            An <see cref="T:HomeSeer.Jui.Views.InputView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Toggle">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.ToggleView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Button">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.NavigateButtonView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.TextArea">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.TextAreaView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.TimeSpan">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.TimeSpanView"/>
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Views.EColSize">
            <summary>
            The possible sizes for a column in the <a href="https://mdbootstrap.com/docs/standard/layout/grid/">bootstrap grid system</a>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col">
            <summary>
            Equal-width column
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col1">
            <summary>
            Column of size 1
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col2">
            <summary>
            Column of size 2
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col3">
            <summary>
            Column of size 3
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col4">
            <summary>
            Column of size 4
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col5">
            <summary>
            Column of size 5
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col6">
            <summary>
            Column of size 6
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col7">
            <summary>
            Column of size 7
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col8">
            <summary>
            Column of size 8
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col9">
            <summary>
            Column of size 9
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col10">
            <summary>
            Column of size 10
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col11">
            <summary>
            Column of size 11
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Col12">
            <summary>
            Column of size 12
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EColSize.Auto">
            <summary>
            Size based on the natural width of their content
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Views.GridView">
            <summary>
            A grid view defines a sub-grouping of views with a header.
            It uses the <a href="https://mdbootstrap.com/docs/standard/layout/grid/">bootstrap grid system</a> to layout the views within the group
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.GridView._rows">
            <summary>
            The rows to display within this group.
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridView.#ctor(System.String)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.ViewGroup"/>
            <summary>
            Create a new instance of a grid view with an ID
            </summary>
            <param name="id">The unique ID of the group</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridView.#ctor(System.String,System.String)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.ViewGroup"/>
            <summary>
            Create a new instance of a grid view with an ID and Name
            </summary>
            <param name="id">The unique ID of the group</param>
            <param name="name">The name of the group. DEFAULT: null</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridView.AddView(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddView(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add a view to the grid
            The view will be aded as a single row. 
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridView.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView})">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add multiple views to the grid
            The views will be added as stacked rows
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified collection of views is null</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridView.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView})">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Set the list of views in this group
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridView.AddRow(HomeSeer.Jui.Views.GridRow)">
            <summary>
            Add a row to the group
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified row is null</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridView.RemoveAllViews">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewGroup.RemoveAllViews"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridView.ToHtml(System.Int32)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)"/>
        </member>
        <member name="T:HomeSeer.Jui.Views.GridRow">
            <summary>
            A set of views that are displayed as a flexbox row within a <see cref="T:HomeSeer.Jui.Views.GridView"/>
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.GridRow.Views">
            <summary>
            The views to display within this row. This is for access only.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.GridRow.HorizontalAlignment">
            <summary>
            The  <a href="https://getbootstrap.com/docs/4.0/layout/grid/#horizontal-alignment">horizontal alignment</a> of the items in the row
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.GridRow.VerticalAlignment">
            <summary>
            The  <a href="https://getbootstrap.com/docs/4.0/layout/grid/#vertical-alignment">vertical alignment</a> of the items in the row
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.GridRow._items">
            <summary>
            The items to display within this row.
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridRow.#ctor">
            <summary>
            Create a new instance of a view group row
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridRow.AddItem(HomeSeer.Jui.Views.AbstractView,HomeSeer.Jui.Views.EColSize,HomeSeer.Jui.Views.EColSize,HomeSeer.Jui.Views.EColSize,HomeSeer.Jui.Views.EColSize,HomeSeer.Jui.Views.EColSize)">
            <summary>
            Add an item to the row
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified view or its ID is null</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridRow.ToHtml(System.Int32)">
            <summary>
            Get a string representation of this grid row converted into HTML
            </summary>
            <returns>An HTML representation of the view as a string</returns>
        </member>
        <member name="T:HomeSeer.Jui.Views.GridRowItem">
            <summary>
            A view displayed as a flex item within a <see cref="T:HomeSeer.Jui.Views.GridRow"/>
            A size can be associated to this item for each <a href="https://mdbootstrap.com/docs/standard/layout/breakpoints/">responsive breakpoint</a>
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.GridRowItem.View">
            <summary>
            The view to display.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.GridRowItem.ExtraSmallSize">
            <summary>
            Size for screen width 0-576px.
            If the same size is used for all screen width, use this property to set it, and leave the other property sizes to <see cref="F:HomeSeer.Jui.Views.EColSize.None"/>
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.GridRowItem.SmallSize">
            <summary>
            Size for screen width >= 576px
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.GridRowItem.MediumSize">
            <summary>
            Size for screen width >= 768px
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.GridRowItem.LargeSize">
            <summary>
            Size for screen width >= 960px
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.GridRowItem.ExtraLargeSize">
            <summary>
            Size for screen width >= 1200px
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridRowItem.#ctor(HomeSeer.Jui.Views.AbstractView,HomeSeer.Jui.Views.EColSize,HomeSeer.Jui.Views.EColSize,HomeSeer.Jui.Views.EColSize,HomeSeer.Jui.Views.EColSize,HomeSeer.Jui.Views.EColSize)">
            <summary>
            Create a new instance of a view row item
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.GridRowItem.GetHtmlDivClass">
            <summary>
            Get the HTML div class for this item
            </summary>
            <returns>The div class for this item</returns>
        </member>
        <member name="T:HomeSeer.Jui.Views.EHorizontalAlignment">
            <summary>
            The possible behaviors for the horizontal alignment of items in a row 
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EHorizontalAlignment.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EHorizontalAlignment.JustifyContentStart">
            <summary>
            Items are packed towards the start of the row
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EHorizontalAlignment.JustifyContentEnd">
            <summary>
            Items are packed towards the end of the row
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EHorizontalAlignment.JustifyContentCenter">
            <summary>
            Items are centered along the row
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EHorizontalAlignment.JustifyContentAround">
            <summary>
            Items are evenly distributed in the row with equal space around them
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EHorizontalAlignment.JustifyContentBetween">
            <summary>
            Items are evenly distributed in the row; first item is on the start of the row, last item on the end of the row
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Views.EVerticalAlignment">
            <summary>
            The possible behaviors for the vertical alignment of items in a row 
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EVerticalAlignment.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EVerticalAlignment.AlignItemsStart">
            <summary>
            Items are placed at the top of the row
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EVerticalAlignment.AlignItemsEnd">
            <summary>
            Items are placed at the bottom of the row
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.EVerticalAlignment.AlignItemsCenter">
            <summary>
            Items are centered in the row
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Views.PageFactory">
            <summary>
            A factory class for creating pages in a more streamlined way
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.PageFactory.Page">
            <summary>
            The page being created
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.PageFactory.CreateSettingsPage(System.String,System.String)">
            <summary>
            Create a new settings page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new PageFactory containing a page with its type set to EPageType.Settings</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.PageFactory.CreateDeviceConfigPage(System.String,System.String)">
            <summary>
            Create a new device configuration page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new PageFactory containing a page with its type set to EPageType.DeviceConfig</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.PageFactory.CreateGenericPage(System.String,System.String)">
            <summary>
            Create a new, generic page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new PageFactory containing a page with its type set to EPageType.Generic</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.PageFactory.CreateEventActionPage(System.String,System.String)">
            <summary>
            Create a new, event action page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new PageFactory containing a page with its type set to EPageType.EventAction</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.PageFactory.CreateEventTriggerPage(System.String,System.String)">
            <summary>
            Create a new, event trigger page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new PageFactory containing a page with its type set to EPageType.EventTrigger</returns>
        </member>
        <member name="T:HomeSeer.Jui.Views.TimeSpanView">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            A time span allows user to enter a time interval in days, hours, minutes and seconds
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.TimeSpanView.Value">
            <summary>
            The current value of the field
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.TimeSpanView.ShowDays">
            <summary>
            Wether a number of days can be entered
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.TimeSpanView.ShowSeconds">
            <summary>
            Wether a number of seconds can be entered
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.TimeSpanView.#ctor(System.String,System.String)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of an TimeSpanView with an ID and  a Name
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.TimeSpanView.#ctor(System.String,System.String,System.TimeSpan)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of an InputView with an ID, a Name, and a value.
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View</param>
            <param name="value">The time span value</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.TimeSpanView.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.Update(HomeSeer.Jui.Views.AbstractView)"/>
            <summary>
            Update the view to the new state.  This will change the time span value 
            </summary>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when the new view's class doesn't match the calling view</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.TimeSpanView.UpdateValue(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.UpdateValue(System.String)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.TimeSpanView.GetStringValue">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.GetStringValue"/>
            <remarks>
            The same as <see cref="P:HomeSeer.Jui.Views.TimeSpanView.Value"/>
            </remarks>
        </member>
        <member name="M:HomeSeer.Jui.Views.TimeSpanView.ToHtml(System.Int32)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)"/>
        </member>
        <member name="T:HomeSeer.Jui.Views.TextAreaView">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            A text area view is an editable text box for the user to enter a large volume of text
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.TextAreaView.Rows">
            <summary>
            The number of text rows displayed. Must be >= 1
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the number of rows is set to an invalid value</exception>
        </member>
        <member name="P:HomeSeer.Jui.Views.TextAreaView.Value">
            <summary>
            The current value of the field
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.TextAreaView.#ctor(System.String,System.String,System.Int32)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of an TextAreaView with an ID, a Name, and the number of rows.
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View</param>
            <param name="rows">The number of text rows in the text area. DEFAULT: 5</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the number of rows is set to an invalid value</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.TextAreaView.#ctor(System.String,System.String,System.String,System.Int32)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of an TextAreaView with an ID, a Name, a Value, and the number of rows.
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View</param>
            <param name="value">The value inputted into the field</param>
            <param name="rows">The number of text rows in the text area. DEFAULT: 5</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the number of rows is set to an invalid value</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.TextAreaView.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.Update(HomeSeer.Jui.Views.AbstractView)"/>
            <summary>
            Update the view to the new state.  This will change the inputted value 
            </summary>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when the new view's class doesn't match the calling view</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.TextAreaView.UpdateValue(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.UpdateValue(System.String)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.TextAreaView.GetStringValue">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.GetStringValue"/>
            <remarks>
            The same as <see cref="P:HomeSeer.Jui.Views.TextAreaView.Value"/>
            </remarks>
        </member>
        <member name="M:HomeSeer.Jui.Views.TextAreaView.ToHtml(System.Int32)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)"/>
        </member>
        <member name="T:HomeSeer.Jui.Views.AbstractView">
            <summary>
            The base implementation of a JUI view
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.AbstractView.Id">
            <summary>
            A unique identifier for this view.  You will need to use this to identify the view when HomeSeer 
            communicates changes to its values from a client.
            <para>
            Do NOT use any of the following special characters in your view id: <![CDATA[!"#$%&'()*+,./:;<=>?@[]^`{|}~]]>
            For consistency and readability it is advised to use the format of COMPANY-PLUGIN-PAGE-VIEW
            </para>
            <para>
            For example: a LabelView on the first settings page in the Z-Wave Plugin
            might have an id of HomeSeer-ZWave-Settings1-InterfaceName
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.AbstractView.Name">
            <summary>
            The name/title of this view
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.AbstractView.Type">
            <summary>
            The type of this view.
            <para>
            This is automatically configured
            </para>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.AbstractView.HtmlIndent">
            <summary>
            Represents a tab/indent for formatting HTML
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.AbstractView.NonAllowedCharactersForId">
            <summary>
            The list of special characters that are not allowed in a view ID
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.#ctor(System.String)">
            <summary>
            Create an instance of an AbstractView with an ID
            </summary>
            <param name="id">The unique ID for the AbstractView</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a view is created with an invalid ID</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.#ctor(System.String,System.String)">
            <summary>
            Create an instance of an AbstractView with an ID and Name
            </summary>
            <param name="id">The unique ID for the AbstractView</param>
            <param name="name">The name for the AbstractView</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a view is created with an invalid ID</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.GetStringValue">
            <summary>
            Get the value associated with this view as a string if there is one.
            </summary>
            <returns>
            The value stored in this view as a string or NULL if there is no value stored.
            </returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.Update(HomeSeer.Jui.Views.AbstractView)">
            <summary>
            Update the the user editable properties from a new version of the same view
            </summary>
            <param name="newViewState">
            The new state of the view being updated.
            This view's ID and Type must match the calling view exactly
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when the new state of the view is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the new view's ID or Type don't match the calling view</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.UpdateValue(System.String)">
            <summary>
            Update the value of the view
            </summary>
            <param name="value">The new value</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)">
            <summary>
            Get a string representation of this view converted into HTML
            </summary>
            <returns>An HTML representation of the view as a string</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.GetIndentStringFromNumber(System.Int32)">
            <summary>
            Used to generate the exact tab spacing (using spaces) for any given indent amount
            </summary>
            <param name="indent">The number of indents for the line</param>
            <returns>A string containing the number of spaces to achieve the desired indent</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.IdContainsNonAllowedCharacters">
            <summary>
            Used to check if the view ID contains non-allowed characters
            </summary>
            <returns>True if view ID contains at least one non-allowed characters, False otherwise</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.ShallowCopy">
            <summary>
            Create a shallow copy of this view
            </summary>
            <returns>The shallow copy of the view</returns>
        </member>
        <member name="T:HomeSeer.Jui.Views.NavigateButtonView">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            A button is used to navigate the UI to another HomeSeer page.
            </summary>
            <remarks>
            This type of view is not recommended for event actions and triggers because it will force the user away from
             the page they are on. It disrupts the workflow for editing and creating actions and triggers.
            </remarks>
        </member>
        <member name="P:HomeSeer.Jui.Views.NavigateButtonView.HomeSeerUrl">
            <summary>
            The HomeSeer URL this button navigates to. This must be a location relative to the hostname of the system.
             It must start with a /
            <para>
            For example: "/devices.html"
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.NavigateButtonView.#ctor(System.String,System.String,System.String)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create an instance of a ButtonView with an ID and Name
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View. Must not be blank</param>
            <param name="homeSeerUrl">The HomeSeer URL this button navigates to. See <see cref="P:HomeSeer.Jui.Views.NavigateButtonView.HomeSeerUrl"/> for the correct format.</param>
            <exception cref="T:System.ArgumentException">Thrown if a view is created with an invalid Name or HomeSeerUrl</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.NavigateButtonView.GetStringValue">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.GetStringValue"/>
            <returns>Returns null</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.NavigateButtonView.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.Update(HomeSeer.Jui.Views.AbstractView)"/>
            <summary>
            Update the view to the new state. This will change the <see cref="P:HomeSeer.Jui.Views.NavigateButtonView.HomeSeerUrl"/> 
            </summary>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when the new view's class doesn't match the calling view</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.NavigateButtonView.ToHtml(System.Int32)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)"/>
        </member>
        <member name="T:HomeSeer.Jui.Views.InputView">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            An input view is an editable text box for the user to enter strings, numbers, etc.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.InputView.InputType">
            <summary>
            The style of input accepted by this field.
            This determines the keyboard the user is shown when on a mobile device.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.InputView.Value">
            <summary>
            The current value of the field
            </summary>
            <exception cref="T:HomeSeer.Jui.Views.InvalidValueForTypeException">Thrown when the value is invalid for the input type</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.#ctor(System.String,System.String,HomeSeer.Jui.Types.EInputType)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of an InputView with an ID, a Name, and the specified style.
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View</param>
            <param name="type">The style of the input. DEFAULT: <see cref="F:HomeSeer.Jui.Types.EInputType.Text"/></param>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.#ctor(System.String,System.String,System.String,HomeSeer.Jui.Types.EInputType)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of an InputView with an ID, a Name, a Value, and the specified style.
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View</param>
            <param name="value">The value inputted into the field</param>
            <param name="type">The style of the input. DEFAULT: <see cref="F:HomeSeer.Jui.Types.EInputType.Text"/></param>
            <exception cref="T:HomeSeer.Jui.Views.InvalidValueForTypeException">Thrown when the value is invalid for the input type</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.Update(HomeSeer.Jui.Views.AbstractView)"/>
            <summary>
            Update the view to the new state.  This will change the inputted value 
            </summary>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when the new view's class doesn't match the calling view</exception>
            <exception cref="T:HomeSeer.Jui.Views.InvalidValueForTypeException">Thrown when the value is invalid for the input type</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.UpdateValue(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.UpdateValue(System.String)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.IsValueValidForType(System.String)">
            <summary>
            Check if the value is valid for the type set on the input view
            </summary>
            <param name="value">The value to check</param>
            <returns>TRUE if the value is valid for the type or FALSE if it is not</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.GetStringValue">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.GetStringValue"/>
            <remarks>
            The same as <see cref="P:HomeSeer.Jui.Views.InputView.Value"/>
            </remarks>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.ToHtml(System.Int32)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)"/>
        </member>
        <member name="T:HomeSeer.Jui.Views.InvalidValueForTypeException">
            <summary>
            The exception that is thrown when a value is invalid for a view's configured type
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.InvalidValueForTypeException.#ctor">
            <summary>
            Create an exception with the default message
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.InvalidValueForTypeException.#ctor(System.String)">
            <summary>
            Create an exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.InvalidValueForTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Create an exception wrapping another exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
            <param name="innerException">The exception to wrap</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.InvalidValueForTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor used for deserialization. 
            This is mandatory in order for HSCF to be able to deserialize this exception.
            </summary>
            <param name="info">The data to deserialize from</param>
            <param name="context">The context of the source stream</param>
        </member>
        <member name="T:HomeSeer.Jui.Views.JsonDataException">
            <summary>
            The exception thrown when there is a problem serializing/deserializing JSON data
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.JsonDataException.#ctor">
            <summary>
            Create an exception with the default message
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.JsonDataException.#ctor(System.Exception)">
            <summary>
            Create an exception with the default message that wraps another exception
            </summary>
            <param name="innerException">The exception to wrap</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.JsonDataException.#ctor(System.String)">
            <summary>
            Create an exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.JsonDataException.#ctor(System.String,System.Exception)">
            <summary>
            Create an exception wrapping another exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
            <param name="innerException">The exception to wrap</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.JsonDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor used for deserialization. 
            This is mandatory in order for HSCF to be able to deserialize this exception.
            </summary>
            <param name="info">The data to deserialize from</param>
            <param name="context">The context of the source stream</param>
        </member>
        <member name="T:HomeSeer.Jui.Views.LabelView">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Labels define static text displayed to the user.
            This can either be as a single set of text or as a combination of a name and value to indicate
            that a particular property is set to a given value.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.LabelView.LabelType">
            <summary>
            The type of the label
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.LabelView.Value">
            <summary>
            The value displayed; leave blank to just show the name
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.LabelView.#ctor(System.String,System.String)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of a Label with an ID and text value
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View; the text displayed by the label</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.LabelView.#ctor(System.String,System.String,System.String)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of a Label with an ID, Name, and text value
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View; the title of the label</param>
            <param name="value">The text displayed by the label</param>
            <exception cref="T:System.ArgumentNullException">Thrown if both the name and value are empty</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.LabelView.GetStringValue">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.GetStringValue"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.LabelView.ToHtml(System.Int32)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)"/>
        </member>
        <member name="T:HomeSeer.Jui.Views.Page">
            <summary>
            A page is the primary container used to define a view for the user interface.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.Id">
            <summary>
            A unique identifier for the page
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.Name">
            <summary>
            The name that is displayed to the user for this page
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.Type">
            <summary>
            The page's type; this determines where this page will present itself to the user.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.Image">
            <summary>
            A Base64 encoded image used as an icon for this page
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.Views">
            <summary>
            The collection of views that are on this page.   This is for access only.
            Use <see cref="M:HomeSeer.Jui.Views.Page.AddView(HomeSeer.Jui.Views.AbstractView)"/> and <see cref="M:HomeSeer.Jui.Views.Page.UpdateViewById(HomeSeer.Jui.Views.AbstractView)"/> for setting views/updating them
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.ViewIds">
            <summary>
            A list of the IDs of the views in this group
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.ViewCount">
            <summary>
            The number of views that are on this page.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.Page._views">
            <summary>
            The collection of views that are on this page.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.Page._viewIds">
            <summary>
            A set of IDs for the views on this page.  This is used to ensure that there are no duplicate IDs used.
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.#ctor(System.String,System.String,HomeSeer.Jui.Types.EPageType)">
            <summary>
            Create a new instance of a Page of the specified type with an ID and Name
            </summary>
            <param name="id">The unique ID of the page</param>
            <param name="name">The name of the page; the title shown to the user</param>
            <param name="type">The type of the page</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a Page is created with an invalid ID or Name</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.ToJsonString">
            <summary>
            Serialize the page as JSON
            </summary>
            <returns>A string containing the page formatted as JSON</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.FromJsonString(System.String)">
            <summary>
            Deserialize a JSON string to a page
            <para>
            This should always be wrapped in a try/catch in case the data received is malformed
            </para>
            </summary>
            <param name="jsonString">The JSON string containing the page</param>
            <returns>A Page</returns>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">Thrown when there was a problem deserializing the page</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.ListFromJson(System.String)">
            <summary>
            Deserialize a JSON string to a List of Pages
            </summary>
            <param name="jsonString">The JSON string containing the list of pages</param>
            <returns>A List of Jui.Page objects</returns>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">Thrown when there was a problem deserializing the page</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.ToHtml(System.Int32)">
            <summary>
            Get a string representation of this page converted into HTML
            </summary>
            <returns>An HTML representation of the page as a string</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.ToValueMap">
            <summary>
            Get a dictionary mapping IDs to values for the views on this page with mutable values.
            <para>
            These include: InputViews, SelectListViews, and ToggleViews
            </para>
            </summary>
            <returns>A Dictionary of view IDs to view values</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.MapViewIds">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.MapViewIds(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.AddView(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddView(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add a view to the page
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.AddViewDelta(HomeSeer.Jui.Views.AbstractView,System.Object)">
            <summary>
            Add a view change to the page
            <para>
            Used to log value changes for views on settings, device config, event trigger and event action pages.
            This method performs a shallow copy of the original view and update it with the new value before adding it to the page.
            </para>
            </summary>
            <param name="originalView">The original view before the change</param>
            <param name="newValue">The new value for the view</param>
            <exception cref="T:System.ArgumentNullException">A valid original view was not specified</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The type or integer value is invalid</exception>
            <exception cref="T:System.ArgumentException">The value type doesn't match the view type</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.AddViewDelta(System.String,System.Int32,System.Object)">
            <summary>
            Add a view change to the page
            <para>
            Used to log value changes for views on settings pages.  All names are left blank
            </para>
            </summary>
            <param name="id">The id of the view</param>
            <param name="type">The EViewType of the view</param>
            <param name="value">The new value for the view</param>
            <exception cref="T:System.ArgumentNullException">A valid ID was not specified</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The type or integer value is invalid</exception>
            <exception cref="T:System.ArgumentException">The value type doesn't match the view type</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView})">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add multiple views to the page
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView})">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Set the list of views on this page
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.ContainsViewWithId(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.ContainsViewWithId(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.GetViewById(System.String)">
            <summary>
            Get the view on the page with the given ID
            </summary>
            <param name="viewId">The ID of the view to get</param>
            <returns>
            The view with the specified ID as an <see cref="T:HomeSeer.Jui.Views.AbstractView"/>.
            This should be cast to the appropriate view type before use.
            </returns>
            <exception cref="T:System.ArgumentNullException">An invalid view ID was entered</exception>
            <exception cref="T:System.ArgumentException">No views are on the page to get</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view was not.  The page is probably malformed and should be recreated.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No views with that ID were found</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.GetViewById``1(System.String)">
            <summary>
            Get the view with a specific ID from a collection cast as the target type
            </summary>
            <param name="viewId">The ID of the view to get</param>
            <returns>
            The view with the specified ID cast as the target type.
            </returns>
            <exception cref="T:System.ArgumentNullException">An invalid view ID was entered</exception>
            <exception cref="T:System.ArgumentException">No views are on the page to get</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view was not.  The page is probably malformed and should be recreated.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No views with that ID were found</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.UpdateViewById(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.UpdateViewById(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.UpdateViewValueById(System.String,System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.UpdateViewValueById(System.String,System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.RemoveViewById(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.RemoveViewById(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.RemoveViewsAfterId(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.RemoveViewsAfterId(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.RemoveAllViews">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.RemoveAllViews(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Equals(System.Object)">
            <summary>
            Compares the Id, Name, and the number of views
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.GetHashCode">
            <summary>
            Compares the Id, Name, and the number of views
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Views.Page.Factory">
            <summary>
            A factory class for creating pages
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateSettingPage(System.String,System.String)">
            <summary>
            Create a new settings page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.Settings</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateSettingsPage(System.String,System.String)">
            <summary>
            Create a new settings page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.Settings</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateFeaturePage(System.String,System.String)">
            <summary>
            Create a new feature page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.Feature</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateDeviceIncPage(System.String,System.String)">
            <summary>
            Create a new device inclusion page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.DeviceInclude</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateDeviceConfigPage(System.String,System.String)">
            <summary>
            Create a new device configuration page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.DeviceConfig</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateGuidedProcessPage(System.String,System.String)">
            <summary>
            Create a new guided process page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.Guide</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateHtmlFeaturePage(System.String,System.String)">
            <summary>
            Create a new HTML feature page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.FeatureHtml</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateGenericPage(System.String,System.String)">
            <summary>
            Create a new, generic page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.Generic</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateEventActionPage(System.String,System.String)">
            <summary>
            Create a new, event action page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.EventAction</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateEventTriggerPage(System.String,System.String)">
            <summary>
            Create a new, event trigger page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.EventTrigger</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.FromJsonString(System.String)">
            <summary>
            Deserialize a JSON string to a page
            <para>
            This should always be wrapped in a try/catch in case the data received is malformed
            </para>
            </summary>
            <param name="jsonString">The JSON string containing the page</param>
            <returns>A Page</returns>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">Thrown when there was a problem deserializing the page</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.JsonFromList(System.Collections.Generic.List{HomeSeer.Jui.Views.Page})">
            <summary>
            Serialize a list of pages to a JSON string
            </summary>
            <param name="pages">the List of Pages to serialize</param>
            <returns>A JSON string containing the serialized pages</returns>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">Thrown when there was a problem serializing the page</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.ListFromJson(System.String)">
            <summary>
            Deserialize a JSON string to a List of Pages
            </summary>
            <param name="jsonString">The JSON string containing the list of pages</param>
            <returns>A List of Jui.Page objects</returns>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">Thrown when there was a problem deserializing the page</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.PageListToHtml(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Convert a list of JSON pages into a tabbed HTML page.
            </summary>
            <param name="jsonPages">A list of pages serialized as JSON strings</param>
            <param name="selectedPage">The index of the page that should be selected by default</param>
            <returns>A string containing a tabbed HTML page</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the supplied list of pages is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the list of pages is empty</exception>
        </member>
        <member name="T:HomeSeer.Jui.Views.SelectListView">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            A selection list allows a user to pick a value from a predefined collection.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.SelectListView.Options">
            <summary>
            A list of options that the user can select from
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.SelectListView.OptionKeys">
            <summary>
            A list of keys that corresponds to the <see cref="P:HomeSeer.Jui.Views.SelectListView.Options"/> list.
            <para>
            For internal use by a plugin.  This is not displayed or used in any fashion otherwise.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.SelectListView.Style">
            <summary>
            The display style for the list of options
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.SelectListView.Selection">
            <summary>
            The index of the currently selected option in the list. This is the value for this view.
            </summary>
            <remarks>
            Set this to -1 to display a default "Select an option" text
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the selection is set to an index that does not work for the current <see cref="P:HomeSeer.Jui.Views.SelectListView.Options"/></exception>
        </member>
        <member name="P:HomeSeer.Jui.Views.SelectListView.DefaultSelectionText">
            <summary>
            The text displayed when <see cref="P:HomeSeer.Jui.Views.SelectListView.Selection"/> equals -1. If this property is null or empty, "Select an option" is displayed. 
            </summary>
            <remarks>This property is not used when <see cref="P:HomeSeer.Jui.Views.SelectListView.Style"/> is <see cref="F:HomeSeer.Jui.Types.ESelectListType.RadioList"/></remarks>
        </member>
        <member name="P:HomeSeer.Jui.Views.SelectListView.UseOptionKeyAsSelectionValue">
            <summary>
            When this property is true, <see cref="M:HomeSeer.Jui.Views.SelectListView.GetStringValue"/>  returns the selected option key instead of the selected option index,
            and <see cref="M:HomeSeer.Jui.Views.SelectListView.UpdateValue(System.String)"/> expects an option key as parameter instead of an option index.
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.#ctor(System.String,System.String,System.Collections.Generic.List{System.String},HomeSeer.Jui.Types.ESelectListType,System.Int32)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of a select list with the default, drop down style, an ID, Name, and the specified list of options
            </summary>
            <param name="id">The unique ID for this View</param>
            <param name="name">The name of the view</param>
            <param name="options">The list of options</param>
            <param name="style">The display style of the select list. DEFAULT: drop down</param>
            <param name="selection">The index of the currently selected option in the list. DEFAULT: 0</param>
            <exception cref="T:System.ArgumentNullException">Thrown if select list is create with an invalid list of options</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if select list is created with an invalid index for the currently selected option</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.#ctor(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},HomeSeer.Jui.Types.ESelectListType,System.Int32)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of a select list with the default, drop down style, an ID, Name, and the specified list of options and keys
            </summary>
            <param name="id">The unique ID for this View</param>
            <param name="name">The name of the view</param>
            <param name="options">The list of options</param>
            <param name="style">The display style of the select list. DEFAULT: drop down</param>
            <param name="selection">The index of the currently selected option in the list. DEFAULT: 0</param>
            <param name="optionKeys">The list of keys corresponding to the list of options</param>
            <exception cref="T:System.ArgumentNullException">Thrown if select list is create with an invalid list of options</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if select list is created with an invalid index for the currently selected option</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.Update(HomeSeer.Jui.Views.AbstractView)"/>
            <summary>
            Update the view to the new state.  This will change the selected option 
            </summary>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when the new view's class doesn't match the calling view</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.UpdateValue(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.UpdateValue(System.String)"/>
            <exception cref="T:System.FormatException">Thrown when the value is not in the correct format</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.GetStringValue">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.GetStringValue"/>
            <remarks>
            Returns the selected option key if <see cref="P:HomeSeer.Jui.Views.SelectListView.UseOptionKeyAsSelectionValue"/> is true, else returns the selected index as a string
            </remarks>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.GetSelectedOption">
            <summary>
            Get the currently selected option text.
            </summary>
            <returns>The text of the option at the index specified by <see cref="P:HomeSeer.Jui.Views.SelectListView.Selection"/>.</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.GetSelectedOptionKey">
            <summary>
            Get the currently selected option key
            </summary>
            <returns>The key of the option at the index specified by <see cref="P:HomeSeer.Jui.Views.SelectListView.Selection"/>.</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.ToHtml(System.Int32)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)"/>
        </member>
        <member name="T:HomeSeer.Jui.Views.SettingsCollection">
            <summary>
            A collection of JUI settings pages.
            </summary>
            <remarks>
            This is the primary container for settings pages used by plugins. It is integrated into
             the AbstractPlugin class and automatically initialized to an empty collection.
            </remarks>
            <seealso cref="T:HomeSeer.Jui.Views.Page"/>
        </member>
        <member name="P:HomeSeer.Jui.Views.SettingsCollection.Count">
            <summary>
            The number of pages in this collection
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.SettingsCollection.Pages">
            <summary>
            The list of pages in this collection, excluding hidden pages.
            </summary>
            <seealso cref="T:HomeSeer.Jui.Views.Page"/>
        </member>
        <member name="P:HomeSeer.Jui.Views.SettingsCollection.AllPages">
            <summary>
            The list of all of the pages in the collection, including hidden ones.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.SettingsCollection.SelectedPageIndex">
            <summary>
            The index of the page that is selected and will be shown first to users
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.#ctor">
            <summary>
            Default, empty constructor
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.#ctor(System.Collections.Generic.List{HomeSeer.Jui.Views.Page})">
            <summary>
            Create a new SettingsCollection with the given list of pages
            </summary>
            <param name="pages">The list of pages for the collection</param>
            <seealso cref="T:HomeSeer.Jui.Views.Page"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.Add(HomeSeer.Jui.Views.Page)">
            <summary>
            Add a page to the collection
            </summary>
            <param name="page">The page to add. Should be a page of type <see cref="F:HomeSeer.Jui.Types.EPageType.Settings"/></param>
            <exception cref="T:System.ArgumentNullException">The supplied page or its ID is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if a page with the same ID already exists in the collection</exception>
            <seealso cref="T:HomeSeer.Jui.Views.Page"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.HidePageById(System.String)">
            <summary>
            Mark the page with the specified ID as hidden when the collection is converted to HTML so that it is
             not included.
            </summary>
            <param name="pageId">The ID of the page to hide</param>
            <exception cref="T:System.ArgumentNullException">Thrown when an invalid page ID is specified</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a page with the specified ID doesn't exist</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.ShowPageById(System.String)">
            <summary>
            Mark the page with the specified ID as shown when the collection is converted to HTML so that it is
             included.
            </summary>
            <param name="pageId">The ID of the page to show</param>
            <exception cref="T:System.ArgumentNullException">Thrown when an invalid page ID is specified</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a page with the specified ID doesn't exist</exception>
        </member>
        <member name="P:HomeSeer.Jui.Views.SettingsCollection.Item(System.String)">
            <summary>
            Get the page with the specified ID
            </summary>
            <param name="pageId">The ID of the desired page</param>
            <seealso cref="T:HomeSeer.Jui.Views.Page"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.IndexOf(System.String)">
            <summary>
            Get the index of the page with the specified ID
            </summary>
            <param name="pageId">The ID of the page to look for</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when pageId is null or whitespace</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the pageId was not found in the collection</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.ContainsPageId(System.String)">
            <summary>
            Determine if the collection contains a page with the specified ID
            </summary>
            <param name="pageId">The ID of the page to look for</param>
            <returns>
            TRUE if the collection contains the page,
             FALSE if the page was not found
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when pageId is null or whitespace</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Swap the pages at the specified indexes
            </summary>
            <remarks>
            When this method finishes, the page at index1 will be located at index2,
             and the page at index2 will be located at index1.
            </remarks>
            <param name="index1">The index of the first page</param>
            <param name="index2">The index of the second page</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either index is out of range of the collection</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.RemoveById(System.String)">
            <summary>
            Remove the page with the specified ID from the collection
            </summary>
            <param name="pageId">The ID of the page to remove</param>
            <exception cref="T:System.ArgumentNullException">Thrown when pageId is null or whitespace</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the pageId was not found in the collection</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.RemoveAll">
            <summary>
            Remove all pages from the collection
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.ToJsonString">
            <summary>
            Serialize the settings collection as JSON
            </summary>
            <returns>A string containing the settings collection formatted as JSON</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.FromJsonString(System.String)">
            <summary>
            Deserialize a JSON string to a settings collection
            <para>
            This should always be wrapped in a try/catch in case the data received is malformed
            </para>
            </summary>
            <param name="jsonString">The JSON string containing the settings collection</param>
            <returns>A SettingsCollection</returns>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">Thrown when there was a problem deserializing the settings collection</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SettingsCollection.ToHtml">
            <summary>
            Convert the settings collection into a tabbed HTML page.
            </summary>
            <returns>A string containing a tabbed HTML page</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the list of pages is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the list of pages is empty</exception>
        </member>
        <member name="T:HomeSeer.Jui.Views.ToggleView">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            A toggle switch is used to indicate a control that has only two possible operational states.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ToggleView.IsEnabled">
            <summary>
            The current state of the toggle switch
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ToggleView.ToggleType">
            <summary>
            The style of toggle
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ToggleView.#ctor(System.String,System.String,System.Boolean)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of a toggle with an ID and Name
            </summary>
            <param name="id">The unique ID for the view</param>
            <param name="name">The name of the view</param>
            <param name="isEnabled">The state of the toggle. DEFAULT: false</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ToggleView.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.Update(HomeSeer.Jui.Views.AbstractView)"/>
            <summary>
            Update the view to the new state.  This will change the enabled state
            </summary>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when the new view's class doesn't match the calling view</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ToggleView.UpdateValue(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.UpdateValue(System.String)"/>
            <exception cref="T:System.FormatException">Thrown when the value is not in the correct format</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ToggleView.GetStringValue">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.GetStringValue"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ToggleView.ToHtml(System.Int32)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddView(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)">
            <summary>
            Add a view to a collection
            </summary>
            <param name="view">The view to add to the collection</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <param name="toGroup">If the collection the view is being added it is a ViewGroup. DEFAULT: false for a Page</param>
            <exception cref="T:System.ArgumentNullException">The view or its ID is null</exception>
            <exception cref="T:System.ArgumentException">There is already a view with the same ID present in the collection</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to add a ViewGroup to another ViewGroup</exception>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when a view group's type does not match its class</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddView(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add multiple views to a collection
            </summary>
            <param name="views">The views to add to the collection</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <param name="toGroup">If the collection the views are being added it is a ViewGroup. DEFAULT: false for a Page</param>
            <exception cref="T:System.ArgumentNullException">The list of views is null</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Set the collection of views
            </summary>
            <param name="views">The new state of the collection</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <param name="toGroup">If the collection the views are being added it is a ViewGroup. DEFAULT: false for a Page</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.ContainsViewWithId(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Check to see if a view with a specific ID is present in a collection
            </summary>
            <param name="viewId">The ID of the view to look for</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <returns>TRUE if the view exists in the collection; FALSE if it does not exist in the collection</returns>
            <exception cref="T:System.ArgumentNullException">The viewId to look for is NULL</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view is not in the collection</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.GetViewById(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Get the view with a specific ID from a collection
            </summary>
            <param name="viewId">The ID of the view to look for</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <returns>The view with the specified ID</returns>
            <exception cref="T:System.ArgumentNullException">The viewId to look for is NULL</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view is not in the collection</exception>
            <exception cref="T:System.ArgumentException">There are no views in the collection</exception>
            <exception cref="T:HomeSeer.Jui.Views.ViewNotFoundException">No views with that ID were found in the collection</exception>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when a view group's type does not match its class</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.GetViewById``1(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Get the view with a specific ID from a collection cast as the target type
            </summary>
            <param name="viewId">The ID of the view to look for</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <returns>The view with the specified ID cast to the target type</returns>
            <exception cref="T:System.ArgumentNullException">The viewId to look for is NULL</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view is not in the collection</exception>
            <exception cref="T:System.ArgumentException">There are no views in the collection</exception>
            <exception cref="T:HomeSeer.Jui.Views.ViewNotFoundException">No views with that ID were found in the collection</exception>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when a view group's type does not match its class</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.UpdateViewById(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Perform a soft update to a view in a collection with a particular ID
            </summary>
            <param name="view">The new state of the view to update</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <exception cref="T:System.ArgumentNullException">The viewId to look for is NULL</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view is not in the collection</exception>
            <exception cref="T:System.ArgumentException">There are no views in the collection</exception>
            <exception cref="T:HomeSeer.Jui.Views.ViewNotFoundException">No views with that ID were found in the collection</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.MapViewIds(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)">
            <summary>
            Build a map of view IDs and list indexes for a collection of views
            </summary>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <param name="calledByGroup">Whether the method was called by a ViewGroup or not. Prevents infinite recursion.</param>
            <exception cref="T:System.ArgumentNullException">The list of views to map is null</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.RemoveViewById(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Remove a view with the specified ID from the collection.
            <para>
            Remaining views at indexes greater than the specified view will be moved down one index to fill the empty space
            </para>
            </summary>
            <param name="viewId">The ID of the view to remove</param>
            <param name="viewList">The current list of views in the collection</param>
            <param name="viewIds">The current view ID to index map for the collection</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when any of the supplied parameters is null of empty
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the number of items in the <paramref name="viewList"/> and <paramref name="viewIds"/> do not match
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a view with the specified ID was not found</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.RemoveViewsAfterId(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Trim all views in the collection following the view with the specified ID
            </summary>
            <param name="viewId">The ID of the view that should be at the end of the collection</param>
            <param name="viewList">The current list of views in the collection</param>
            <param name="viewIds">The current view ID to index map for the collection</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when any of the supplied parameters is null of empty
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the number of items in the <paramref name="viewList"/> and <paramref name="viewIds"/> do not match
            </exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.RemoveAllViews(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Clear a collection of views
            </summary>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
        </member>
        <member name="T:HomeSeer.Jui.Views.ViewGroup">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            View groups define a vertical sub-grouping of views with a header.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ViewGroup.Views">
            <summary>
            The views to display within this group.   This is for access only.
            Use <see cref="M:HomeSeer.Jui.Views.ViewGroup.AddView(HomeSeer.Jui.Views.AbstractView)"/> and <see cref="M:HomeSeer.Jui.Views.ViewGroup.UpdateViewById(HomeSeer.Jui.Views.AbstractView)"/> for setting views/updating them
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ViewGroup.ViewIds">
            <summary>
            A list of the IDs of the views in this group
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ViewGroup.ViewCount">
            <summary>
            The number of views that are in this group.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.ViewGroup._views">
            <summary>
            The views to display within this group.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.ViewGroup._viewIds">
            <summary>
            A set of IDs for the views in this group.  This is used to ensure that there are no duplicate IDs used.
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.#ctor(System.String)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of a view group with an ID
            </summary>
            <param name="id">The unique ID of the group</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.#ctor(System.String,System.String)">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            Create a new instance of a view group with an ID and Name
            </summary>
            <param name="id">The unique ID of the group</param>
            <param name="name">The unique ID of the name. DEFAULT: null</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.AddView(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddView(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add a view to the group
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView})">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add multiple views to the group
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView})">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Set the list of views in this group
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.ContainsViewWithId(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.ContainsViewWithId(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.GetViewById(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.GetViewById(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.GetViewById``1(System.String)">
            <summary>
            Get the view with a specific ID from a collection cast as the target type
            </summary>
            <param name="viewId">The ID of the view to get</param>
            <returns>
            The view with the specified ID cast as the target type.
            </returns>
            <exception cref="T:System.ArgumentNullException">An invalid view ID was entered</exception>
            <exception cref="T:System.ArgumentException">No views are in the group to get</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view was not.  The group is probably malformed and should be recreated.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No views with that ID were found</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.GetStringValue">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.GetStringValue"/>
            <exception cref="T:System.InvalidOperationException">Thrown to indicate that this ViewGroup contains other views</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.UpdateViewById(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.UpdateViewById(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.UpdateViewValueById(System.String,System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.UpdateViewValueById(System.String,System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.MapViewIds">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.MapViewIds(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.Update(HomeSeer.Jui.Views.AbstractView)"/>
            <summary>
            Not used by ViewGroups
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.RemoveAllViews">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.RemoveAllViews(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.ToHtml(System.Int32)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)"/>
        </member>
        <member name="T:HomeSeer.Jui.Views.ViewNotFoundException">
            <summary>
            The exception that is thrown when a view is not found in a collection
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewNotFoundException.#ctor">
            <summary>
            Create an exception with the default message
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewNotFoundException.#ctor(System.String)">
            <summary>
            Create an exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Create an exception wrapping another exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
            <param name="innerException">The exception to wrap</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor used for deserialization. 
            This is mandatory in order for HSCF to be able to deserialize this exception.
            </summary>
            <param name="info">The data to deserialize from</param>
            <param name="context">The context of the source stream</param>
        </member>
        <member name="T:HomeSeer.Jui.Views.ViewTypeMismatchException">
            <summary>
            The exception that is thrown when a view's type doesn't match its class
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewTypeMismatchException.#ctor">
            <summary>
            Create an exception with the default message
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewTypeMismatchException.#ctor(System.String)">
            <summary>
            Create an exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Create an exception wrapping another exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
            <param name="innerException">The exception to wrap</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor used for deserialization. 
            This is mandatory in order for HSCF to be able to deserialize this exception.
            </summary>
            <param name="info">The data to deserialize from</param>
            <param name="context">The context of the source stream</param>
        </member>
    </members>
</doc>
